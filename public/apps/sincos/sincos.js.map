{"version":3,"file":"sincos.js","sources":["../node_modules/svelte/internal/index.mjs","../src/AppControlArea.svelte","../src/AppControl.svelte","../src/AppControlRange.svelte","../src/AppControlSwitch.svelte","../node_modules/mdatools/src/stat/index.js","../node_modules/mdatools/src/distributions/index.js","../node_modules/mdatools/src/arrays/index.js","../node_modules/svelte/store/index.mjs","../node_modules/svelte-plots-basic/src/Utils.js","../node_modules/svelte-plots-basic/src/2d/Axes.svelte","../node_modules/svelte-plots-basic/src/Colors.js","../node_modules/svelte-plots-basic/src/2d/AxisLines.svelte","../node_modules/svelte-plots-basic/src/2d/AxisTickLabels.svelte","../node_modules/svelte-plots-basic/src/2d/Axis.svelte","../node_modules/svelte-plots-basic/src/2d/XAxis.svelte","../node_modules/svelte-plots-basic/src/2d/YAxis.svelte","../node_modules/svelte-plots-basic/src/2d/Box.svelte","../node_modules/svelte-plots-basic/src/2d/Segments.svelte","../node_modules/svelte-plots-basic/src/2d/TextLabels.svelte","../node_modules/svelte-plots-basic/src/2d/Points.svelte","../node_modules/svelte-plots-basic/src/2d/Lines.svelte","../node_modules/svelte-plots-basic/src/2d/Legend.svelte","../src/AppPlotLegend.svelte","../src/AppPlotCircle.svelte","../src/AppPlotFunction.svelte","../src/App.svelte","../src/main.js"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\n// Adapted from https://github.com/then/is-promise/blob/master/index.js\n// Distributed under MIT License https://github.com/then/is-promise/blob/master/LICENSE\nfunction is_promise(value) {\n    return !!value && (typeof value === 'object' || typeof value === 'function') && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\nfunction split_css_unit(value) {\n    const split = typeof value === 'string' && value.match(/^\\s*(-?[\\d.]+)([^\\s]*)\\s*$/);\n    return split ? [parseFloat(split[1]), split[2] || 'px'] : [value, 'px'];\n}\nconst contenteditable_truthy_values = ['', true, 1, 'true', 'contenteditable'];\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\n/**\n * Resize observer singleton.\n * One listener per element only!\n * https://groups.google.com/a/chromium.org/g/blink-dev/c/z6ienONUb5A/m/F5-VcUZtBAAJ\n */\nclass ResizeObserverSingleton {\n    constructor(options) {\n        this.options = options;\n        this._listeners = 'WeakMap' in globals ? new WeakMap() : undefined;\n    }\n    observe(element, listener) {\n        this._listeners.set(element, listener);\n        this._getObserver().observe(element, this.options);\n        return () => {\n            this._listeners.delete(element);\n            this._observer.unobserve(element); // this line can probably be removed\n        };\n    }\n    _getObserver() {\n        var _a;\n        return (_a = this._observer) !== null && _a !== void 0 ? _a : (this._observer = new ResizeObserver((entries) => {\n            var _a;\n            for (const entry of entries) {\n                ResizeObserverSingleton.entries.set(entry.target, entry);\n                (_a = this._listeners.get(entry.target)) === null || _a === void 0 ? void 0 : _a(entry);\n            }\n        }));\n    }\n}\n// Needs to be written like this to pass the tree-shake-test\nResizeObserverSingleton.entries = 'WeakMap' in globals ? new WeakMap() : undefined;\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element.sheet;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n    return style.sheet;\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentNode !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    if (node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction comment(content) {\n    return document.createComment(content);\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_immediate_propagation(fn) {\n    return function (event) {\n        event.stopImmediatePropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\n/**\n * List of attributes that should always be set through the attr method,\n * because updating them through the property setter doesn't work reliably.\n * In the example of `width`/`height`, the problem is that the setter only\n * accepts numeric values, but the attribute can also be set to a string like `50%`.\n * If this list becomes too big, rethink this approach.\n */\nconst always_set_through_set_attribute = ['width', 'height'];\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set && always_set_through_set_attribute.indexOf(key) === -1) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data_map(node, data_map) {\n    Object.keys(data_map).forEach((key) => {\n        set_custom_element_data(node, key, data_map[key]);\n    });\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction set_dynamic_element_data(tag) {\n    return (/-/.test(tag)) ? set_custom_element_data_map : set_attributes;\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction init_binding_group(group) {\n    let _inputs;\n    return {\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            _inputs.forEach(input => group.push(input));\n        },\n        /* remove */ r() {\n            _inputs.forEach(input => group.splice(group.indexOf(input), 1));\n        }\n    };\n}\nfunction init_binding_group_dynamic(group, indexes) {\n    let _group = get_binding_group(group);\n    let _inputs;\n    function get_binding_group(group) {\n        for (let i = 0; i < indexes.length; i++) {\n            group = group[indexes[i]] = group[indexes[i]] || [];\n        }\n        return group;\n    }\n    function push() {\n        _inputs.forEach(input => _group.push(input));\n    }\n    function remove() {\n        _inputs.forEach(input => _group.splice(_group.indexOf(input), 1));\n    }\n    return {\n        /* update */ u(new_indexes) {\n            indexes = new_indexes;\n            const new_group = get_binding_group(group);\n            if (new_group !== _group) {\n                remove();\n                _group = new_group;\n                push();\n            }\n        },\n        /* push */ p(...inputs) {\n            _inputs = inputs;\n            push();\n        },\n        /* remove */ r: remove\n    };\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction claim_comment(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 8, (node) => {\n        node.data = '' + data;\n        return undefined;\n    }, () => comment(data), true);\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes, is_svg) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration(undefined, is_svg);\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index - start_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes, is_svg);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    text.data = data;\n}\nfunction set_data_contenteditable(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable(text, data);\n    }\n    else {\n        set_data(text, data);\n    }\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    if (value == null) {\n        node.style.removeProperty(key);\n    }\n    else {\n        node.style.setProperty(key, value, important ? 'important' : '');\n    }\n}\nfunction select_option(select, value, mounting) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    if (!mounting || value !== undefined) {\n        select.selectedIndex = -1; // no option should be selected\n    }\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked');\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_iframe_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n            // make sure an initial resize event is fired _after_ the iframe is loaded (which is asynchronous)\n            // see https://github.com/sveltejs/svelte/issues/4233\n            fn();\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nconst resize_observer_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'content-box' });\nconst resize_observer_border_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'border-box' });\nconst resize_observer_device_pixel_content_box = /* @__PURE__ */ new ResizeObserverSingleton({ box: 'device-pixel-content-box' });\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, cancelable, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nfunction head_selector(nodeId, head) {\n    const result = [];\n    let started = 0;\n    for (const node of head.childNodes) {\n        if (node.nodeType === 8 /* comment node */) {\n            const comment = node.textContent.trim();\n            if (comment === `HEAD_${nodeId}_END`) {\n                started -= 1;\n                result.push(node);\n            }\n            else if (comment === `HEAD_${nodeId}_START`) {\n                started += 1;\n                result.push(node);\n            }\n        }\n        else if (started > 0) {\n            result.push(node);\n        }\n    }\n    return result;\n}\nclass HtmlTag {\n    constructor(is_svg = false) {\n        this.is_svg = false;\n        this.is_svg = is_svg;\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            if (this.is_svg)\n                this.e = svg_element(target.nodeName);\n            /** #7364  target for <template> may be provided as #document-fragment(11) */\n            else\n                this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));\n            this.t = target.tagName !== 'TEMPLATE' ? target : target.content;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes, is_svg = false) {\n        super(is_svg);\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\nfunction construct_svelte_component(component, props) {\n    return new component(props);\n}\n\n// we need to store the information for multiple documents because a Svelte application could also contain iframes\n// https://github.com/sveltejs/svelte/issues/3624\nconst managed_styles = new Map();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_style_information(doc, node) {\n    const info = { stylesheet: append_empty_stylesheet(node), rules: {} };\n    managed_styles.set(doc, info);\n    return info;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);\n    if (!rules[name]) {\n        rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        managed_styles.forEach(info => {\n            const { ownerNode } = info.stylesheet;\n            // there is no ownerNode if it runs on jsdom.\n            if (ownerNode)\n                detach(ownerNode);\n        });\n        managed_styles.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\n/**\n * Schedules a callback to run immediately before the component is updated after any state change.\n *\n * The first time the callback runs will be before the initial `onMount`\n *\n * https://svelte.dev/docs#run-time-svelte-beforeupdate\n */\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\n/**\n * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.\n * It must be called during the component's initialisation (but doesn't need to live *inside* the component;\n * it can be called from an external module).\n *\n * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).\n *\n * https://svelte.dev/docs#run-time-svelte-onmount\n */\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\n/**\n * Schedules a callback to run immediately after the component has been updated.\n *\n * The first time the callback runs will be after the initial `onMount`\n */\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\n/**\n * Schedules a callback to run immediately before the component is unmounted.\n *\n * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the\n * only one that runs inside a server-side component.\n *\n * https://svelte.dev/docs#run-time-svelte-ondestroy\n */\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\n/**\n * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).\n * Event dispatchers are functions that can take two arguments: `name` and `detail`.\n *\n * Component events created with `createEventDispatcher` create a\n * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).\n * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).\n * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)\n * property and can contain any type of data.\n *\n * https://svelte.dev/docs#run-time-svelte-createeventdispatcher\n */\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail, { cancelable = false } = {}) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail, { cancelable });\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n            return !event.defaultPrevented;\n        }\n        return true;\n    };\n}\n/**\n * Associates an arbitrary `context` object with the current component and the specified `key`\n * and returns that object. The context is then available to children of the component\n * (including slotted content) with `getContext`.\n *\n * Like lifecycle functions, this must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-setcontext\n */\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n    return context;\n}\n/**\n * Retrieves the context that belongs to the closest parent component with the specified `key`.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-getcontext\n */\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\n/**\n * Retrieves the whole context map that belongs to the closest parent component.\n * Must be called during component initialisation. Useful, for example, if you\n * programmatically create a component and want to pass the existing context to it.\n *\n * https://svelte.dev/docs#run-time-svelte-getallcontexts\n */\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\n/**\n * Checks whether a given `key` has been set in the context of a parent component.\n * Must be called during component initialisation.\n *\n * https://svelte.dev/docs#run-time-svelte-hascontext\n */\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nlet render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = /* @__PURE__ */ Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\n// flush() calls callbacks in this order:\n// 1. All beforeUpdate callbacks, in order: parents before children\n// 2. All bind:this callbacks, in reverse order: children before parents.\n// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT\n//    for afterUpdates called during the initial onMount, which are called in\n//    reverse order: children before parents.\n// Since callbacks might update component values, which could trigger another\n// call to flush(), the following steps guard against this:\n// 1. During beforeUpdate, any updated components will be added to the\n//    dirty_components array and will cause a reentrant call to flush(). Because\n//    the flush index is kept outside the function, the reentrant call will pick\n//    up where the earlier call left off and go through all dirty components. The\n//    current_component value is saved and restored so that the reentrant call will\n//    not interfere with the \"parent\" flush() call.\n// 2. bind:this callbacks cannot trigger new flush() calls.\n// 3. During afterUpdate, any updated components will NOT have their afterUpdate\n//    callback called a second time; the seen_callbacks set, outside the flush()\n//    function, guarantees this behavior.\nconst seen_callbacks = new Set();\nlet flushidx = 0; // Do *not* move this inside the flush() function\nfunction flush() {\n    // Do not reenter flush while dirty components are updated, as this can\n    // result in an infinite loop. Instead, let the inner flush handle it.\n    // Reentrancy is ok afterwards for bindings etc.\n    if (flushidx !== 0) {\n        return;\n    }\n    const saved_component = current_component;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        try {\n            while (flushidx < dirty_components.length) {\n                const component = dirty_components[flushidx];\n                flushidx++;\n                set_current_component(component);\n                update(component.$$);\n            }\n        }\n        catch (e) {\n            // reset dirty state to not end up in a deadlocked state and then rethrow\n            dirty_components.length = 0;\n            flushidx = 0;\n            throw e;\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        flushidx = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    seen_callbacks.clear();\n    set_current_component(saved_component);\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n/**\n * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.\n */\nfunction flush_render_callbacks(fns) {\n    const filtered = [];\n    const targets = [];\n    render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));\n    targets.forEach((c) => c());\n    render_callbacks = filtered;\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n    else if (callback) {\n        callback();\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    const options = { direction: 'in' };\n    let config = fn(node, params, options);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config(options);\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    const options = { direction: 'out' };\n    let config = fn(node, params, options);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config(options);\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    const options = { direction: 'both' };\n    let config = fn(node, params, options);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config(options);\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    const updates = [];\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            // defer updates until all the DOM shuffling is done\n            updates.push(() => block.p(child_ctx, dirty));\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    run_all(updates);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\nconst _boolean_attributes = [\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'inert',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n];\n/**\n * List of HTML boolean attributes (e.g. `<input disabled>`).\n * Source: https://html.spec.whatwg.org/multipage/indices.html\n */\nconst boolean_attributes = new Set([..._boolean_attributes]);\n\n/** regex of all html void element names */\nconst void_element_names = /^(?:area|base|br|col|command|embed|hr|img|input|keygen|link|meta|param|source|track|wbr)$/;\nfunction is_void(name) {\n    return void_element_names.test(name) || name.toLowerCase() === '!doctype';\n}\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, attrs_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (attrs_to_add) {\n        const classes_to_add = attrs_to_add.classes;\n        const styles_to_add = attrs_to_add.styles;\n        if (classes_to_add) {\n            if (attributes.class == null) {\n                attributes.class = classes_to_add;\n            }\n            else {\n                attributes.class += ' ' + classes_to_add;\n            }\n        }\n        if (styles_to_add) {\n            if (attributes.style == null) {\n                attributes.style = style_object_to_string(styles_to_add);\n            }\n            else {\n                attributes.style = style_object_to_string(merge_ssr_styles(attributes.style, styles_to_add));\n            }\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nfunction merge_ssr_styles(style_attribute, style_directive) {\n    const style_object = {};\n    for (const individual_style of style_attribute.split(';')) {\n        const colon_index = individual_style.indexOf(':');\n        const name = individual_style.slice(0, colon_index).trim();\n        const value = individual_style.slice(colon_index + 1).trim();\n        if (!name)\n            continue;\n        style_object[name] = value;\n    }\n    for (const name in style_directive) {\n        const value = style_directive[name];\n        if (value) {\n            style_object[name] = value;\n        }\n        else {\n            delete style_object[name];\n        }\n    }\n    return style_object;\n}\nconst ATTR_REGEX = /[&\"]/g;\nconst CONTENT_REGEX = /[&<]/g;\n/**\n * Note: this method is performance sensitive and has been optimized\n * https://github.com/sveltejs/svelte/pull/5701\n */\nfunction escape(value, is_attr = false) {\n    const str = String(value);\n    const pattern = is_attr ? ATTR_REGEX : CONTENT_REGEX;\n    pattern.lastIndex = 0;\n    let escaped = '';\n    let last = 0;\n    while (pattern.test(str)) {\n        const i = pattern.lastIndex - 1;\n        const ch = str[i];\n        escaped += str.substring(last, i) + (ch === '&' ? '&amp;' : (ch === '\"' ? '&quot;' : '&lt;'));\n        last = i + 1;\n    }\n    return escaped + str.substring(last);\n}\nfunction escape_attribute_value(value) {\n    // keep booleans, null, and undefined for the sake of `spread`\n    const should_escape = typeof value === 'string' || (value && typeof value === 'object');\n    return should_escape ? escape(value, true) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules. Otherwise you may need to fix a <${name}>.`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    const assignment = (boolean && value === true) ? '' : `=\"${escape(value, true)}\"`;\n    return ` ${name}${assignment}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\nfunction style_object_to_string(style_object) {\n    return Object.keys(style_object)\n        .filter(key => style_object[key])\n        .map(key => `${key}: ${escape_attribute_value(style_object[key])};`)\n        .join(' ');\n}\nfunction add_styles(style_object) {\n    const styles = style_object_to_string(style_object);\n    return styles ? ` style=\"${styles}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);\n            // if the component was destroyed immediately\n            // it will update the `$$.on_destroy` reference to `null`.\n            // the destructured on_destroy may still reference to the old array\n            if (component.$$.on_destroy) {\n                component.$$.on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        flush_render_callbacks($$.after_update);\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: [],\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            if (!is_function(callback)) {\n                return noop;\n            }\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        if (!is_function(callback)) {\n            return noop;\n        }\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    if (has_stop_immediate_propagation)\n        modifiers.push('stopImmediatePropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.data === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_contenteditable_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction set_data_maybe_contenteditable_dev(text, data, attr_value) {\n    if (~contenteditable_truthy_values.indexOf(attr_value)) {\n        set_data_contenteditable_dev(text, data);\n    }\n    else {\n        set_data_dev(text, data);\n    }\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\nfunction validate_dynamic_element(tag) {\n    const is_string = typeof tag === 'string';\n    if (tag && !is_string) {\n        throw new Error('<svelte:element> expects \"this\" attribute to be a string.');\n    }\n}\nfunction validate_void_dynamic_element(tag) {\n    if (tag && is_void(tag)) {\n        console.warn(`<svelte:element this=\"${tag}\"> is self-closing and cannot have content.`);\n    }\n}\nfunction construct_svelte_component_dev(component, props) {\n    const error_message = 'this={...} of <svelte:component> should specify a Svelte component.';\n    try {\n        const instance = new component(props);\n        if (!instance.$$ || !instance.$set || !instance.$on || !instance.$destroy) {\n            throw new Error(error_message);\n        }\n        return instance;\n    }\n    catch (err) {\n        const { message } = err;\n        if (typeof message === 'string' && message.indexOf('is not a constructor') !== -1) {\n            throw new Error(error_message);\n        }\n        else {\n            throw err;\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, ResizeObserverSingleton, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_iframe_resize_listener, add_location, add_render_callback, add_styles, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_comment, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, comment, component_subscribe, compute_rest_props, compute_slots, construct_svelte_component, construct_svelte_component_dev, contenteditable_truthy_values, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, flush_render_callbacks, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, head_selector, identity, init, init_binding_group, init_binding_group_dynamic, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, is_void, listen, listen_dev, loop, loop_guard, merge_ssr_styles, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, resize_observer_border_box, resize_observer_content_box, resize_observer_device_pixel_content_box, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_custom_element_data_map, set_data, set_data_contenteditable, set_data_contenteditable_dev, set_data_dev, set_data_maybe_contenteditable, set_data_maybe_contenteditable_dev, set_dynamic_element_data, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, split_css_unit, spread, src_url_equal, start_hydrating, stop_immediate_propagation, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_dynamic_element, validate_each_argument, validate_each_keys, validate_slots, validate_store, validate_void_dynamic_element, xlink_attr };\n","<script>\n   export let errormsg = undefined;\n   export let legend = \"\";\n</script>\n\n<fieldset class=\"app-control-block\">\n   {#if legend !== \"\"}\n   <legend>{legend}</legend>\n   {/if}\n   <slot></slot>\n   {#if errormsg}<div class=\"app-control-error\">{errormsg}</div>{/if}\n</fieldset>\n\n<style>\n   .app-control-block {\n      box-sizing: border-box;\n      width: 100%;\n      min-width: 200px;\n   }\n\n   .app-control-error {\n      padding: 0.5em 0.5em 0.25em 0.65em;\n      font-size: 0.75em;\n      color: crimson;\n   }\n\n   fieldset {\n      background: #f4f4f4;\n      margin: 0;\n      box-shadow: 0px 0px 2px  #30303020;\n      border: none;\n      padding: 0.5em;\n   }\n\n   legend {\n      color: #606060;\n      float: left;\n      width: 100%;\n      display: block;\n      margin: 0;\n      padding: 0.25em 0em;\n      font-size: 1.0em;\n      font-weight: bold;\n   }\n</style>","<script>\n   export let id;\n   export let label;\n   export let disable = false;\n   export let hidden = false;\n</script>\n\n<div class=\"app-control\" class:hidden class:disable>\n   <div class=\"shield\"></div>\n   <label for={id}>{@html label}</label>\n   <slot></slot>\n</div>\n\n<style>\n   .app-control {\n      font-size: 1em;\n      margin: 0.25em 0 0 0;\n      padding: 0.15em 0.25em;\n      display: flex;\n      align-items: center;\n      justify-content: flex-begin;\n      position: relative;\n   }\n\n\n   .app-control > label {\n      height: 1.5em;\n      line-height: 1.5em;\n      flex: 0 0 16ch;\n      max-width: 16ch;\n      user-select: none;\n      -webkit-user-select: none;\n      cursor: default\n   }\n\n   .app-control > slot {\n      width: 100%;\n      flex: 1 1 auto;\n   }\n\n   .shield {\n      display: none;\n   }\n\n\n\n   /* disabled styles */\n   .app-control.disable > label{\n      color: #b0b0b0;\n   }\n\n   .app-control.hidden {\n      visibility: hidden;\n   }\n\n   .app-control.disable > .shield {\n      display: block;\n      background: #ffffff50;\n      position: absolute;\n      top: 0;\n      left: 0;\n      width: 100%;\n      height: 100%;\n      z-index: 999;\n   }\n</style>","<script>\n   import { createEventDispatcher } from \"svelte\";\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let value;\n   export let min;\n   export let max;\n   export let decNum = 1;\n   export let step = +((max - min) / 100).toFixed(4);\n   export let disable = false;\n   export let hidden = false;\n\n   if (value < min || value > max) {\n      throw(\"The value is outside of the provided range.\");\n   }\n\n   const dispatch = createEventDispatcher();\n\n   let sliderElement;\n   let sliderContainer;\n   let isDragging = false;\n\n   const computeValue = (p) => {\n      const tmpValue = min + p * (max - min);\n\n      // strange construction below is needed for:\n      // a. make a value fractionated according to step\n      // b. get rid of small decimals added by JS due to loss of precision\n      return(+(Math.round(tmpValue / step) * step).toFixed(4));\n   }\n\n   const getRelativePosition = (e) => {\n      const sliderRect = sliderElement.getBoundingClientRect();\n      const parentRect = sliderContainer.getBoundingClientRect();\n      const minX = sliderRect.x;\n      const maxX = parentRect.x + parentRect.width;\n\n      return (e.clientX - minX) / (maxX - minX);\n   }\n\n   const startChanging = (e) => {\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n      isDragging = p * 100 > width - 5 && p * 100 < width + 5;\n   }\n\n   const cancelChanging = (e) => {\n      isDragging = false;\n   }\n\n   const stopChanging = (e) => {\n      isDragging = false;\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n\n      value = computeValue(p);\n   }\n\n   const changingByWheel = (e) => {\n      let newValue = value + step * e.deltaY * 0.5;\n      if (newValue < min) newValue = min;\n      if (newValue > max) newValue = max;\n      value = +(Math.round(newValue / step) * step).toFixed(4);\n   }\n\n   const changing = (e) => {\n      if (!isDragging) return;\n      const p = getRelativePosition(e);\n      if (p < 0 || p > 1) return;\n\n      value = computeValue(p);\n   }\n\n   $: width = (value - min) / (max - min) * 100;\n   $: dispatch(\"change\", value);\n</script>\n\n<AppControl id={id} label={label} {disable} {hidden}>\n   <div\n      class=\"range-slider-container\"\n      bind:this={sliderContainer}\n      on:mousewheel|preventDefault={changingByWheel}\n      on:mousemove={changing}\n      on:mousedown={startChanging}\n      on:mouseleave={cancelChanging}\n      on:mouseup={stopChanging}>\n\n      <div class=\"range-slider\" style=\"width:{width}%\" bind:this={sliderElement}></div>\n      <span>{value.toFixed(decNum)}</span>\n   </div>\n   <input type=\"range\" step={step} bind:value=\"{value}\" min={min} max={max}>\n</AppControl>\n\n<style>\n   .range-slider-container {\n      position: relative;\n      box-sizing: border-box;\n      display: inline-block;\n      flex: 1 1 auto;\n      background: #e0e0e0;\n      height: 1.5em;\n      margin: 0;\n      padding: 0;\n      width: auto;\n      min-width: 100px;\n      border-radius: 2px;\n\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n   }\n\n   .range-slider {\n      position: relative;\n      display: inline-block;\n      background: #606060;\n      border-radius: 2px;\n\n      margin: 0;\n      padding: 0;\n      height: 100%;\n      cursor:default;\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n   }\n\n   .range-slider-container span {\n      display: inline-block;\n      position: absolute;\n      right: 0;\n      top: 0;\n      font-size: 0.85em;\n      padding: 1px 5px;\n      color: #606060;\n      mix-blend-mode: difference;\n      line-height: 1.6em;\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n   }\n\n   input {\n      display: none;\n      width: 100%;\n   }\n</style>\n\n","<script>\n   import { fade } from 'svelte/transition';\n   import AppControl from \"./AppControl.svelte\";\n\n   export let id;\n   export let label;\n   export let options;\n   export let value = options[0];\n   export let disable = false;\n   export let hidden = false;\n</script>\n\n<AppControl {id} {label} {disable} {hidden} >\n\n   <div class=\"selector\">\n      {#each options as option (option)}\n      <div on:click={() => value = option} on:keydown={() => value = option} class=\"option\" class:selected={option==value}>{option}</div>\n      {/each}\n\n   </div>\n   <input name=\"{id}\" bind:value=\"{value}\">\n</AppControl>\n\n<style>\n   input {\n      display: none;\n   }\n\n   .selector {\n      position: relative;\n      box-sizing: border-box;\n      display: inline-block;\n      flex: 0 0 auto;\n      background: #e0e0e0;\n\n      font-size: 1em;\n      height: 1.5em;\n      line-height: 1.5em;\n      margin: 0;\n      padding: 0;\n      width: auto;\n      border-radius: 2px;\n\n      user-select: none;\n      -webkit-user-select: none;\n      -moz-user-select: none;\n\n      display: flex;\n   }\n\n   .option {\n      cursor: default;\n      padding: 0 0.5em;\n      margin: 0 1px;\n      color: #606060;\n      transition: background-color 0.5s ease;\n   }\n\n   .option.selected {\n      border-radius: 3px;\n      background-color: #606060;\n      color: #fefefe;\n   }\n\n</style>","/*************************************************/\n/*    Methods for computing statistics           */\n/*************************************************/\n\nimport { isnumber, isindex, isvector, vector, Vector, _sort } from '../arrays/index.js';\n\n\n/**\n * Compute median of vector values.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {number} median of x.\n *\n */\nexport function median(x) {\n   return quantile(x, 0.5)\n}\n\n/**\n * Compute inter-quartile range for vector of values.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {number} IQR of x (Q3 - Q1).\n *\n */\nexport function iqr(x) {\n   return quantile(x, 0.75) - quantile(x, 0.25);\n}\n\n\n/**\n * Computes a p-th quantile/quantiles for a numeric vector.\n *\n * @param {Vector} x - vector with values.\n * @param {number|Array|Vector} p - probability (one value or a vector).\n *\n * @returns {number|Vector} quantile value or a vector with quantiles.\n */\nexport function quantile(x, p) {\n\n   if (isvector(x)) {\n      return quantile(x.v, p);\n   }\n\n   if (isvector(p)) {\n      return quantile(x, p.v);\n   }\n\n   const n = x.length;\n\n   if (!Array.isArray(p)) p = [p];\n\n   if (!isnumber(p[0]) || min(p) < 0 || max(p) > 1) {\n      throw new Error(\"Parameter 'p' must be between 0 and 1 (both included).\");\n   }\n\n   function q(x, p) {\n      const h = (n - 1) * p + 1;\n      const n1 = Math.floor(h);\n      const n2 = Math.ceil(h);\n      return x[n1 - 1] + (x[n2 - 1] - x[n1 - 1]) * (h - Math.floor(h));\n   }\n\n   const xs = _sort(x);\n   const out =  p.map(v => q(xs, v));\n   return p.length == 1 ? out[0] : vector(out);\n}\n\n\n/**\n * Counts how many values from a vector falls into provided intervals (bins).\n *\n * @param {Array|Vector} x - vector with values.\n * @param {Array|Vector} bins - vector with bins boundaries.\n *\n * @returns {Vector} vector with counts for each bean.\n *\n */\nexport function count(x, bins) {\n\n   if (isvector(x)) {\n      return count(x.v, isvector(bins) ? bins.v : bins);\n   }\n\n   const n = bins.length;\n\n   // add a bit extra to right side of the last bin\n   bins[n - 1] = bins[n - 1] * 1.0001\n\n   // count\n   let counts = new Vector.valuesConstructor(n - 1);\n   for (let i = 0; i < x.length; i++) {\n      for (let j = 0; j < n - 1; j++) {\n         if (x[i] >= bins[j] && x[i] < bins[j + 1]) counts[j] += 1;\n      }\n   }\n\n   return new Vector(counts);\n}\n\n\n/**\n * Computes middle points between values of a vector.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {Vector} vector with middle points.\n *\n */\nexport function mids(x) {\n\n   if (isvector(x)) {\n      return mids(x.v);\n   }\n\n   const out = new Vector.valuesConstructor(x.length - 1);\n   for (let i = 0; i < out.length; i++) {\n      out[i] = 0.5 * (x[i] + x[i + 1]);\n   }\n\n   return new Vector(out);\n}\n\n\n/**\n * Splits range of vector values into equal intervals.\n *\n * @param {Array|Vector} x - vector with values.\n * @param {number} n - number of intervals.\n *\n * @returns {Vector} vector with boundaries of the intervals.\n *\n */\nexport function split(x, n) {\n\n   if (isvector(x)) {\n      split(x.v, n);\n   }\n\n   const rn = range(x);\n\n   if (rn[0] === rn[1]) {\n      throw new Error('split: values in a vector \"x\" should vary.');\n   }\n\n   const by = (rn[1] - rn[0]) / n;\n   return Vector.seq(rn[0], rn[1], by);\n}\n\n\n/**\n * Computes difference between all adjacent values in a vector.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {Vector} vector with the differences.\n *\n */\nexport function diff(x) {\n\n   if (isvector(x)) {\n      return diff(x.v);\n   }\n\n   const out = new Vector.valuesConstructor(x.length - 1);\n   for (let i = 0; i < x.length - 1; i++) {\n      out[i] = x[i + 1] - x[i];\n   }\n\n   return new Vector(out);\n}\n\n\n/**\n * Generate probability points for QQ plot.\n *\n * @param {number} n - number of points.\n *\n * @returns {Vector} a sequence of probabilities between 0 and 1.\n *\n */\nexport function ppoints(n) {\n\n   const a = n < 10 ? 3.0/8.0 : 0.5;\n   const out = new Vector.valuesConstructor(n);\n\n   for (let i = 0; i < n; i++) {\n      out[i] = (i + 1 - a) / (n + (1 - a) - a);\n   }\n\n   return new Vector(out);\n}\n\n\n/**\n * Computes cumulative sums for the vector values.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {Vectors} vector with cumulative sums.\n *\n */\nexport function cumsum(x) {\n\n   if (isvector(x)) {\n      return cumsum(x.v);\n   }\n\n   let s = 0;\n   let out = new Vector.valuesConstructor(x.length);\n   for (let i = 0; i < x.length; i++) {\n      s += x[i];\n      out[i] = s\n   }\n\n   return new Vector(out);\n}\n\n\n/**\n * Computes kurtosis of values.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {number} kurtosis of x.\n *\n */\nexport function kurtosis(x) {\n\n   if (isvector(x)) {\n      return kurtosis(x.v);\n   }\n\n   let n = x.length;\n   let m = mean(x);\n\n   let m4 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m4 = m4 + Math.pow((x[i] - m), 4);\n   }\n\n   return (m4/n) / Math.pow((m2/n), 2);\n}\n\n\n/**\n * Computes skewness of values.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {number} skewness of x.\n *\n */\nexport function skewness(x) {\n\n   if (isvector(x)) {\n      return skewness(x.v);\n   }\n\n   let n = x.length;\n   let m = mean(x);\n\n   let m3 = 0.0;\n   let m2 = 0.0;\n   for (let i = 0; i < n; i++) {\n      m2 = m2 + Math.pow((x[i] - m), 2);\n      m3 = m3 + Math.pow((x[i] - m), 3);\n   }\n\n   return (m3/n) / Math.pow((m2/n), 1.5);\n}\n\n\n/**\n * Computes correlation between two vectors.\n *\n * @param {Array|Vector} x - vector with values.\n * @param {Array|Vector} y - vector with values.\n * @param {string} method - which method to use (\"pearson\" or \"spearman\").\n *\n * @returns {number} correlation between x and y.\n *\n */\nexport function cor(x, y, method = \"pearson\") {\n\n   if (isvector(x)) {\n      return cor(x.v, y.v, method);\n   }\n\n   if (method === \"spearman\") {\n      return cor(rank(x), rank(y));\n   }\n\n   return cov(x, y) / (sd(x) * sd(y));\n}\n\n\n/**\n * Computes covariance between two vectors.\n *\n * @param {Array|Vector} x - vector with values.\n * @param {Array|Vector} y - vector with values.\n * @param {boolean} [biased=false] - compute a biased version with n degrees of freedom or not (with n - 1).\n * @param {number} [mx=undefined] - mean of x values (if already known).\n * @param {number} [my=undefined] - mean of y values (if already known).\n *\n * @returns {number} covariance between x and y.\n *\n */\nexport function cov(x, y, biased = false, mx = undefined, my = undefined) {\n\n   if (isvector(x)) {\n      return cov(x.v, y.v, biased, mx, my);\n   }\n\n   const n = x.length;\n\n   if (y.length !== n) {\n      throw Error(\"Vectors 'x' and 'y' must have the same length.\");\n   }\n\n   if (n < 2) {\n      throw Error(\"Vectors 'x' and 'y' must have at least two values.\");\n   }\n\n   if (mx === undefined) mx = mean(x);\n   if (my === undefined) my = mean(y);\n\n   let s = 0;\n   for (let i = 0; i < n; i++) {\n      s = s + (x[i] - mx) * (y[i] - my);\n   }\n\n   return s / (biased ? n : n - 1);\n}\n\n\n/**\n * Returns ranks of values in a vector (ranks start from 1, not 0).\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {Vector} vector with ranks.\n *\n */\nexport function rank(x) {\n\n   if (isvector(x)) {\n      return rank(x.v);\n   }\n\n   const y = [...x].sort((a, b) => a - b);\n\n   return new Vector(x.map(v => y.indexOf(v) + 1));\n}\n\n\n/**\n * Compute marginal range of values as [min, max]\n *\n * @param {Array|Vector} x - vector with values.\n * @param {number} m - margin as per cent of range (value between 0 and 1).\n *\n * @return {Array} array with two values, min and max.\n *\n */\nexport function mrange(x, m) {\n\n   if (isvector(x)) {\n      return mrange(x.v, m);\n   }\n\n   if (m === undefined) m = 0.10;\n   const r = range(x);\n   const d = (r[1] - r[0]) * m;\n\n   return [r[0] - d, r[1] + d];\n}\n\n\n/**\n * Compute range of values as [min, max].\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @return {Array} array with two values, min and max.\n *\n */\nexport function range(x) {\n\n   if (isvector(x)) {\n      return range(x.v);\n   }\n\n   let min = x[0];\n   let max = x[0];\n\n   for (let i = 1; i < x.length; i++) {\n      if (x[i] < min) min = x[i];\n      if (x[i] > max) max = x[i];\n   }\n\n   return [min, max];\n}\n\n\n/**\n * Compute norm2 of a vector (Euclidean distance).\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {number} norm value.\n *\n */\nexport function norm2(x) {\n\n   if (isvector(x)) {\n      return norm2(x.v);\n   }\n\n   return Math.sqrt(ssq(x));\n}\n\n\n/**\n * Compute sum of squared vector values\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {number} sum of squared values of x.\n *\n */\nexport function ssq(x) {\n\n   if (isvector(x)) {\n      return ssq(x.v);\n   }\n\n   let ssqv = 0;\n   const n = x.length;\n   for (let i = 0; i < n; i++) {\n      const v = x[i]\n      ssqv += v * v;\n   }\n\n   return ssqv;\n}\n\n\n/**\n * Compute standard deviation of vector values.\n *\n * @param {Array|Vector} x - vector with values.\n * @param {boolean} [biased=false] - compute a biased value (n degrees of freedom) or unbiased (n - 1 degrees of freedom)\n *\n * @returns {number} standard deviation of x.\n *\n */\nexport function sd(x, biased) {\n\n   if (isvector(x)) {\n      return sd(x.v, biased);\n   }\n\n   return Math.sqrt(variance(x, biased));\n}\n\n\n/**\n * Compute variance of vector values.\n *\n * @param {Array|Vector} x - vector with values.\n * @param {boolean} [biased=false] - compute a biased variance (n degrees of freedom) or unbiased (n - 1 degrees of freedom)\n *\n * @returns {number} variance of x.\n *\n */\nexport function variance(x, biased) {\n\n   if (biased === undefined) {\n      biased = false;\n   }\n\n   if (isvector(x)) {\n      return variance(x.v);\n   }\n\n   const m = mean(x);\n   let s = 0;\n   for (let i = 0; i < x.length; i++) {\n      const d = (x[i] - m);\n      s = s + d * d ;\n   }\n\n   return s / (biased ? x.length : (x.length - 1));\n}\n\n\n/**\n * Compute average of vector values.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {number} mean of x.\n *\n */\nexport function mean(x) {\n\n   if (isvector(x)) {\n      return mean(x.v);\n   }\n\n   return sum(x) / x.length;\n}\n\n\n/**\n * Compute sum of all values in a vector.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {number} sum of x.\n *\n */\nexport function sum(x) {\n\n   if (isvector(x)) {\n      return sum(x.v);\n   }\n\n   let s = 0;\n   for (let i = 0; i < x.length; i++) {\n      s = s + x[i];\n   }\n\n   return s;\n}\n\n\n/**\n * Compute product of all values in a vector.\n *\n * @param {Array|Vector} x - vector with values.\n *\n * @returns {number} product of x.\n *\n */\nexport function prod(x) {\n\n   if (isvector(x)) {\n      return prod(x.v);\n   }\n\n   let p = 1;\n   for (let i = 0; i < x.length; i++) {\n      p = p * x[i];\n   }\n\n   return p;\n}\n\n\n/**\n * Find the smallest element in a vector.\n *\n * @param {Array|Vector|Index} x - vector or index with values.\n *\n * @returns {number} the smallest value.\n *\n */\nexport function min(x) {\n\n   if (isvector(x) || isindex(x)) {\n      return x.v[minind(x.v) - 1];\n   }\n\n   return x[minind(x) - 1];\n}\n\n\n/**\n * Find index of the smallest element in a vector.\n *\n * @param {Array|Vector|Index} x - vector or index with values.\n *\n * @returns {number} index of the smallest value (starting from 1).\n *\n */\nexport function minind(x) {\n\n   if (isvector(x) || isindex(x)) {\n      return minind(x.v);\n   }\n\n   let outind = 1;\n   let out = x[0]\n   for (let i = 2; i <= x.length; i++) {\n      if (x[i - 1] < out) {\n         outind = i;\n         out = x[i - 1];\n      }\n   }\n\n   return outind;\n}\n\n\n/**\n * Find the largest element in a vector.\n *\n * @param {Array|Vector|Index} x - vector or index with values.\n *\n * @returns {number} the largest value.\n *\n */\nexport function max(x) {\n\n   if (isvector(x) || isindex(x)) {\n      return x.v[maxind(x.v) - 1];\n   }\n\n   return x[maxind(x) - 1];\n}\n\n\n/**\n * Find index of the largest element in a vector.\n *\n * @param {Array|Vector|Index} x - vector or index with values.\n *\n * @returns {number} index of the largest value (starting from 1).\n *\n */\nexport function maxind(x) {\n\n   if (isvector(x) || isindex(x)) {\n      return maxind(x.v);\n   }\n\n   let outind = 1;\n   let out = x[0]\n   for (let i = 2; i <= x.length; i++) {\n      if (x[i - 1] > out) {\n         outind = i;\n         out = x[i - 1];\n      }\n   }\n\n   return outind;\n}\n\n\n","/* =================================================================== */\n/*    Methods for statistical distributions                            */\n/* =================================================================== */\n\nimport { range } from '../stat/index.js';\nimport { isvector, vector, Vector } from '../arrays/index.js';\nimport { closestind, integrate } from '../misc/index.js';\n\n// threshold to switch between two approximation for chi-square distribution\nconst CHISQ_DOF_THRESHOLD = 30;\n// tolerance for chi-square distribution search\nconst CHISQ_TOL = 0.0000001;\n\n/**\n * Generates 'n' random numbers from a uniform distribution.\n *\n * @param {number} n - amount of numbers to generate.\n * @param {number} [a=0] - smallest value (min) of the population.\n * @param {number} [b=1] - largest value (max) of the population.\n *\n * @returns {Vector} vector with generated random numbers.\n *\n */\nexport function runif(n, a = 0, b = 1) {\n   let out = Vector.zeros(n);\n   for (let i = 0; i < n; i++) {\n      out.v[i] = (a + Math.random() * (b - a));\n   }\n   return out;\n}\n\n\n/**\n * Cumulative distribution function for uniform distribution.\n *\n * @param {number|Vector} x - vector of values or a single value.\n * @param {number} [a=0] - smallest value (min) of the population.\n * @param {number} [b=1] - largest value (max) of the population.\n *\n * @returns {number|Vector} computed probabilities.\n *\n */\nexport function punif(x, a = 0, b = 1) {\n\n   if (isvector(x)) {\n      return x.apply(v => punif(v, a, b));\n   }\n\n   return x < a ? 0 : (x > b ? 1 : (x - a) / (b - a));\n}\n\n\n/**\n * Probability density function for uniform distribution.\n *\n * @param {number|Vector} x - vector of values or a single value.\n * @param {number} [a=0] - smallest value (min) of the population.\n * @param {number} [b=1] - largest value (max) of the population.\n *\n * @returns {number|Vector} computed densities.\n *\n */\nexport function dunif(x, a = 0, b = 1) {\n\n   if (isvector(x)) {\n      return x.apply(v => dunif(v, a, b));\n   }\n\n   return x < a || x > b ? 0 : 1 / (b - a);\n}\n\n\n /**\n * Generates 'n' random numbers from a normal distribution.\n *\n * @param {number} n - amount of numbers to generate.\n * @param {number} [mu=0] - average value of the population.\n * @param {number} [sigma=1] - standard deviation of the population.\n *\n * @returns {Vector} vector with generated random numbers.\n */\nexport function rnorm(n, mu = 0, sigma = 1) {\n\n   let out = Vector.zeros(n);\n   for (let i = 0; i < n; i ++) {\n      const a = Math.sqrt(-2 * Math.log(Math.random()));\n      const b = 2 * Math.PI * Math.random();\n      out.v[i] = (a * Math.sin(b) * sigma + mu);\n   }\n\n   return out;\n}\n\n\n/**\n * Probability density function for normal distribution.\n *\n * @param {number|Vector} x - vector of values of a single value.\n * @param {number} [mu=0] - average value of the population.\n * @param {number} [sigma=1] - standard deviation of the population.\n *\n * @returns {number|Vector} computed densities.\n *\n */\nexport function dnorm(x, mu = 0, sigma = 1) {\n\n   if (isvector(x)) {\n      return x.apply(v => dnorm(v, mu, sigma));\n   }\n\n   const z = (x - mu) / sigma;\n   return Math.exp(-0.5 * z * z) / (Math.sqrt(2 * Math.PI) * sigma);\n}\n\n\n/**\n * Cumulative distribution function for normal distribution.\n *\n * @param {number|Vector} x - vector of values or a single value.\n * @param {number} [mu=0] - average value of the population.\n * @param {number} [sigma=1] - standard deviation of the population.\n *\n * @returns {number|Vector} computed probabilities.\n *\n */\nexport function pnorm(x, mu = 0, sigma = 1) {\n\n   if (isvector(x)) {\n      return x.apply(v => pnorm(v, mu, sigma));\n   }\n\n   const frac = 1 / (Math.sqrt(2) * sigma);\n   return  0.5 * (1 + erf((x - mu) * frac));\n}\n\n\n/**\n * Inverse cumulative distribution function for normal distribution.\n *\n * @param {number|Vector} p - vector of probabilities or a single probability value.\n * @param {number} [mu=0] - average value of the population.\n * @param {number} [sigma=1] - standard deviation of the population.\n *\n * @returns {number|Vector} computed quantiles.\n *\n */\nexport function qnorm(p, mu = 0, sigma = 1) {\n\n   if (isvector(p)) {\n      return p.apply(v => qnorm(v, mu, sigma));\n   }\n\n   if (mu !== 0 || sigma !== 1) {\n      return qnorm(p) * sigma + mu;\n   }\n\n   if (p < 0 || p > 1) {\n      throw Error('Parameter \"p\" must be between 0 and 1.');\n   }\n\n   if (p < 0.0000000001) return -Infinity;\n   if (p > 0.9999999999) return +Infinity;\n\n   const SP1 = 0.425;\n   const SP2 = 5.0;\n   const C1 = 0.180625;\n   const C2 = 1.6;\n\n   const a0 = 3.3871327179;\n   const a1 = 5.0434271938 * 10;\n   const a2 = 1.5929113202 * 100;\n   const a3 = 5.9109374720 * 10;\n   const b1 = 1.7895169469 * 10;\n   const b2 = 7.8757757664 * 10;\n   const b3 = 6.7187563600 * 10;\n\n   const c0 = 1.4234372777;\n   const c1 = 2.7568153900;\n   const c2 = 1.3067284816;\n   const c3 = 1.7023821103 * 0.1;\n   const d1 = 7.3700164250 * 0.1;\n   const d2 = 1.2021132975 * 0.1;\n\n   const e0 = 6.6579051150;\n   const e1 = 3.0812263860;\n   const e2 = 4.2868294337 * 0.1;\n   const e3 = 1.7337203997 * 0.01;\n   const f1 = 2.4197894225 * 0.1;\n   const f2 = 1.2258202635 * 0.01;\n\n   const q = p - 0.5;\n   let r;\n\n   if (Math.abs(q) <= SP1) {\n      r = C1 - q * q;\n      return q * (((a3 * r + a2) * r + a1) *r + a0) / (((b3 * r + b2) * r + b1) * r + 1.0);\n   }\n\n   r = q < 0 ? p : 1 - p;\n   r = Math.sqrt(-Math.log(r));\n   let res;\n\n   if (r <= SP2) {\n      r = r - C2;\n      res = (((c3 * r + c2) * r + c1) * r + c0) / ((d2 * r + d1) * r + 1.0);\n   } else {\n      r = r - SP2;\n      res = (((e3 * r + e2) * r + e1) + e0) / ((f2 * r + f1) * r + 1.0);\n   }\n\n   return q < 0 ? -res : res;\n}\n\n\n/**\n * Probability density function for Student's t-distribution.\n *\n * @param {number|Vector} t - t-value or a vector of t-values.\n * @param {number} dof - degrees of freedom.\n *\n * @returns {number|Vector} computed densities.\n *\n */\nexport function dt(t, dof) {\n\n   if (dof < 0) {\n      throw new Error('Parameter \"dof\" should be a positive number.');\n   }\n\n   if (isvector(t)) {\n      return t.apply(v => dt(v, dof));\n   }\n\n   const pow = -0.5 * (dof + 1);\n   const A = 1 / (Math.sqrt(dof) * beta(0.5, dof/2));\n\n   return (A * Math.pow((1 + t * t / dof), pow));\n}\n\n\n/**\n * Cumulative distribution function for Student's t-distribution.\n *\n * @param {number|Vector} t - t-value or a vector of t-values.\n * @param {number} dof - degrees of freedom.\n *\n * @returns {number|Vector} computed probabilities.\n *\n */\nexport function pt(t, dof) {\n\n   if (dof === undefined || dof === null || dof < 1) {\n      throw Error('Parameter \"dof\" (degrees of freedom) must be an integer number >= 1.');\n   }\n\n   if (isvector(t)) {\n      return t.apply(v => pt(v, dof));\n   }\n\n   // since distribution in symmetric we can use only left tail\n   if (t === 0) return 0.5;\n   if (t === -Infinity) return 0;\n   if (t === Infinity) return 1;\n   if (t > 0) return (1 - pt(-t, dof));\n\n   return integrate((x) => dt(x, dof), -Infinity, t);\n}\n\n\n/**\n * Inverse cumulative distribution (quantile) function for Student's t-distribution.\n *\n * @param {number|Vector} p - probability or vector with probabilities.\n * @param {number} dof - degrees of freedom.\n *\n * @returns {number|Vector} computed quantiles.\n *\n */\nexport function qt(p, dof) {\n\n   if (dof === undefined || dof === null || dof < 1) {\n      throw Error('Parameter \"dof\" (degrees of freedom) must be an integer number >= 1.');\n   }\n\n   if (p < 0 || p > 1) {\n      throw Error('Parameter \"p\" must be between 0 and 1.');\n   }\n\n   if (isvector(p)) {\n      return p.apply(v => qt(v, dof));\n   }\n\n   if (p < 0.0000000001) return -Infinity;\n   if (p > 0.9999999999) return +Infinity;\n\n\n   // simple cases — exact solutions\n   if (dof === 1) {\n      return Math.tan(Math.PI * (p - 0.5));\n   }\n\n   if (dof === 2) {\n      return 2 * (p - 0.5) * Math.sqrt(2 / (4 * p * (1 - p)));\n   }\n\n   // approximation\n\n   let sign = -1;\n   if (p >= 0.5){\n      sign = +1 ;\n      p = 2 * (1 - p);\n   } else {\n      sign = -1;\n      p = 2 * p;\n   }\n\n   const a = 1.0 / (dof - 0.5);\n   const b = 48.0 / (a ** 2);\n   let c = ((20700 * a / b - 98) * a - 16) * a + 96.36;\n   const d = ((94.5 / (b + c) - 3.0)/b + 1.0) * Math.sqrt(a * Math.PI / 2) * dof;\n\n   let x = d * p;\n   let y = x ** (2.0/dof);\n\n   if (y > 0.05 + a) {\n\n      // asymptotic inverse expansion about normal\n      x = qnorm(p * 0.5);\n      y = x * x;\n\n      if (dof < 5) {\n         c = c + 0.3 * (dof - 4.5) * (x + 0.6);\n      }\n\n      c = (((0.05 * d * x - 5.0) * x - 7.0) * x - 2.0) * x + b + c;\n      y = (((((0.4 * y + 6.3) * y + 36.0) * y + 94.5) / c - y - 3.0)/b + 1.0) * x;\n      y = a * (y ** 2);\n      y = y > 0.002 ? Math.exp(y) - 1.0 : 0.5 * (y ** 2) + y;\n   } else {\n      y = ((1.0 / (((dof + 6.0)/(dof * y) - 0.089 * d - 0.822) * (dof + 2.0) * 3.0) + 0.5/(dof + 4.0)) * y - 1.0) *\n         (dof + 1.0)/(dof + 2.0) + 1.0/y;\n   }\n\n   return sign * Math.sqrt(dof * y);\n}\n\n\n/**\n * Probability density function for F-distribution.\n *\n * @param {number|Vector} F - F-value or a vector of t-values\n * @param {number} d1 - degrees of freedom.\n * @param {number} d2 - degrees of freedom.\n *\n * @returns {number|Vector} computed densities.\n *\n */\nexport function df(F, d1, d2) {\n\n   if (F < 0 || d1 < 0 || d2 < 0) {\n      throw new Error('All 3 parameters must be positive.');\n   }\n\n   if (d2 <= d1) {\n      throw new Error('Parameter \"d1\" must be larger \"d2\".');\n   }\n\n   if (isvector(F)) {\n      return F.apply(v => df(v, d1, d2));\n   }\n\n   return Math.sqrt( ( Math.pow(d1 * F, d1) * Math.pow(d2, d2)) / Math.pow(d1 * F + d2, d1 + d2)) / (F * beta(d1/2, d2/2))\n}\n\n\n/**\n * Cumulative distribution function for F-distribution.\n *\n * @param {number|Vector} F - F-value or a vector of t-values.\n * @param {number} d1 - degrees of freedom.\n * @param {number} d2 - degrees of freedom.\n *\n * @returns {number|Vector} computed probabilities.\n *\n */\nexport function pf(F, d1, d2) {\n\n   if (F < 0 || d1 < 0 || d2 < 0) {\n      throw new Error('All 3 parameters must be positive.');\n   }\n\n   if (isvector(F)) {\n      return F.apply(v => pf(v, d1, d2));\n   }\n\n   return ibeta(d1 * F / (d1 * F + d2), d1/2, d2/2)\n}\n\n\n/**\n * Cumulative distribution function for chi-square distribution.\n *\n * @param {number|Vector|Array} x - chi-square value.\n * @param {number} dof - degrees of freedom.\n *\n * @description if DoF is relatively small (< 30) the method computes probabilities via\n * approximation of lower incomplete gamma function, `igamma()`, and gamma function, `gamma()`.\n * If the DoF is larger than 30 it uses the a modified power series approximation\n * (doi:10.1016/j.csda.2004.04.001) and normal distribution.\n *\n * @returns {number|Vector} computed probabilities.\n *\n */\nexport function pchisq(x, dof) {\n\n   if (Array.isArray(x)) {\n      return pchisq(vector(x), dof);\n   }\n\n   const mu = 5/6 - 1 / (9 * dof) - 7 / (648 * dof * dof) + 25 / (2187 * dof * dof * dof);\n   const sigma2 = 1 / (18 * dof) + 1 / (162 * dof * dof) - 37 / (1164 * dof * dof * dof);\n   const sigma = Math.sqrt(sigma2);\n\n   // works well for large dof\n   function F2(x) {\n      if (x === 0) return 0;\n      if (dof === 0) return 1;\n      if (dof > 100 && x > dof * 2) return 1;\n      if (dof > 50 && x > dof * 3) return 1;\n      if (dof > 10 && x > dof * 5) return 1;\n      if (dof > 5 && x > dof * 8) return 1;\n      if (x > dof * 30) return 1;\n      const l0 = x / dof;\n      const l = Math.pow(l0, 1/6) - 0.5 * Math.pow(l0, 1/3) + (1/3) * Math.pow(l0, 1/2);\n      return pnorm(l, mu, sigma);\n   }\n\n   // works well for small dof\n   function F1(x) {\n      if (x === 0) return 0;\n      if (dof === 0) return 1;\n      if (dof > 100 && x > dof * 2) return 1;\n      if (dof > 50 && x > dof * 3) return 1;\n      if (dof > 10 && x > dof * 5) return 1;\n      if (dof > 5 && x > dof * 8) return 1;\n      if (x > dof * 30) return 1;\n      return igamma(x/2, dof/2) / gamma(dof/2)\n   }\n\n   const F = dof > CHISQ_DOF_THRESHOLD ? F2 : F1;\n   return isvector(x) ? x.apply(F) : F(x)\n}\n\n\n/**\n * Inverse cumulative distribution (quantile) function for chi-square distribution.\n *\n * @param {number|Vector|Array} p - probability or vector/array with probabilities.\n * @param {number} dof - degrees of freedom.\n *\n * @description if DoF is relatively small (< 30) the method computes quantiles by sequential\n * improving, splitting possible quantile range into intervals, computing probabilities for each\n * element of the interval using `pchisq()`, then find the quantile which has the closest\n * probability value, make a new split around it and so on until the probability of the\n * currently selected quintile is close to the desired one. For large DoF (>30) the it uses\n * the a modified power series approximation (doi:10.1016/j.csda.2004.04.001) and\n * normal distribution.\n *\n * @returns {number|Vector} computed quantiles.\n *\n */\nexport function qchisq(p, dof) {\n\n   if (Array.isArray(p)) {\n      return qchisq(vector(p), dof);\n   }\n\n   // compute parameters of normal distribution for power approximation\n   const mu = 5/6 - 1 / (9 * dof) - 7 / (648 * dof * dof) + 25 / (2187 * dof * dof * dof);\n   const sigma2 = 1 / (18 * dof) + 1 / (162 * dof * dof) - 37 / (1164 * dof * dof * dof);\n   const sigma = Math.sqrt(sigma2);\n\n   // compute quantile for one probability value using power approximations\n   // and inverse solution\n   function F2(x) {\n      if (x === 0) return 0;\n      if (x === 0) return Inf;\n      if (dof === 0) return 0;\n      const l = qnorm(x, mu, sigma);\n      const o = Math.pow(Math.sqrt(36 * l * l - 30 * l + 13)/4 + (3 * l - 3/2)/2 + 1/8, 1/3);\n      return Math.pow(o - 3 / (4 * o) + 0.5, 6) * dof;\n   }\n\n   // compute quantile using sequential splits of quantile range\n   function F1(x) {\n      if (x === 0) return 0;\n      if (x === 0) return Inf;\n      if (dof === 0) return 0;\n\n      // initial split (start, end, and delta)\n      let qs = 0;\n      let qe = CHISQ_DOF_THRESHOLD * 10;\n      let qd = qe / 30;\n\n      // loop for sequential splits\n      for (let i = 0; i < 30; i++) {\n\n         // compute vector of quantiles and corresponding probabilities\n         const q = Vector.seq(qs, qe, qd);\n         const p = pchisq(q, dof);\n\n         // find index of quantile which has probability closest to x\n         const ind = closestind(p, x) - 1;\n\n         // if the probability is close enough to the desired one return the quantile\n         if (Math.abs(p.v[ind] - x) < CHISQ_TOL) return q.v[ind];\n\n         // if not make a new split by taking left and right neighbors quantiles\n         qs = ind == 0 ? q.v[0] : q.v[ind - 1];\n         qe = ind == q.v.length - 1? q.v[ind] : q.v[ind + 1];\n\n         // if the boundaries are the same stop\n         if (qs == qe) return qs;\n\n         // compute delta for new boundaries\n         qd = (qe - qs) / 30;\n      }\n\n      // if the loop did not converge we simply return the middle quantile\n      return (qe + qs) / 2;\n   }\n\n   const F = dof > CHISQ_DOF_THRESHOLD ? F2 : F1;\n   return isvector(p) ? p.apply(F) : F(p)\n}\n\n\n/**\n * Incomplete Betta function (approximation via numeric integration).\n *\n * @param {number} x - first argument.\n * @param {number} a - second argument.\n * @param {number} b - third argument.\n *\n * @returns {number} value of the function.\n *\n */\nexport function ibeta(x, a, b) {\n\n   if (x === 0) return 0;\n   if (x === 1) return 1;\n   if (b === 1) return x ** a;\n   if (a === 1) return (1 - (1 - x)**b);\n\n   return integrate((t) => t ** (a - 1) * (1 - t) ** (b - 1), 0, x) / beta(a, b);\n}\n\n\n/**\n * Gamma function (approximation).\n *\n * @param {number|Vector} z - argument (one value or a vector).\n *\n * @returns {number} value of the Gamma function.\n *\n */\nexport function gamma(z) {\n\n   if (isvector(z)) {\n      return z.apply(gamma);\n   }\n\n   if (z <= 0) {\n      throw new Error('gamma: the function only works with arguments > 0.');\n   }\n\n   // coefficients\n   const p = [\n        676.5203681218851,\n      -1259.1392167224028,\n        771.32342877765313,\n       -176.61502916214059,\n         12.507343278686905,\n         -0.13857109526572012,\n          9.9843695780195716e-6,\n          1.5056327351493116e-7\n    ];\n\n   if (z < 0.5) {\n      return Math.PI / (Math.sin(Math.PI * z) + gamma(1 - z));\n   }\n\n   z = z - 1;\n   let x = 0.99999999999980993;\n\n   for (let i = 0; i < p.length; i++) {\n      x = x + p[i] / (z + i + 1);\n   }\n\n   const t = z + p.length - 0.5;\n   return Math.sqrt(2 * Math.PI) * Math.pow(t, z + 0.5) * Math.exp(-t) * x;\n}\n\n\n\n/**\n * Lower incomplete gamma function (approximation)\n *\n * @param {number} x - first argument (one value).\n * @param {number} a - second argument (one value).\n *\n * @returns {number} value of the lower incomplete gamma function.\n *\n */\nexport function igamma(x, a) {\n\n   const epsilon = 1e-18; // Desired accuracy\n   const maxIterations = 10000; // Maximum number of iterations\n\n   let sum = 0;\n\n   for (let k = 0; k < maxIterations; k++) {\n      const s = Math.pow(x, k) / gamma(a + k + 1);\n      if (isNaN(s) || s < epsilon) break;\n      sum += s\n   }\n\n   return Math.pow(x, a) * gamma(a) * Math.exp(-x) * sum;\n}\n\n\n\n/**\n * Beta function (approximation).\n *\n * @param {number} x - first argument (one value).\n * @param {number} y - second argument (one value).\n *\n * @returns {number} value of the Beta function.\n *\n */\nexport function beta(x, y) {\n\n   if (y > 100) {\n      // for large y we use slower integrate version\n      return integrate((u) => Math.pow(u, x - 1) / Math.pow(1 + u, x + y), 0, Infinity)\n   }\n\n   return gamma(x) * gamma(y) / gamma(x + y);\n}\n\n\n/**\n * Error function for normal distribution.\n *\n * @param {number} x - a number.\n *\n * @returns {number} value for erf.\n *\n */\nexport function erf(x) {\n\n  const sign = (x >= 0) ? 1 : -1;\n  x = Math.abs(x);\n\n  // constants\n  const a1 =  0.254829592;\n  const a2 = -0.284496736;\n  const a3 =  1.421413741;\n  const a4 = -1.453152027;\n  const a5 =  1.061405429;\n  const p  =  0.3275911;\n\n  // approximation\n  const t = 1.0 / (1.0 + p * x);\n  const y = 1.0 - (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t * Math.exp(-x * x);\n\n  return sign * y;\n}\n\n\n","/* =================================================================== */\n/*    Methods for Arrays (vectors, matrices, indices and factors, )    */\n/* =================================================================== */\n\nimport { min, max, prod } from '../stat/index.js';\nimport { rnorm, runif } from '../distributions/index.js';\nimport { qr } from '../decomp/index.js';\n\nexport function isnumber(x) {\n   return typeof(x) === 'number';\n}\n\n\n/**************************************************/\n/*    Non-class methods for Vectors and Matrix    */\n/**************************************************/\n\n/**\n * Compute XY' product of two matrices.\n *\n * @param {Matrix} X - a matrix.\n * @param {Matrix} Y - a matrix.\n *\n * @returns {Matrix} result of the product.\n *\n */\nexport function tcrossprod(X, Y) {\n\n   if (Y === undefined) {\n      Y = X;\n   }\n\n   const nrx = X.nrows;\n   const ncx = X.ncols;\n\n   const nry = Y.nrows;\n   const ncy = Y.ncols;\n\n   // create vector for the product\n   const nrows = nrx;\n   const ncols = nry;\n   const ninner = ncx;\n   const out = new Float64Array(nrows * ncols);\n\n   for (let i = 0; i < ninner; i++) {\n      const xr = X.v.subarray(i * nrx, (i + 1) * nrx);\n      const yc = Y.v.subarray(i * nry, (i + 1) * nry);\n\n      for (let c = 0; c < ncols; c++) {\n         const outc = out.subarray(c * nrows, (c + 1) * nrows);\n         for (let r = 0; r < nrows; r++) {\n            outc[r] += xr[r] * yc[c];\n         }\n      }\n   }\n\n   return new Matrix(out, nrows, ncols);\n\n}\n\n\n/**\n * Compute X'Y product of two matrices or a vector and a matrix.\n *\n * @param {Matrix|Vector} X - a matrix or a vector.\n * @param {Matrix} Y - a matrix.\n *\n * @returns {Matrix} result of the product.\n *\n */\nexport function crossprod(X, Y) {\n\n   if (Y === undefined) {\n      Y = X;\n   }\n\n   if (!ismatrix(X) || !ismatrix(Y)) {\n      throw Error('crossprod: both X and Y must be instance of Matrix class.');\n   }\n\n   const nrx = X.nrows;\n   const ncx = X.ncols;\n\n   const nry = Y.nrows;\n   const ncy = Y.ncols;\n\n   // create vector for the product\n   const nrows = ncx;\n   const ncols = ncy;\n   const ninner = nrx;\n   const out = new Float64Array(nrows * ncols);\n\n   for (let c = 0; c < ncols; c++) {\n      // column c of Y\n      const yc = Y.v.subarray(c * nry, (c + 1) * nry);\n\n      // column c of out\n      const outc = out.subarray(c * nrows, (c + 1) * nrows);\n\n      for (let r = 0; r < nrows; r++) {\n\n         // column r of X (row r of X')\n         const xr = X.v.subarray(r * nrx, (r + 1) * nrx);\n\n         let s = 0;\n         for (let i = 0; i < ninner; i++) {\n            s += xr[i] * yc[i];\n         }\n         outc[r] = s;\n      }\n   }\n\n   return new Matrix(out, nrows, ncols);\n}\n\n\n/**\n * Bind several matrices or vectors into a single matrix row wise.\n *\n * @param  {...any} args - matrices or vectors separated by comma.\n *\n * @returns {Matrix} concatenated matrix.\n *\n */\nexport function rbind(...args) {\n\n   if (args.length === 1) return args[0];\n\n   // check that all matrices have the same number of rows\n   const ncols = ismatrix(args[0]) ? args[0].ncols : args[0].length;\n   const check = args.reduce( (acc, cur) => acc & ismatrix(cur) ? cur.ncols === ncols : cur.length === ncols, true);\n\n   if (!check) {\n      throw Error('rbind: all matrices must the same number of columns.');\n   }\n\n   // compute number of columns in outside matrix\n   const nrows = args.reduce( (acc, cur) => acc + (ismatrix(cur) ? cur.nrows : 1), 0);\n   const l = nrows * ncols;\n   const out = new Matrix.valuesConstructor(l);\n\n   let start = 0;\n   for (const a of args) {\n      out.set((ismatrix(a) ? a.t().v : a.v), start);\n      start += a.v.length;\n   }\n\n   return new Matrix(out, ncols, nrows).t();\n\n}\n\n\n/**\n * Bind several matrices or vectors into a single matrix column wise.\n *\n * @param  {...any} args - matrices or vectors separated by comma.\n *\n * @returns {Matrix} concatenated matrix.\n *\n */\nexport function cbind(...args) {\n\n   if (args.length === 1) return args[0];\n\n   // check that all matrices have the same number of rows\n   const nrows = ismatrix(args[0]) ? args[0].nrows : args[0].length;\n   const check = args.reduce( (acc, cur) => acc & (ismatrix(cur) ? cur.nrows === nrows : cur.length === nrows), true);\n\n   if (!check) {\n      throw Error('cbind: all matrices must the same number of rows.');\n   }\n\n   // compute number of columns in outside matrix\n   const ncols = args.reduce( (acc, cur) => acc + (ismatrix(cur) ? cur.ncols : 1), 0);\n   const l = nrows * ncols;\n   const out = new Matrix.valuesConstructor(l);\n\n   let start = 0;\n   for (const a of args) {\n      out.set(a.v, start);\n      start += a.v.length;\n   }\n\n   return new Matrix(out, nrows, ncols);\n\n}\n\n\n/**\n * Concatenate several vectors into one vector.\n *\n * @param {...Vector | ...Index} args - vectors separated by comma.\n *\n * @returns {Vector|Index} vector with concatenated values.\n *\n */\nexport function c(...args) {\n\n   if (args.length === 1) return args[0];\n\n   const l = args.reduce( (acc, cur) => acc + cur.length, 0);\n   const out = new args[0].constructor.valuesConstructor(l);\n\n   let start = 0;\n   for (const a of args) {\n      out.set(a.v, start);\n      start += a.length;\n   }\n\n   return new args[0].constructor(out);\n}\n\n\n/**\n * Change dimension of matrices and vectors.\n * @param {Matrix|Vector} obj - a matrix or a vector.\n * @param {number} nrow - number of rows in the reshaped object.\n * @param {number} ncol - number of columns in the reshaped object, if undefined, a vector will be returned.\n *\n * @returns {Matrix|Vector} the reshaped object.\n *\n */\nexport function reshape(obj, nrow, ncol) {\n\n   if (ncol === undefined) {\n      if (nrow !== obj.v.length) {\n         throw Error(\"reshape: provided dimension does not match number of values in the object.\");\n      }\n      return new Vector(obj.v);\n   }\n\n   if (obj.v.length !== nrow * ncol) {\n      throw Error(\"reshape: provided dimension does not match number of values in the object.\");\n   }\n\n   return new Matrix(obj.v, nrow, ncol);\n}\n\n\n\n/*************************************************/\n/*         Classes and type checkers             */\n/*************************************************/\n\n\n/**\n * Return 'true' of 'X' is a Matrix object, 'false' otherwise.\n *\n * @param {any} X - any object or variable.\n *\n * @returns {boolean}\n *\n */\nexport function ismatrix(X) {\n   return X && X.constructor === Matrix;\n}\n\n\n/**\n * Create a Matrix object from array of values.\n *\n * @param {number[]} values - array with values.\n * @param {number} nrows - number of rows in matrix.\n * @param {number} ncols - number of columns in matrix.\n *\n * @returns {Matrix} the matrix.\n *\n */\nexport function matrix(values, nrows, ncols) {\n   return new Matrix(new Float64Array(values), nrows, ncols);\n}\n\n\n/** Class representing a matrix */\nexport class Matrix {\n\n   static valuesConstructor = Float64Array;\n   static TOLERANCE = Math.pow(10, -9);\n\n   /**\n    * Constructor for a Matrix object.\n    *\n    * @param {Float64Array} values - typed array with values.\n    * @param {number} nrows - number of rows in the matrix.\n    * @param {number} ncols - number of columns in the matrix.\n    *\n    * @returns {Matrix} a Matrix object (see description).\n    *\n    * @description  Create a matrix from vector of values. Matrix is represented by an object with two\n    * fields. Field 'v' is a typed Float64Array with all values, unfolded column by column. The second\n    * field, 'dim', is an array with 2 values: number of rows and number of columns.\n    *\n    */\n   constructor (values, nrows, ncols) {\n      if (!ArrayBuffer.isView(values) || values.constructor !== Matrix.valuesConstructor) {\n         throw Error('Matrix: parameter \"values\" must be Float64Array.')\n      }\n\n      if (nrows === 0 || ncols === 0) {\n         throw Error('Matrix: can not create matrix with zero rows or columns.')\n      }\n\n      if (values.length !== nrows * ncols) {\n         throw Error('Matrix: number elements in \"values\" is not equal to \"nrows\" x \"ncols\".')\n      }\n\n      this.v = values;\n      this.nrows = nrows\n      this.ncols = ncols;\n   }\n\n\n   /**\n    * Compute inverse of the matrix.\n    *\n    * @returns inverse matrix.\n    *\n    */\n   inv() {\n\n      if (this.nrows !== this.ncols) {\n         throw Error('inv: only squared matrices can be inverted.');\n      }\n\n      const n = this.ncols;\n\n      if (this.isuppertriangular()) {\n\n         if (this.islowertriangular()) {\n            // it means diagonal\n            return Matrix.diagm(this.diag().apply(v => Math.abs(v) > Number.EPSILON ? 1 / v : x));\n         }\n\n         // prepare matrices - we will transpose X to work with columns instead of rows\n         const I = Matrix.eye(n);\n         const Yt = Matrix.eye(n);\n         const Xt = this.t();\n\n         // solve for the last column\n         const s = Xt.v[(n - 1) * n + (n - 1)];\n         const c = n - 1;\n         for (let r = 0; r < n; r++) {\n            Yt.v[c * n + r] = I.v[c * n + r] / s;\n         }\n\n         // do backward substitution\n         for (let c = n - 2; c >= 0; c--) {\n            let s = I.getcolumn(c + 1);\n            const xc = Xt.getcolref(c + 1);\n            for (let r = c + 1; r < n; r++ ) {\n               const yc = Yt.getcolumn(r + 1);\n               s = s.subtract(yc.mult(xc[r]));\n            }\n            Yt.v.set(s.divide(xc[c]).v, c * n);\n         }\n\n         return Yt.t()\n      }\n\n\n      if (this.islowertriangular()) {\n\n         // check if diagonal elements are not zeros\n         const d = this.diag();\n         if (prod(d) < Number.EPSILON) {\n            throw Error('inv: the matrix is not invertible.');\n         }\n\n         // prepare matrices - we will transpose X to work with columns instead of rows\n         const I = Matrix.eye(n);\n         const Yt = Matrix.eye(n);\n         const Xt = this.t();\n\n         // solve for the first column\n         const c = 0;\n         const s = Xt.v[0];\n         for (let r = 0; r < n; r++) {\n            Yt.v[c * n + r] = I.v[c * n + r] / s;\n         }\n\n         // do forward substitution\n         for (let c = 1; c < n; c++) {\n            let s = I.getcolumn(c + 1);\n            const xc = Xt.getcolref(c + 1);\n            for (let r = 0; r < c; r++ ) {\n               const yc = Yt.getcolumn(r + 1);\n               s = s.subtract(yc.mult(xc[r]));\n            }\n            Yt.v.set(s.divide(xc[c]).v, c * n);\n         }\n\n         return Yt.t()\n      }\n\n      // invert matrix using QR transformation\n      const r = qr(this);\n      if (!r.R.isuppertriangular()) {\n         throw Error('inv: QR decomposition of the matrix returned incorrect result.');\n      }\n\n      return r.R.inv().dot(r.Q.t());\n   }\n\n\n   /**\n    * Check if matrix is lower triangular.\n    *\n    * @returns {boolean} true if matrix is lower triangular, false otherwise.\n    */\n   islowertriangular() {\n\n      if (this.nrows !== this.ncols) return false;\n      for (let j = 1; j < this.ncols; j++) {\n         for (let i = 0; i < j; i++) {\n            if (Math.abs(this.v[j * this.nrows + i]) > Matrix.TOLERANCE) return false;\n         }\n      }\n\n      return true;\n   }\n\n\n   /**\n    * Check if matrix is upper triangular.\n    *\n    * @returns {boolean} true if matrix is upper triangular, false otherwise.\n    */\n   isuppertriangular() {\n\n      if (this.nrows !== this.ncols) return false;\n\n      for (let j = 0; j < this.ncols; j++) {\n         for (let i = j + 1; i < this.nrows; i++) {\n            if (Math.abs(this.v[j * this.nrows + i]) > Matrix.TOLERANCE) return false;\n         }\n      }\n\n      return true;\n   }\n\n\n   /**\n    * Return vector with diagonal elements of matrix.\n    *\n    * @returns {Vector} vector with diagonal elements.\n    *\n    */\n   diag() {\n\n      const n = Math.min(this.nrows, this.ncols);\n      const out = new Float64Array(n);\n      for (let rc = 0; rc < n; rc++) {\n         out[rc] = this.getcolref(rc + 1)[rc];\n      }\n\n      return new Vector(out);\n   }\n\n\n   /**\n    * Transpose the matrix.\n    *\n    * @returns {Matrix} transposed matrix.\n    *\n    */\n   t() {\n\n      const ncols_out = this.nrows;\n      const nrows_out = this.ncols;\n      const out = new Matrix.valuesConstructor(this.v.length);\n\n      if (this.ncols < this.nrows) {\n         for(let i = 0; i < this.ncols; i++) {\n            const x = this.v.subarray(i * this.nrows, (i + 1) * this.nrows)\n            for(let j = 0; j < this.nrows; j++) {\n               out[j * nrows_out + i] = x[j];\n            }\n         }\n\n         return new Matrix(out, nrows_out, ncols_out);\n      }\n\n      for(let j = 0; j < this.nrows; j++) {\n         const outx = out.subarray(j * nrows_out, (j + 1) * nrows_out)\n         for(let i = 0; i < this.ncols; i++) {\n            outx[i] = this.v[i * this.nrows + j];\n         }\n      }\n\n      return new Matrix(out, nrows_out, ncols_out);\n   }\n\n\n   /**\n    * Compute a dot product of the matrix with vector or another matrix.\n    *\n    * @param {Vector|Matrix} X - a vector or a matrix to compute a dot product with.\n    *\n    * @returns {Matrix} result of the dot product.\n    *\n    */\n   dot(X) {\n\n      if (isvector(X)) {\n         return new Matrix(_dot(this.v, X.v, this.nrows, this.ncols, X.length, 1), this.nrows, 1);\n      }\n\n      if (ismatrix(X)) {\n         return new Matrix(_dot(this.v, X.v, this.nrows, this.ncols, X.nrows, X.ncols), this.nrows, X.ncols);\n      }\n\n      throw Error(\"dot: argument 'X' must be a matrix or a vector.\");\n   }\n\n   /**\n    * Does mathematical operation between the matrix and another matrix, a vector or a number.\n    *\n    * @param {number|Vector|Matrix} x - a vector or a number to operate with.\n    * @param {function} fun - function to apply.\n    * @param {number} dims - if 'x' is a vector which dimension applies it to.\n    *\n    * @returns {Matrix} result of operation.\n    *\n    */\n   op(X, fun, dims) {\n\n      if (ismatrix(X)) {\n         return new Matrix(_opvv(this.v, X.v, fun), this.nrows, this.ncols);\n      }\n\n      if (isnumber(X)) {\n         return new Matrix(_opvn(this.v, X, fun), this.nrows, this.ncols);\n      }\n\n      if (!isvector(X)) {\n         throw new Error('op: argument \"x\" must be a matrix, a vector or a number.');\n      }\n\n      if (dims === undefined) {\n         dims = X.length === this.ncols ? 2 : 1;\n      }\n\n      if (dims === 2 && X.length === this.ncols) {\n\n         const out = new Matrix.valuesConstructor(this.v.length);\n         for (let c = 0; c < this.ncols; c++) {\n            out.set(_opvn(this.getcolref(c + 1), X.v[c], fun), c * this.nrows);\n         }\n\n         return new Matrix(out, this.nrows, this.ncols);\n      }\n\n      if (dims === 1 && X.length === this.nrows) {\n\n         const out = new Matrix.valuesConstructor(this.v.length);\n         for (let c = 0; c < this.ncols; c++) {\n            out.set(_opvv(this.getcolref(c + 1), X.v, fun), c * this.nrows);\n         }\n\n         return new Matrix(out, this.nrows, this.ncols);\n      }\n\n      throw new Error('op: length of vector \"X\" does not match number of rows nor number of columns of the maytrix.');\n\n   }\n\n\n   /**\n    * Add a number or values from another matrix or vector.\n    *\n    * @param {number|Vector|Matrix} X - a matrix, a vector or a number to sum the values with.\n    *\n    * @returns {Matrix} result of operation.\n    *\n    */\n   add(X) {\n      return this.op(X, (a, b) => a + b);\n   }\n\n   /**\n    * Subtract a number or values from another matrix or vector.\n    *\n    * @param {number|Vector|Matrix} X - a matrix, a vector or a number to subtract the values of.\n    *\n    * @returns {Matrix} result of operation.\n    *\n    */\n   subtract(X) {\n      return this.op(X, (a, b) => a - b);\n   }\n\n\n   /**\n    * Multiply to a number or to values from another matrix or vector.\n    *\n    * @param {number|Vector|Matrix} X - a matrix, a vector or a number to multiply the values to.\n    *\n    * @returns {Matrix} result of operation.\n    *\n    */\n   mult(X) {\n      return this.op(X, (a, b) => a * b);\n   }\n\n\n   /**\n    * Divide to a number or to values from another matrix or vector.\n    *\n    * @param {number|Vector|Matrix} X - a matrix, a vector or a number to divide the values to.\n    *\n    * @returns {Matrix} result of operation.\n    *\n    */\n   divide(X) {\n      return this.op(X, (a, b) => a / b);\n   }\n\n\n   /**\n    * Applies a function to elements of the matrix.\n    * @param {function} fun - function to apply (should return single value).\n    * @param {number} dims - which elements to apply the function to (0 - every, 1 - rows, 2 - columns).\n    *\n    * @returns {Vector|Matrix} - result of applying the function (either array with one value for each\n    * row/column or another Matrix with transformed values).\n    */\n   apply(fun, dims) {\n\n      // by default function is applied to columns\n      if (dims === undefined) {\n         dims = 2;\n      }\n\n      // columns\n      if (dims == 2) {\n         const n = this.ncols;\n         const out = new Matrix.valuesConstructor(n);\n         for (let i = 0; i < n; i++) {\n            out[i] = fun(this.getcolref(i + 1));\n         }\n         return new Vector(out);\n      }\n\n      // rows\n      if (dims == 1) {\n         return this.t().apply(fun, 2);\n      }\n\n      // individual values\n      if (dims == 0) {\n         const n = this.v.length;\n         const out = new Matrix.valuesConstructor(n);\n         for (let i = 0; i < n; i++) {\n            out[i] = fun(this.v[i]);\n         }\n         return new Matrix(out, this.nrows, this.ncols);\n      }\n   }\n\n\n   /**\n    * Replace values of matrix specified by 'rind' and 'cind' with values from another matrix.\n    *\n    * @param {Matrix} - matrix with values to use as replacement.\n    * @param {number | Array | Index} rind - row indices (as number or vector of indices).\n    * @param {number | Array | Index} cind - column indices (as number or vector of indices).\n    *\n    * @description Row and column indices must start from 1. Empty array ([]) tells function to use\n    * all elements (e.g. all rows or all columns). Size of matrix 'X' should correspond to the\n    * number of indices.\n    *\n    * Function does not create a new matrix but changes the current one.\n    *\n    * @returns {Matrix} the matrix with replaced values.\n    *\n    */\n   replace (X, rind, cind) {\n\n      if (typeof(rind) === 'number') {\n         rind = [rind];\n      }\n\n      if (rind.length === 0) {\n         rind = Index.seq(1, this.nrows);\n      }\n\n      if (!isindex(rind)) {\n         rind = index(rind);\n      }\n\n      if (typeof(cind) === 'number') {\n         cind = [cind];\n      }\n\n      if (cind.length === 0) {\n         cind = Index.seq(1, this.ncols);\n      }\n\n      if (!isindex(cind)) {\n         cind = index(cind);\n      }\n\n      const nrows = rind.length;\n      const ncols = cind.length;\n\n      if (min(rind) < 1 || max(rind) > this.nrows) {\n         throw Error('Matrix.replace: row indices do not match the dimension of matrix.');\n      }\n\n      if (min(cind) < 1 || max(cind) > this.ncols) {\n         throw Error('Matrix.replace: column indices do not match the dimension of matrix.');\n      }\n\n      if (X.nrows !== nrows || X.ncols !== ncols) {\n         throw Error('Matrix.replace: dimension of \"X\" does not match the indices.');\n      }\n\n      for (let ic = 0; ic < cind.length; ic++) {\n         const xc = X.getcolref(ic + 1);\n         const cv = (cind.v[ic] - 1) * this.nrows;\n         for (let ir = 0; ir < rind.length; ir++) {\n            const r = rind.v[ir];\n            this.v[cv + r - 1] = xc[ir];\n         }\n      }\n\n      return this;\n   }\n\n\n   /**\n    * Create a deep copy of the matrix.\n    *\n    * @returns {Matrix}\n    *\n    */\n   copy() {\n      return new Matrix(this.v.slice(), this.nrows, this.ncols);\n   }\n\n   /**\n    * Return values from a particular matrix row as vector.\n    *\n    * @param {number} ir - row index (starting from 1).\n    *\n    * @returns {Vector} vector with column values.\n    *\n    */\n   getrow(ir) {\n\n      if (ir < 1 || ir > this.nrows) {\n         throw Error('getrow: wrong row index.');\n      }\n\n      const v = new Vector.valuesConstructor(this.ncols);\n      for (let c = 0; c < this.ncols; c++) {\n         v[c] = this.getcolref(c + 1)[ir - 1];\n      }\n      return new Vector(v);\n   }\n\n\n   /**\n    * Return values from a particular matrix column as vector.\n    *\n    * @param {number} ic - column index (starting from 1).\n    *\n    * @returns {Vector} vector with column values.\n    *\n    */\n   getcolumn(ic) {\n\n      if (ic < 1 || ic > this.ncols) {\n         throw Error('getcolumn: wrong column index.');\n      }\n\n      return new Vector(this.v.slice((ic - 1) * this.nrows, ic * this.nrows));\n   }\n\n\n   /**\n    * Return a reference (not copy) to values of a particular matrix column.\n    *\n    * @param {number} ic - index of column (starting from 1).\n    *\n    * @returns {Float64Array} - reference to the column values as typed array.\n    *\n    */\n   getcolref(ic) {\n      return this.v.subarray((ic - 1) * this.nrows, ic * this.nrows);\n   }\n\n\n   /**\n    * Create a subset of a matrix using row and column indices.\n    *\n    * @param {number|Index} rind - row indices to select (as Index or a single number).\n    * @param {number|Index} cind - column indices to select (as Index or a single number).\n    *\n    * @description Row and column indices must start from 1. If 'rind' or 'cind' are null,\n    * all items from this direction will be taken.\n    *\n    * @returns {Matrix} the subset of the matrix.\n    *\n    */\n   subset(rind, cind) {\n\n      if (typeof(rind) === 'number') {\n         rind = index([rind]);\n      }\n\n      if (typeof(cind) === 'number') {\n         cind = index([cind]);\n      }\n\n      if (Array.isArray(rind)) {\n         rind = rind.length === 0 ? null : index(rind);\n      }\n\n      if (Array.isArray(cind)) {\n         cind = cind.length === 0 ? null : index(cind);\n      }\n\n      if (rind !== null && !isindex(rind)) {\n         throw Error('subset: parameter \"rind\" can be a number, null or instance of Index.');\n      }\n\n      if (cind !== null && !isindex(cind)) {\n         throw Error('subset: parameter \"cind\" can be a number, null or instance of Index.');\n      }\n\n      if (rind !== null && (min(rind) < 1 || max(rind) > this.nrows)) {\n         throw Error('subset: parameter \"rind\" does not match size of the matrix.');\n      }\n\n      if (cind !== null && (min(cind) < 1 || max(cind) > this.ncols)) {\n         throw Error('subset: parameter \"cind\" does not match size of the matrix.');\n      }\n\n      // select all rows and a subset of columns\n      if (rind === null) {\n\n         const ncols_out = cind.length;\n         const nrows_out = this.nrows;\n         const out = new Matrix.valuesConstructor(nrows_out * ncols_out);\n         for (let ic = 0; ic < cind.length; ic++) {\n            out.set(this.v.slice((cind.v[ic] - 1) * this.nrows, cind.v[ic] * this.nrows), ic * this.nrows);\n         }\n\n         return new Matrix(out, nrows_out, ncols_out);\n      }\n\n      // select all columns and a subset of rows\n      if (cind === null || cind === undefined) {\n         return this.t().subset(cind, rind).t();\n      }\n\n      // select specific columns and rows\n      const nrows_out = rind.length;\n      const ncols_out = cind.length;\n      const out = new Matrix.valuesConstructor(nrows_out * ncols_out);\n      let xc_out = new Matrix.valuesConstructor(nrows_out)\n      for (let ic = 0; ic < ncols_out; ic++) {\n\n         // take the a whole column from matrix and pick row values from it\n         const xc = this.v.subarray((cind.v[ic] - 1) * this.nrows, (cind.v[ic]) * this.nrows);\n         for (let ir = 0; ir < nrows_out; ir++) {\n            xc_out[ir] = xc[rind.v[ir] - 1];\n         }\n         out.set(xc_out, ic * nrows_out);\n      }\n\n      return new Matrix(out, nrows_out, ncols_out);\n   }\n\n\n   /**\n    * Convert matrix to a text representation for showing the values in nice way.\n    *\n    * @param {number} ndec - number of decimals to round the values to.\n    *\n    * @returns {string} the string with matrix representation.\n    *\n    * TODO: 1) add workaround for large matrices (...)\n    *\n    */\n   toString (ndec) {\n\n      function leftpad(x, n) {\n         return  \" \".repeat(n - x.length) + x;\n      }\n\n      if (ndec === undefined) {\n         ndec = 2;\n      }\n\n      const nvar = this.ncols;\n      const ndigits = Math.round(Math.abs(Math.log10(max(this.v)))) + ndec + 3;\n\n      let str = \"\";\n      const Xt = this.t();\n      for (let c = 1; c <= Xt.ncols; c++) {\n         str += Array.from(Xt.getcolref(c)).map(v => leftpad(v.toFixed(ndec), ndigits)).join(\" \") + \"\\n\"\n      }\n\n      return str;\n   }\n\n   /**\n    * Convert matrix values to a string which can be downloaded as CSV file.\n    *\n    * @param {string} sep - symbol to use for separation of values (by default \",\").\n    * @param {string} dec - symbold to use for separation of decimals (by default \".\").\n    * @param {Array} header - optional array of header elements (column names).\n    * @param {Array} labels - optional array of labels (row names).\n    *\n    * @returns {string} - string with CSV data.\n    */\n   toCSV(sep, dec, header, labels) {\n\n      // set default separator symbol\n      if (sep === undefined) {\n         sep = \",\";\n      }\n\n      // set default decimals separator symbol\n      if (dec === undefined) {\n         dec = sep === \";\" ? \",\" : \".\"\n      }\n\n      const hasLabels = labels !== undefined && labels !== null && labels.length > 0;\n      const hasHeader = header !== undefined && header !== null && header.length > 0;\n\n      if (hasLabels && labels.length !== this.nrows) {\n         throw Error (\"Matrix.toCSV: number of elements in labels array must match number of rows in the matrix.\");\n      }\n\n      if (hasHeader && header.length !== this.ncols + (hasLabels ? 1 : 0)) {\n         throw Error (\"Matrix.toCSV: number of elements in header must match number of columns in the matrix.\");\n      }\n\n      // transpose to make it faster\n      const m = this.t();\n      let rows = hasHeader ? header.join(sep) + \"\\n\" : \"\";\n      for (let c = 1; c <= m.ncols; c++) {\n         rows = rows + (hasLabels ? labels[c - 1] + sep : \"\") + m.getcolref(c).join(sep) + \"\\n\";\n      }\n\n      // change decimal separator if it is not a dot\n      rows = rows.replace(/\\./g, dec);\n\n      return rows;\n   }\n\n   // Static methods //\n\n   /**\n    * Create a matrix with random values from normal distribution.\n    *\n    * @param {number} nrows - number of rows.\n    * @param {number} ncols - number of columns.\n    * @param {number} [mu=0] - mean (expected) value.\n    * @param {number} [sigma=1] - standard deviation.\n    *\n    * @returns {Vector} matrix with values.\n    *\n    */\n   static randn(nrows, ncols, mu, sigma) {\n      return reshape(rnorm(nrows * ncols, mu, sigma), nrows, ncols);\n   }\n\n\n   /**\n    * Create a matrix with random values from uniform distribution [a, b].\n    *\n    * @param {number} nrows - number of rows.\n    * @param {number} ncols - number of columns.\n    * @param {number} [a=0] - smallest possible value.\n    * @param {number} [b=1] - largest possible value.\n    *\n    * @returns {Vector} matrix with values.\n    *\n    */\n   static rand(nrows, ncols, a, b) {\n      return reshape(runif(nrows * ncols, a, b), nrows, ncols);\n   }\n\n\n   /**\n    * Create an identity matrix.\n    *\n    * @param {number} nrows - number of rows.\n    * @param {number} ncols - number of columns (if undefined, will be same as 'nrows').\n    *\n    * @returns {Matrix} the matrix.\n    *\n    */\n   static eye(nrows, ncols) {\n\n      if (ncols === undefined) {\n         ncols = nrows;\n      }\n\n      const out = new Float64Array(nrows * ncols);\n      for (let rc = 0; rc < Math.min(nrows, ncols); rc++) {\n         out[rc * nrows + rc] = 1;\n      }\n\n      return new Matrix(out, nrows, ncols);\n   }\n\n\n   /**\n    * Create a diagonal matrix based on vector with values.\n    *\n    * @param {Vector} x - vector with values.\n    *\n    * @returns {Matrix} the matrix.\n    *\n    */\n   static diagm(x) {\n\n      if (!isvector(x)) {\n         throw Error('diagm: the argument \"x\" must be a Vector.');\n      }\n\n      const n = x.length;\n      const out = new Float64Array(n * n);\n      for (let rc = 0; rc < n; rc++) {\n         out[rc * n + rc] = x.v[rc];\n      }\n\n      return new Matrix(out, n, n);\n   }\n\n\n   /**\n    * Create a Matrix object filled with zeros.\n    *\n    * @param {number} nrows - number of rows.\n    * @param {number} ncols - number of columns.\n    *\n    * @returns {Matrix} the generated matrix.\n    *\n    */\n   static zeros(nrows, ncols) {\n\n      if (ncols === undefined) {\n         ncols = nrows;\n      }\n\n      return new Matrix(new Float64Array(nrows * ncols), nrows, ncols);\n   }\n\n\n   /**\n    * Create a Matrix object filled with ones.\n    *\n    * @param {number} nrows - number of rows.\n    * @param {number} ncols - number of columns.\n    *\n    * @returns {Matrix} the generated matrix.\n    *\n    */\n   static ones(nrows, ncols) {\n      return Matrix.fill(1, nrows, ncols);\n   }\n\n   /**\n    * Create a Matrix object filled with a manual value.\n    *\n    * @param {number} v - value to fill the matrix with.\n    * @param {number} nrows - number of rows.\n    * @param {number} ncols - number of columns.\n    *\n    * @returns {Matrix} the generated matrix.\n    *\n    */\n   static fill(v, nrows, ncols) {\n\n      if (ncols === undefined) {\n         ncols = nrows;\n      }\n\n      const out = new Float64Array(nrows * ncols);\n      for (let i = 0; i < out.length; i++) {\n         out[i] = v;\n      }\n\n      return new Matrix(out, nrows, ncols);\n   }\n\n\n   /**\n    * Create a matrix by applying function to all possible pairs of values from two vectors.\n    *\n    * @param {Array|Vector} x - vector with values.\n    * @param {Array|Vector} y - vector with values.\n    * @param {function} fun - function of two arguments which returns a single value.\n    *\n    * @returns {Matrix}\n    */\n   static outer(x, y, fun) {\n\n      if (Array.isArray(x)) {\n         x = vector(x);\n      }\n\n      if (Array.isArray(y)) {\n         y = vector(y);\n      }\n\n      if (!isvector(x)) {\n         throw Error('Matrix.outer: parameter \"x\" must be a vector or an array with numbers.');\n      }\n\n      if (!isvector(y)) {\n         throw Error('Matrix.outer: parameter \"y\" must be a vector or an array with numbers.');\n      }\n\n      const out = Matrix.zeros(x.length, y.length);\n      for (let c = 0; c < y.length; c++) {\n         const yv = y.v[c]\n         const outc = out.getcolref(c + 1);\n         for (let r = 0; r < x.length; r++) {\n            outc[r] = fun(x.v[r], yv);\n         }\n      }\n\n      return out;\n   }\n\n\n   /**\n    * Parse string with data from a CSV file and create a matrix with values.\n    *\n    * @param {string} strData - string with all data from the CSV file.\n    * @param {string} sep - symbols used for separation of values (by default \",\").\n    * @param {boolean} hasHeader - logical, if first row must be treated as header or not.\n    * @param {boolean} hasLabels - logical, if first column must be treated as object labels or not.\n    *\n    *\n    * @returns {Object} JSON containing matrix with parsed values, header, values and decimal separators.\n    */\n   static parseCSV(strData, sep, hasHeader, hasLabels) {\n\n\n      // function which returns true if at least one value in array can not be parsed to float\n      function hasNaN(vec) {\n         return vec.some(v => Number.isNaN(Number.parseFloat(v.trim())));\n      }\n\n      // set default separator symbol\n      if (sep === undefined) {\n         sep = \",\";\n      }\n\n      // setup decimal separator\n      const dec = sep === \";\" ? \",\" : \".\";\n\n      // remove BOM symbol if any\n      strData = strData.replace(/^\\uFEFF/gm, \"\").replace(/^\\u00EF?\\u00BB\\u00BF/gm,\"\");\n\n      // remove \\r symbols\n      strData = strData.replace(/\\r/gm, \"\");\n\n      // split string with data values into array of rows\n      let rows = strData.split(/\\n/);\n\n      // check if the first row contains header\n      let header = [];\n      let startRow = 0;\n      const firstRow = rows[0].split(sep);\n      if (hasHeader || (hasHeader === undefined && hasNaN(firstRow))) {\n         header = firstRow;\n         startRow = 1;\n      }\n\n      // filter empty rows out\n      rows = rows.filter(v => v.trim().length > 1);\n\n      // check if first column contains labels\n      let labels = [];\n      let startColumn = 0;\n      if (hasLabels) {\n         startColumn = 1;\n      }\n\n      // number of rows and columns in future matrix\n      const nrows = rows.length - startRow;\n      const ncols = firstRow.length - startColumn;\n\n\n      if (nrows < 1) {\n         throw Error(\"Data file should contain at least 1 row with values.\");\n      }\n\n      if (ncols < 1) {\n         throw Error(\"Data file should contain at least 1 column with values.\");\n      }\n\n      // set rows of data as columns of matrix - it is faster\n      const data = Matrix.zeros(ncols, nrows);\n\n      // find symbol used for decimals separator\n      for (let r = startRow; r < nrows + startRow; r++) {\n\n         // parsing: trim spaces and replace non-numbers with dot (.)\n         const rowValuesAll = rows[r].split(sep)\n\n         let rowValues;\n         if (hasLabels) {\n            labels[r - startRow] = rowValuesAll[0];\n            rowValues = rowValuesAll.slice(1).map(v => Number.parseFloat(v.trim().replace(dec, \".\")));\n         } else {\n            rowValues = rowValuesAll.map(v => Number.parseFloat(v.trim().replace(dec, \".\")));\n         }\n\n         if (rowValues.some(v => Number.isNaN(v))) {\n            throw Error(\"Some of the values can not be converted to numbers, check your CSV file and try again.\");\n         }\n\n         if (rowValues.length != ncols) {\n            throw Error(\"Wrong number of values in row #\" + r);\n         }\n\n         data.v.set(new Float64Array(rowValues), (r - startRow) * ncols);\n      }\n\n      return {values: data.t(), header: header, labels: labels, sep:sep, dec:dec};\n   }\n\n}\n\n\n/**\n * Return 'true' of 'x' is a Vector object, 'false' otherwise.\n *\n * @param {any} x - any object or variable.\n *\n * @returns {boolean}\n *\n */\nexport function isvector(x) {\n   return x && x.constructor === Vector;\n}\n\n\n/**\n * Create a Vector object from array of values.\n *\n * @param {number[]} values - array with values.\n *\n * @returns {Vector} the vector.\n *\n */\nexport function vector(values) {\n   return new Vector(new Float64Array(values));\n}\n\n\n/** Class representing a vector */\nexport class Vector {\n\n   static valuesConstructor = Float64Array;\n\n   /**\n    * Constructor for a Vector object.\n    *\n    * @param {Float64Array} values - typed array with values.\n    *\n    * @returns {Vector} a Vector object (see description).\n    * @constructor\n    *\n    * @description  Create a vector of values. Vector is represented by an object with two\n    * fields. Field 'v' is a typed Float64Array with values. The second field, 'length', is\n    * the length of the vector.\n    *\n    */\n   constructor(values) {\n\n      if (!ArrayBuffer.isView(values) || values.constructor !== Float64Array) {\n         throw Error('Vector: parameter \"values\" must be Float64Array.')\n      }\n\n      this.v = values;\n      this.length = values.length;\n   }\n\n   /**\n    * Returns a vector of indices for values for which function ´fun´ returns true.\n    *\n    * @param {function} fun - function with two arguments (value and its index).\n    *\n    * @returns {Index} a vector of indices.\n    */\n   which(fun) {\n      const out = new Index.valuesConstructor(this.length);\n      let n = 0;\n      for (let i = 0; i < this.length; i++) {\n         if (fun(this.v[i], i)) {\n            out[n] = i + 1;\n            n = n + 1;\n         }\n      }\n\n      return new Index(out.subarray(0, n));\n   }\n\n\n   /**\n    * Returns a subset of values for which function ´fun´ returns true.\n    *\n    * @param {function} fun - function with two arguments (value and its index).\n    *\n    * @returns {Vector} a subset.\n    */\n   filter(fun) {\n      const out = new Vector.valuesConstructor(this.length);\n      let n = 0;\n      for (let i = 0; i < this.length; i++) {\n         if (fun(this.v[i], i)) {\n            out[n] = this.v[i];\n            n = n + 1;\n         }\n      }\n\n      return new Vector(out.subarray(0, n));\n   }\n\n\n   /**\n    * Shuffles values in vector using Fisher–Yates algorithm.\n    *\n    * @returns {Vector} vector with shuffled values.\n    */\n   shuffle() {\n      return new Vector(_shuffle(this.v));\n   }\n\n\n   /**\n    * Sorts values in a vector.\n    *\n    * @param {boolean} decreasing - if true, values will be sorted in decreasing order, otherwise in increasing.\n    *\n    * @returns {Vector} vector with sorted values\n    *\n    */\n   sort(decreasing) {\n      return new Vector(_sort(this.v, decreasing));\n   }\n\n   /**\n    * Sorts values in a vector and return indices of sorted values.\n    *\n    * @param {boolean} decreasing - if true, values will be sorted in decreasing order, otherwise in increasing.\n    *\n    * @returns {Index} vector with sorted values\n    *\n    */\n   sortind(decreasing) {\n      return new Index(_sortind(this.v, decreasing));\n   }\n\n\n   /**\n    * Replicate a vector 'n' times.\n    *\n    * @param {number} n - how many times the vector must be replicated.\n    *\n    * @returns {Vector} a vector with replicated values.\n    *\n    */\n   rep(n) {\n      return _rep(this, n);\n   }\n\n\n   /**\n    * Replicate each value in the vector 'n' times.\n    *\n    * @param {number} n - how many times every value must be replicated.\n    *\n    * @returns {Vector} a vector with replicated values.\n    *\n    */\n   repeach(n) {\n      return _repeach(this, n);\n   }\n\n\n   /**\n    * Replace values of vectors specified by 'ind' with values from another vector.\n    *\n    * @param {Vector} - vector with values to use as replacement.\n    * @param {number | Array | Index} ind - indices (as number or vector of indices).\n    *\n    * @description Indices must start from 1. Empty array ([]) tells function to use\n    * all elements. Length of vector 'x' should correspond to the\n    * number of indices.\n    *\n    * Function does not create a new vector but changes the current one.\n    *\n    * @returns {Vector} the vector with replaced values.\n    *\n    */\n   replace (x, ind) {\n\n      if (typeof(ind) === 'number') {\n         ind = [ind];\n      }\n\n      if (ind.length === 0) {\n         ind = Index.seq(1, this.length);\n      }\n\n      if (!isindex(ind)) {\n         ind = index(ind);\n      }\n\n      const n = ind.length;\n\n      if (min(ind) < 1 || max(ind) > this.length) {\n         throw Error('Vector.replace: indices do not match the lenght of the vector.');\n      }\n\n      if (x.length !== n) {\n         throw Error('Vector.replace: length of \"x\" does not match the indices.');\n      }\n\n      for (let i = 0; i < ind.length; i++) {\n         const r = ind.v[i];\n         this.v[r - 1] = x.v[i];\n      }\n\n      return this;\n   }\n\n\n   /**\n    * Create a subset of a vector using vector with indices.\n    *\n    * @param {number|Array|Index} ind - single index or vector with indices (must start from 1, not 0).\n    *\n    * @returns {Vector} a subset.\n    */\n   subset(ind) {\n\n      if (typeof(ind) === 'number') {\n         ind = index([ind]);\n      }\n\n      if (Array.isArray(ind)) {\n         ind = typeof(ind[0]) === 'boolean' ? Index.bool2ind(ind) : index(ind);\n      }\n\n      if (!isindex(ind)) {\n         throw Error('subset: parameter \"ind\" must be number, array of instance of class Index.');\n      }\n\n      const n = ind.length;\n      const out = Vector.zeros(n);\n\n      for (let i = 0; i < n; i++) {\n\n         if (ind.v[i] < 1) {\n            throw Error('subset: indices must start with 1 (not 0).');\n         }\n\n         if (ind.v[i] > this.length) {\n            throw Error('subset: index exceeds the length of the vector.');\n         }\n\n         out.v[i] = this.v[ind.v[i] - 1];\n      }\n\n      return out;\n   }\n\n\n   /**\n    * Create a subset of a vector values which are located between positions 'start' and 'end' (both included).\n    *\n    * @param {number} start - index of value to start (must start from 1, not 0).\n    * @param {number} end - index of value to end.\n    *\n    * @returns {Vector} a subset.\n    */\n   slice(start, end) {\n\n      if (start === null) {\n         start = 1;\n      }\n\n      if (end === null || end === undefined) {\n         end = this.length;\n      }\n\n      if (start < 1) {\n         throw Error('slice: indices must start with 1 (not 0).');\n      }\n\n      if (end > this.length) {\n         throw Error('slice: index exceeds the length of the vector.');\n      }\n\n      if (end < start) {\n         throw Error('slice: \"end\" must not be smaller than \"start\".');\n      }\n\n      return new Vector(this.v.slice(start - 1, end));\n   }\n\n\n   /**\n    * Make a deep copy of the vector.\n    */\n   copy() {\n      return new Vector(this.v.slice());\n   }\n\n\n   /**\n    * Compute a dot product with another vector.\n    *\n    * @param {Vector} x - a vector.\n    *\n    * @returns {number} result of the product.\n    *\n    */\n   dot(x) {\n\n      if (x === undefined) {\n         x = this;\n      }\n\n      return _dot(this.v, x.v, 1, this.length, x.length, 1)[0];\n   }\n\n\n   /**\n    * Does mathematical operation between vector values and either values from another vector or a number.\n    *\n    * @param {number|Vector} x - a vector or a number to operate with.\n    * @param {function} fun - function to apply.\n    *\n    * @returns {Vector} result of operation.\n    *\n    */\n   op(x, fun) {\n      if (isvector(x)) {\n         return new Vector(_opvv(this.v, x.v, fun));\n      }\n\n      if (isnumber(x)) {\n         return new Vector(_opvn(this.v, x, fun));\n      }\n\n      throw new Error('op: argument \"x\" must be a vector or a number.');\n   }\n\n\n   /**\n    * Add a number or values from another vector.\n    *\n    * @param {number|Vector} x - a vector or a number to sum the values with.\n    *\n    * @returns {Vector} result of operation.\n    *\n    */\n   add(x) {\n      return this.op(x, (a, b) => a + b);\n   }\n\n\n   /**\n    * Subtract a number or values from another vector.\n    *\n    * @param {number|Vector} x - a vector or a number to subtract the values of.\n    *\n    * @returns {Vector} result of operation.\n    *\n    */\n   subtract(x) {\n      return this.op(x, (a, b) => a - b);\n   }\n\n\n   /**\n    * Multiply to a number or to values from another vector.\n    *\n    * @param {number|Vector} x - a vector or a number to multiply the values to.\n    *\n    * @returns {Vector} result of operation.\n    *\n    */\n   mult(x) {\n      return this.op(x, (a, b) => a * b);\n   }\n\n\n   /**\n    * Divide to a number or to values from another vector.\n    *\n    * @param {number|Vector} x - a vector or a number to divide the values to.\n    *\n    * @returns {Vector} result of operation.\n    *\n    */\n   divide(x) {\n      return this.op(x, (a, b) => a / b);\n   }\n\n\n   /**\n    * Apply a function to each value of the vector.\n    *\n    * @param {function} fun - function to apply (should take one value and return one value).\n    *\n    * @returns {Vector} the transformed vector.\n    */\n   apply(fun) {\n\n      const n = this.v.length;\n      const out = Vector.zeros(n);\n      for (let i = 0; i < n; i++) {\n         out.v[i] = fun(this.v[i]);\n      }\n\n      return out;\n   }\n\n\n   // Static methods //\n\n\n   /**\n    * Concatenates numbers, arrays and vectors into a single vector.\n    *\n    * @param  {...any} args - numbers, arrays or/and vectors.\n    *\n    * @returns {Vector}\n    *\n    */\n   static c(...args) {\n\n      if (args.length === 1) return args[0];\n\n      const l = args.reduce( (acc, cur) => acc + (typeof(cur) === 'number' ? 1 : cur.length), 0);\n      const out = new Vector.valuesConstructor(l);\n\n      let start = 0;\n      for (const a of args) {\n\n         if (typeof(a) === 'number') {\n            out[start] = a;\n            start += 1;\n         } else {\n            out.set(isvector(a) ? a.v : new Vector.valuesConstructor(a), start);\n            start += typeof(a) === 'number' ? 1 : a.length;\n         }\n      }\n\n      return new Vector(out);\n   }\n\n\n   /**\n    * Generate sequence of values.\n    *\n    * @param {number} start - first value.\n    * @param {number} end - last value.\n    * @param {number} [by=1] - increment between values.\n    *\n    * @returns {Vector} vector with sequence values.\n    *\n    */\n   static seq(start, end, by) {\n      return _seq(start, end, by, Vector)\n   }\n\n\n   /**\n    * Create a vector with random values from normal distribution.\n    *\n    * @param {number} length - number of values.\n    * @param {number} [mu=0] - mean (expected) value.\n    * @param {number} [sigma=1] - standard deviation.\n    *\n    * @returns {Vector} vector with values.\n    *\n    */\n   static randn(length, mu, sigma) {\n      return rnorm(length, mu, sigma);\n   }\n\n\n   /**\n    * Create a vector with random values from uniform distribution [a, b].\n    *\n    * @param {number} length - number of values.\n    * @param {number} [a=0] - smallest possible value.\n    * @param {number} [b=1] - largest possible value.\n    *\n    * @returns {Vector} vector with values.\n    *\n    */\n   static rand(length, a, b) {\n      return runif(length, a, b);\n   }\n\n\n   /**\n    * Create a Vector object filled with zeros.\n    *\n    * @param {number} n - length of the vector\n    *\n    * @returns {Vector} the generated vector.\n    *\n    */\n   static zeros(n) {\n      return new Vector(new Vector.valuesConstructor(n));\n   }\n\n\n   /**\n    * Create a Vector object filled with ones.\n    *\n    * @param {number} n - length of the vector.\n    *\n    * @returns {Vector} the generated vector.\n    *\n    */\n   static ones(n) {\n      return Vector.fill(1, n);\n   }\n\n\n  /**\n    * Create a Vector object filled with a repeated value.\n    *\n    * @param {number} v - value to fill the vector with.\n    * @param {number} n - length of the vector.\n    *\n    * @returns {Vector} the generated vector.\n    *\n    */\n   static fill(v, n) {\n\n      const out = new Vector.valuesConstructor(n);\n      for (let i = 0; i < out.length; i++) {\n         out[i] = v;\n      }\n\n      return new Vector(out);\n   }\n\n}\n\n\n/**\n * Return 'true' of 'x' is an Index object, 'false' otherwise.\n *\n * @param {any} x - any object or variable.\n *\n * @returns {boolean}\n *\n */\nexport function isindex(x) {\n   return x.constructor === Index;\n}\n\n\n/**\n * Create an Index object from array of values.\n *\n * @param {number[]} values - array with values.\n *\n * @returns {Index} the vector.\n *\n */\nexport function index(values) {\n   return new Index(new Int32Array(values));\n}\n\n\n/** Class representing a vector with indices */\nexport class Index {\n\n   static valuesConstructor = Int32Array;\n\n   /**\n    * Constructor for an Index object.\n    *\n    * @param {Int32Array} values - typed array with index values.\n    *\n    * @returns {Index} an Index object (see description).\n    * @constructor\n    *\n    * @description  Create a vector of values to be used as indices (e.g. for subsetting,\n    * counting, etc.). Index is represented by an object with two fields. Field 'v' is a typed\n    * Int32Array with index values. The second field, 'length', is the length of the vector.\n    *\n    */\n   constructor(values) {\n\n      if (!ArrayBuffer.isView(values) || values.constructor !== Int32Array) {\n         throw Error('Index: parameter \"values\" must be Int32Array.')\n      }\n\n      this.v = values;\n      this.length = values.length;\n   }\n\n\n   /**\n    * Returns a vector of indices for values for which function ´fun´ returns true.\n    *\n    * @param {function} fun - function with two arguments (value and its index).\n    *\n    * @returns {Index} a vector of indices.\n    */\n   which(fun) {\n      const out = new Index.valuesConstructor(this.length);\n      let n = 0;\n      for (let i = 0; i < this.length; i++) {\n         if (fun(this.v[i], i)) {\n            out[n] = i + 1;\n            n = n + 1;\n         }\n      }\n\n      return new Index(out.subarray(0, n));\n   }\n\n\n   /**\n    * Returns a subset of indices for which function ´fun´ returns true.\n    *\n    * @param {function} fun - function with two arguments (value and its index).\n    *\n    * @returns {Index} a subset.\n    */\n   filter(fun) {\n      const out = new Index.valuesConstructor(this.length);\n      let n = 0;\n      for (let i = 0; i < this.length; i++) {\n         if (fun(this.v[i], i)) {\n            out[n] = this.v[i];\n            n = n + 1;\n         }\n      }\n\n      return new Index(out.subarray(0, n));\n   }\n\n\n   /**\n    * Shuffle indices.\n    *\n    * @returns {Index} vector with shuffled indices.\n    */\n   shuffle() {\n      return new Index(_shuffle(this.v));\n   }\n\n\n   /**\n    * Sorts indices.\n    *\n    * @param {boolean} decreasing - if true, values will be sorted in decreasing order, otherwise in increasing.\n    *\n    * @returns {Index} vector with sorted indices.\n    *\n    */\n   sort(decreasing) {\n      return new Index(_sort(this.v, decreasing));\n   }\n\n   /**\n    * Sorts indices and return indices of sorted values.\n    *\n    * @param {boolean} decreasing - if true, values will be sorted in decreasing order, otherwise in increasing.\n    *\n    * @returns {Index} vector with sorted indices.\n    *\n    */\n   sortind(decreasing) {\n      return new Index(_sortind(this.v, decreasing));\n   }\n\n   /**\n    * Replicate the index object 'n' times.\n    *\n    * @param {number} n - how many times the index must be replicated.\n    *\n    * @returns {Index} index with replicated values.\n    *\n    */\n   rep(n) {\n      return _rep(this, n);\n   }\n\n\n   /**\n    * Replicate each index in the index 'n' times.\n    *\n    * @param {number} n - how many times every value must be replicated.\n    *\n    * @returns {Index} an index object with replicated values.\n    *\n    */\n   repeach(n) {\n      return _repeach(this, n);\n   }\n\n   /**\n    * Create a subset of a index using another vector with indices.\n    *\n    * @param {number|Array|Index} ind - single index or vector with indices (must start from 1, not 0).\n    *\n    * @returns {Index} a subset.\n    */\n   subset(ind) {\n\n     if (typeof(ind) === 'number') {\n         ind = index([ind]);\n      }\n\n      if (Array.isArray(ind)) {\n         ind = index(ind);\n      }\n\n      if (!isindex(ind)) {\n         throw Error('subset: parameter \"ind\" must be number, array of instance of class Index.');\n      }\n\n      const n = ind.length;\n      const out = new Index.valuesConstructor(n);\n\n      for (let i = 0; i < n; i++) {\n\n         if (ind.v[i] < 1) {\n            throw Error('subset: indices must start with 1 (not 0).');\n         }\n\n         if (ind.v[i] > this.length) {\n            throw Error('subset: index exceeds the length of the vector.');\n         }\n\n         out[i] = this.v[ind.v[i] - 1];\n      }\n\n      return new Index(out);\n   }\n\n\n   /**\n    * Create a subset of a vector of indices which are located between positions 'start' and 'end' (both included).\n    *\n    * @param {number} start - index of value to start (must start from 1, not 0).\n    * @param {number} end - index of value to end.\n    *\n    * @returns {Index} a subset.\n    */\n   slice(start, end) {\n\n      if (start === null) {\n         start = 1;\n      }\n\n      if (end === null || end === undefined) {\n         end = this.length;\n      }\n\n      if (start < 1) {\n         throw Error('slice: indices must start with 1 (not 0).');\n      }\n\n      if (end > this.length) {\n         throw Error('slice: index exceeds the length of the vector.');\n      }\n\n      if (end < start) {\n         throw Error('slice: \"end\" must not be smaller than \"start\".');\n      }\n\n      return new Index(this.v.slice(start - 1, end));\n   }\n\n\n   // Static methods //\n\n   /**\n    * Generate sequence of indices.\n    *\n    * @param {number} start - first value.\n    * @param {number} end - last value.\n    * @param {number} [by=1] - increment between values.\n    *\n    * @returns {Index} object with sequence values.\n    *\n    */\n   static seq(start, end, by) {\n      return _seq(start, end, by, Index);\n   }\n\n\n   /**\n    * Create an Index object filled with ones.\n    *\n    * @param {number} n - length of the vector.\n    *\n    * @returns {Index} the generated vector of indices.\n    *\n    */\n   static ones(n) {\n      return Index.fill(1, n);\n   }\n\n\n  /**\n    * Create an Index object filled with a repeated value.\n    *\n    * @param {number} v - value to fill the index vector with (must be integer).\n    * @param {number} n - length of the vector.\n    *\n    * @returns {Vector} the generated vector of indices.\n    *\n    */\n   static fill(v, n) {\n\n      const out = new Index.valuesConstructor(n);\n      for (let i = 0; i < out.length; i++) {\n         out[i] = v;\n      }\n\n      return new Index(out);\n   }\n\n\n   /**\n    * Convert array of logical values to vector of indices.\n    *\n    * @param {Array} x - array of logical values.\n    *\n    * @returns {Index} vector of indices where x is true.\n    *\n    */\n   static bool2ind(x) {\n\n      let n = 0;\n      const out = new Index.valuesConstructor(x.length);\n\n      for (let i = 0; i < x.length; i++) {\n         if (x[i]) {\n            out[n] = i + 1;\n            n = n + 1;\n         }\n      }\n\n      return new Index(out.subarray(0, n));\n   }\n}\n\n/**\n * Return 'true' of 'x' is an Factor object, 'false' otherwise.\n *\n * @param {any} x - any object or variable.\n *\n * @returns {boolean}\n *\n */\nexport function isfactor(x) {\n   return x.constructor === Factor;\n}\n\n/**\n * Create a factor object from Array with values.\n *\n * @param {Array} x - array with values.\n *\n * @return {Factor} returns instance of Factor object.\n *\n */\nexport function factor(x) {\n   const n = x.length;\n   const values = new Factor.valuesConstructor(n);\n   const labels = [];\n\n   for (let i = 0; i < n; i++) {\n      const j = labels.findIndex(v => v === x[i]);\n      if (j < 0) {\n         // value is new\n         labels.push(x[i])\n         values[i] = labels.length - 1;\n      } else {\n         // value already present\n         values[i] = j;\n      }\n   }\n\n   return new Factor(values, labels)\n}\n\n\n/** Class representing a factor — vector with categorical variables */\nexport class Factor {\n\n   static valuesConstructor = Uint8Array;\n\n   /**\n    * Constructor for a Factor object.\n    *\n    * @param {Uint8Array} values - vector with indices for each category item.\n    * @param {Array} labels - array with labels for each category.\n    *\n    * @returns {Factor} class object (see description).\n    * @constructor\n    *\n    */\n   constructor(values, labels) {\n\n      if (values.constructor !== Factor.valuesConstructor) {\n         throw Error('Factor: wrong class for parameter \"values\".')\n      }\n\n      if (values.nrows < 1 || values.ncols < 1) {\n         throw Error('Factor: parameter \"values\" must have at least one row and one column.')\n      }\n\n      if (!labels || !Array.isArray(labels)) {\n         throw Error('Factor: parameter \"labels\" must be an array.')\n      }\n\n      this.v = values;\n      this.length = values.length;\n      this.labels = labels.map(v => v.toString());\n      this.nlevels = this.labels.length;\n   }\n\n   /**\n    * Return vector of indices corresponding to location of a particular category.\n    *\n    * @param {string} value - name (label) of the category to find.\n    *\n    * @returns {Index} vector with indices (starts from 1).\n    */\n   which(value) {\n      const ind = this.labels.findIndex((v, i) => v === value);\n      const out = new Index.valuesConstructor(this.length);\n      let k = 0;\n      for (let i = 0; i < this.length; i++) {\n         if (this.v[i] === ind) {\n            out[k] = i + 1;\n            k += 1;\n         }\n      }\n\n      return new Index(out.slice(0, k))\n   }\n}\n\n\n\n/***********************************************/\n/*    Generic methods                          */\n/***********************************************/\n\n/**\n * Generate sequence of values for vector or index.\n *\n * @param {number} start - first value.\n * @param {number} end - last value.\n * @param {number} [by=1] - increment between values.\n * @param {class} classRef - class reference\n *\n * @returns {Object} object with sequence values.\n *\n */\nfunction _seq(start, end, by, classRef) {\n\n   // by default increment is unit\n   if (by === undefined) by = (start <= end) ? 1 : -1;\n\n   // compute length of sequence\n   const length = Math.floor((end - start) / by) + 1;\n\n   if (length < 1) {\n      throw Error('seq: wrong combination of parameters.');\n   }\n\n   const x = new classRef.valuesConstructor(length);\n   for (let i = 0; i < length; i++) {\n      x[i] = start + i * by;\n   }\n\n   return new classRef(x);\n}\n\n\n/**\n * Replicate object 'n' times.\n *\n * @param {Object} obj - object to replicate (Vector or Index).\n * @param {number} n - how many times the vector must be replicated.\n *\n * @returns {Object} an object with replicated values.\n *\n */\nfunction _rep(obj, n) {\n\n   const l = obj.length * n;\n   const out = new obj.constructor.valuesConstructor(l);\n   for (let i = 1; i <= n; i++) {\n      for (let j = 0; j < obj.length; j++) {\n         out[(i - 1) * obj.length + j] = obj.v[j];\n      }\n   }\n\n   return new obj.constructor(out);\n}\n\n\n/**\n * Replicate each value in the object 'n' times.\n *\n * @param {Object} obj - object to replicate (Vector or Index).\n * @param {number} n - how many times every value must be replicated.\n *\n * @returns {Object} an object with replicated values.\n *\n */\nfunction _repeach(obj, n) {\n\n   if (n < 1 || Math.round(n) !== n) {\n      throw Error('rep: parameter \"n\" must be an integer number > 1.');\n   }\n\n   const l = obj.length * n;\n   const out = new obj.constructor.valuesConstructor(l);\n   for (let j = 0; j < obj.length; j++) {\n      for (let i = 0; i < n; i++) {\n         out[j * n + i] = obj.v[j];\n      }\n   }\n\n   return new obj.constructor(out);\n}\n\n\n/**\n * Does an arithmetic operation for individual values from two arrays.\n *\n * @param {Array|Float64Array} v1 - the first array.\n * @param {Array|Float64Array} v2 - the second array.\n * @param {function} fun - function to use.\n *\n * @description the function must take two numbers and return one.\n *\n * @returns array of the same type as v1 and v2.\n */\nfunction _opvv(v1, v2, fun) {\n\n   if (v1.length !== v2.length) {\n      throw new Error(\"_opvv: arrays sizes do not match.\");\n   }\n\n   if (v1.constructor !== v2.constructor) {\n      throw new Error(\"_opvv: array types do not match.\");\n   }\n\n   const out = new v1.constructor(v1.length);\n   for (let i = 0; i < v1.length; i++) {\n      out[i] = fun(v1[i], v2[i]);\n   }\n\n   return out;\n}\n\n\n\n/**\n * Does an arithmetic operation for individual value from an array and a number.\n *\n * @param {Array|Float64Array} v1 - an array.\n * @param {number} v2 - a number.\n * @param {function} fun - function to use.\n *\n * @description the function must take two numbers and return one.\n *\n * @returns array of the same type as v1.\n */\nfunction _opvn(v1, v2, fun) {\n\n   const out = new v1.constructor(v1.length);\n   for (let i = 0; i < v1.length; i++) {\n      out[i] = fun(v1[i], v2);\n   }\n\n   return out;\n}\n\n\n/**\n * Generic function for taking a dot product of two matrices, X and Y, represented as vectors\n * @param {TypedArray} xv - vector with values from X\n * @param {TypedArray} yv - vector with values from Y\n * @param {number} nrx - number of rows in X\n * @param {number} ncx - number of columns in X\n * @param {number} nry - number of rows in Y\n * @param {number} ncy - number of columns in Y\n *\n * @returns {TypedArray} - vector with result of the product\n */\nexport function _dot(xv, yv, nrx, ncx, nry, ncy) {\n\n   if (ncx !== nry) {\n      throw Error('_dot: matrix dimensions do not much.');\n   }\n\n   // create vector for the product\n   const nrows = nrx;\n   const ncols = ncy;\n   const ninner = ncx;\n   const out = new xv.constructor(nrows * ncols);\n\n   for (let c = 0; c < ncols; c++) {\n      const yc = yv.subarray(c * nry, (c + 1) * nry)\n      const outc = out.subarray(c * nrows, (c + 1) * nrows);\n\n      for (let i = 0; i < ninner; i++) {\n         const yci = yc[i];\n         const xr = xv.subarray(i * nrx, (i + 1) * nrx)\n         for (let r = 0; r < nrows; r++) {\n            outc[r] += xr[r] * yci;\n         }\n      }\n   }\n\n   return out;\n}\n\n\n/**\n * Shuffles values in vector x using Fisher–Yates algorithm.\n *\n * @param {Arrat|TypedArray} x - a vector with values.\n *\n * @returns {Array|TypedArray} ector with shuffled values.\n *\n */\nexport function _shuffle(x) {\n\n  let y = x.slice();\n  let n = y.length;\n  let t, i;\n\n  while (n) {\n    i = Math.floor(Math.random() * n--);\n    t = y[n];\n    y[n] = y[i];\n    y[i] = t;\n  }\n\n  return y;\n}\n\n\n/**\n * Sorts values in a vector.\n *\n * @param {Array|TypedArray} x - vector with values.\n * @param {boolean} decreasing - should order be decreasing (true) or increasing (false).\n *\n * @returns {Array} array with two vectors: sorted values and indices of the sorted values.\n *\n */\nexport function _sort(x, decreasing = false) {\n   return decreasing ? x.slice().sort((a, b) => b - a) : x.slice().sort((a, b) => a - b);\n}\n\n\n/**\n * Sorts values in a vector.\n *\n * @param {Array|TypedArray} x - vector with values.\n * @param {boolean} decreasing - should order be decreasing (true) or increasing (false).\n *\n * @returns {Array} array with two vectors: sorted values and indices of the sorted values.\n *\n */\nexport function _sortind(x, decreasing = false) {\n   const ind = Index.seq(1, x.length).v;\n   return decreasing ? ind.sort((a, b) => x[b - 1] - x[a - 1]) : ind.sort((a, b) => x[a - 1] - x[b - 1]);\n}\n","import { noop, safe_not_equal, subscribe, run_all, is_function } from '../internal/index.mjs';\nexport { get_store_value as get } from '../internal/index.mjs';\n\nconst subscriber_queue = [];\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param {StartStopNotifier} [start]\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param {*=}value initial value\n * @param {StartStopNotifier=} start\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = new Set();\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (stop) { // store is ready\n                const run_queue = !subscriber_queue.length;\n                for (const subscriber of subscribers) {\n                    subscriber[1]();\n                    subscriber_queue.push(subscriber, value);\n                }\n                if (run_queue) {\n                    for (let i = 0; i < subscriber_queue.length; i += 2) {\n                        subscriber_queue[i][0](subscriber_queue[i + 1]);\n                    }\n                    subscriber_queue.length = 0;\n                }\n            }\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe(run, invalidate = noop) {\n        const subscriber = [run, invalidate];\n        subscribers.add(subscriber);\n        if (subscribers.size === 1) {\n            stop = start(set) || noop;\n        }\n        run(value);\n        return () => {\n            subscribers.delete(subscriber);\n            if (subscribers.size === 0 && stop) {\n                stop();\n                stop = null;\n            }\n        };\n    }\n    return { set, update, subscribe };\n}\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let started = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => subscribe(store, (value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (started) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        started = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n            // We need to set this to false because callbacks can still happen despite having unsubscribed:\n            // Callbacks might already be placed in the queue which doesn't know it should no longer\n            // invoke this derived store.\n            started = false;\n        };\n    });\n}\n/**\n * Takes a store and returns a new one derived from the old one that is readable.\n *\n * @param store - store to make readonly\n */\nfunction readonly(store) {\n    return {\n        subscribe: store.subscribe.bind(store)\n    };\n}\n\nexport { derived, readable, readonly, writable };\n","import { cbind, vector, isvector, Vector } from 'mdatools/arrays';\nimport { min, max, diff } from 'mdatools/stat';\n\n\n/**\n * Generate vector with axis tick labels and tick factor based on numeric tick values.\n *\n * @param {Vector} ticks - vector with numeric tick values.\n *\n * @returns {Array} an array with tick factor and array with tick labels.\n */\nexport function getTickLabels(ticks) {\n\n   if (ticks === undefined) return undefined;\n\n   const step = Math.abs(min(diff(ticks)));\n   let tickFactor = 0;\n   if (step < 1 && Math.abs(max(ticks)) < 1) {\n      // values between 0 and 1 (absolute)\n      let decNum = Math.ceil(-Math.log10(step));\n      if (decNum <= 2) {\n         return [0, Array.from(ticks).map(v => v.toFixed(decNum).toString())];\n      }\n      tickFactor = decNum - 2;\n      decNum = 2;\n      return [-tickFactor, Array.from(ticks).map(v => (v * Math.pow(10, tickFactor)).toFixed(decNum).toString())];\n   } else {\n      let decNum = Math.ceil(Math.log10(step));\n      if (decNum <= 2) {\n         return [0, Array.from(ticks).map(v => v.toString())];\n      }\n      tickFactor = decNum - 2;\n      decNum = 2;\n      return [tickFactor, Array.from(ticks).map(v => (v / Math.pow(10, tickFactor)).toString())];\n   }\n}\n\n\n/**\n * Check coordinates and convert them to vector if necessary.\n *\n * @param {Array|Vector} x - vector or array with coordinates.\n * @param {string} source - name of component which called the method (needed for error message).\n *\n * @returns {Vector}\n *\n */\nexport function checkCoords(x, source) {\n\n   if (Array.isArray(x)) {\n      x = vector(x);\n   }\n\n   if (!isvector(x)) {\n      throw Error(source + \": coordinates must be provided as array or instance of Vector class.\");\n   }\n\n   if (x.length < 1) {\n      throw Error(source + \": vector with coordinates is empty.\");\n   }\n\n   return x;\n}\n\n\n/**\n * Create string with coordinates of SVG polygon in 3D.\n *\n * @param {Array|Vector} x - vector with x-coordinates of polygon points.\n * @param {Array|Vector} y - vector with y-coordinates of polygon points.\n * @param {Array|Vector} z - vector with y-coordinates of polygon points.\n * @param {Array} tM - transformation matrix for 3D->2D (from 'Axes').\n * @param {Object} axes - JSON with Axes context.\n *\n * @returns {string} string with coordinates.\n *\n */\nexport function val2p3d(x, y, z, tM, axes) {\n\n   if (x === undefined || y === undefined) return undefined;\n\n   const [px, py] = axes.transform(cbind(checkCoords(x), checkCoords(y), checkCoords(z)), tM);\n\n   if (px.length !== py.length) {\n      throw Error('PlotSeries: parameters \"xValues\", \"yValues\" and \"zValues\" must be numeric vectors of the same length.');\n   }\n\n   let p = \"\";\n   for (let i = 0; i < px.length; i++) {\n      p += px[i] + \",\" + py[i] + \" \";\n   }\n\n   return p;\n}\n\n\n/**\n * Create string with coordinates of SVG polygon.\n *\n * @param {Array|Vector} x - vector with x-coordinates of polygon points.\n * @param {Array|Vector} y - vector with y-coordinates of polygon points.\n * @param {Array} tX - transformation parameters for x-coordinates (from 'Axes').\n * @param {Array} tY - transformation parameters for y-coordinates (from 'Axes').\n * @param {Object} axes - JSON with Axes context.\n *\n * @returns {string} string with coordinates.\n *\n */\nexport function val2p(x, y, tX, tY, axes) {\n\n   if (x === undefined || y === undefined) return undefined;\n\n   const px = axes.transform(checkCoords(x, 'val2p'), tX.coords);\n   const py = axes.transform(checkCoords(y, 'val2p'), tY.coords);\n\n   if (px.length != py.length) {\n      throw Error('PlotSeries: parameters \"xValues\" and \"yValues\" must be numeric vectors of the same length.');\n   }\n\n   let p = \"\";\n   for (let i = 0; i < px.length; i++) {\n      p += px[i] + \",\" + py[i] + \" \";\n   }\n\n   return p;\n}\n\n/**\n * Computes nice tick values for axis.\n *\n * @param {Array} ticks - vector with ticks if alredy available (if not, new will be computed).\n * @param {Array} lim - vector with axis limits tickets must be computed for.\n * @param {number} maxTickNum - maximum number of ticks to compute.\n * @param {boolean} round - round or not the fractions when computing nice numbers for the ticks.\n *\n * @returns {Array} an array with computed tick positions.\n *\n */\nexport function getAxisTicks(ticks, lim, maxTickNum, round = true) {\n\n   // if ticks are already provided do not recompute them\n   if (ticks !== undefined) {\n      if (Array.isArray(ticks)) {\n         ticks = vector(ticks);\n      }\n\n      if (!isvector(ticks)) {\n         throw Error('getAxisTicks: axis ticks must be provided as an array or as a vector.');\n      }\n\n      return ticks.filter(x => x >= lim[0] & x <= lim[1]);\n   }\n\n   // check if limits are ok\n   if (typeof(lim) !== \"object\" || lim[0] === undefined || lim[1] === undefined) return undefined;\n\n   // get range as a nice number and compute min, max and steps for the tick sequence\n   const delta = (lim[1] - lim[0]) / 50;\n   const range = niceNum(lim[1] - lim[0] - 1 * delta, round);\n   const tickSpacing = niceNum(range / (maxTickNum - 1), round);\n   const tickMin = Math.ceil((lim[0] + delta) / tickSpacing) * tickSpacing;\n   const tickMax = Math.floor((lim[1] - delta) / tickSpacing) * tickSpacing;\n\n   // recompute maxTickNum\n   maxTickNum = Math.round((tickMax - tickMin + 1) / tickSpacing) + 1;\n\n   // create a sequence of ticks\n   ticks = Vector.seq(tickMin, tickMax, tickSpacing);\n\n   // if step is smaller than 1 round values to remove small decimals accidentially added by JS\n   if (Math.abs(tickSpacing) < 1) {\n      const decNum = Math.round(-Math.log10(tickSpacing));\n      const r = Math.pow(10, 1 + Math.round(-Math.log10(tickSpacing)));\n      ticks = ticks.apply(v => (Math.round((v + Number.EPSILON) * r) / r));\n   }\n\n   // make sure the ticks are not aligned with axes limits\n   return ticks.filter(x => x >= lim[0] & x <= lim[1]);\n}\n\n\n/**\n * Computes a nice spacing value for a given range.\n *\n * @param {Number} localRange - a range (max - min).\n * @param {boolean} round - round or not the fractions when computing the number.\n *\n * @returns {Number} the computed spacing value.\n *\n */\nexport function niceNum( localRange,  round) {\n\n   const exponent = Math.floor(Math.log10(localRange));\n   const fraction = localRange / Math.pow(10, exponent);\n   let niceFraction;\n\n   if (round) {\n      if (fraction < 1.5)\n         niceFraction = 1;\n      else if (fraction < 3)\n         niceFraction = 2;\n      else if (fraction < 7)\n         niceFraction = 5;\n      else\n         niceFraction = 10;\n   } else {\n      if (fraction <= 1)\n         niceFraction = 1;\n      else if (fraction <= 2)\n         niceFraction = 2;\n      else if (fraction <= 5)\n         niceFraction = 5;\n      else\n         niceFraction = 10;\n   }\n\n   return niceFraction * Math.pow(10, exponent);\n}\n\n\n/**\n * Rounds coordinate values to single decimal\n */\nexport function roundCoords(x) {\n   return Math.round(x * 10) / 10\n}\n\n\n/**\n * Computes a scale level.\n *\n * @param {numeric} width - width of plotting area in pixels.\n * @param {numeric} height - height of plotting area in pixels.\n *\n * @returns {text} the scale level (\"small\", \"medium\" or \"large\").\n *\n */\nexport function getScale(width, height) {\n   if (height < 300.2 || width < 300.2) return \"small\";\n   if (height < 600.2 || width < 600.2) return \"medium\";\n   if (height < 850.2 || width < 850.2) return \"large\";\n   return \"xlarge\";\n}","<script>\n   /****************************************************\n   * Axes                                              *\n   * --------------------                              *\n   * root item for any plot                            *\n   *****************************************************/\n\n\timport { setContext, createEventDispatcher, onMount, onDestroy } from 'svelte';\n\timport { writable } from 'svelte/store';\n   import { isvector, vector, Vector } from 'mdatools/arrays';\n   import { roundCoords, getScale } from '../Utils.js';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let limX;                                   // array with limits for x-axis (in plot units) [min, max]\n   export let limY;                                   // array with limits for y-axis (in plot units) [min, max]\n   export let title = '';                             // title of the plot\n   export let xLabel = '';                            // label for x-axis\n   export let yLabel = '';                            // label for y-axis\n   export let margins = [1.0, 0.75, 0.5, 0.5];        // margins [bottom, left, top, right] )\n\n\n   /*****************************************/\n   /* Constants                             */\n   /*****************************************/\n\n   // event dispatcher\n   const dispatch = createEventDispatcher();\n\n   // how big are margins (number of pixels in unit margin value) between axis and plot area if axis are shown\n   const AXES_MARGIN_FACTORS = {\n      'small': 30,\n      'medium': 40,\n      'large': 50,\n      'xlarge': 60\n   }\n\n   // number of ticks along each axis\n   const TICK_NUM = {\n      'small': 5,\n      'medium': 8,\n      'large': 12,\n      'xlarge': 15\n   };\n\n   // size of ticks\n   const TICK_SIZE = {\n      'small': 4,\n      'medium': 6,\n      'large': 8,\n      'xlarge': 10\n   };\n\n   // font size for plot element\n   const LEGEND_FONT_SIZE = {\n      \"small\": 10,\n      \"medium\": 12,\n      \"large\": 14,\n      \"xlarge\": 16\n   };\n\n   // font size for legend items in pixels\n   const PLOT_FONT_SIZE = {\n      \"small\": 11,\n      \"medium\": 13,\n      \"large\": 16,\n      \"xlarge\": 19\n   };\n\n   // margin between plot series elements and data labels\n   const LABELS_MARGIN = {\n      'small': 10,\n      'medium': 13,\n      'large': 15,\n      'xlarge': 17\n   };\n\n   // line styles for different scales and types\n   const LINE_STYLES = {\n      small: ['0', '3,3', '1,1', '3,1'],\n      medium: ['0', '5,5', '2,2', '5,2'],\n      large: ['0', '7,7', '3,3', '7,3'],\n      xlarge: ['0', '9,9', '4,4', '9,3'],\n   }\n\n   // marker symbols\n   const MARKER_SYMBOLS = [\"●\", \"◼\", \"▲\", \"▼\", \"⬥\", \"＋\", \"*\", \"×\"];\n\n   // constant to make clip path ID unique\n   const clipPathID = 'plottingArea' + Math.round(Math.random() * 10000);\n\n\n   /*****************************************/\n   /* Variable parameters for internal use  */\n   /*****************************************/\n\n   /* parameters for internal use inside the component */\n   let plotElement;\n   let width = 100, height = 100;\n   let left = 0, bottom = 0, top = 0;\n\n\n   /*****************************************/\n   /* Helper functions                      */\n   /*****************************************/\n\n   /**\n    * Dispatcher for click events.\n    * @param {string} eventName - name of the event.\n    * @param {HTMLDOMElement} el - DOM element the click was registered for.\n    *\n    */\n   function dispatchClickEvent(eventName, el) {\n      const id = Array.prototype.indexOf.call(el.parentNode.children, el)\n      dispatch(eventName, {seriesTitle: el.parentNode.getAttribute('title'), elementID: id});\n   }\n\n   /**\n    * Handler (router) for click events.\n    *\n    * @param {event} e - event object.\n    *\n    * @description\n    * Checks which element the click was made on and dispatch a corresponding event.\n    *\n    */\n   function handleClick(e) {\n\n      // click on scatter plot markers\n      if (e.target.tagName === 'text' && e.target.parentNode.classList.contains('series_points')) {\n         dispatchClickEvent('markerclick', e.target);\n         return;\n      }\n\n      // click on bar plot bars\n      if (e.target.tagName === 'rect' && e.target.parentNode.classList.contains('series_bar')) {\n         dispatchClickEvent('barclick', e.target);\n         return;\n      }\n\n      // click outside any plot element\n      dispatch('axesclick');\n   }\n\n   /**\n    * Generic function to transform x or y-values from plot coordinates to screen (SVG) coordinates.\n    *\n    * @param {Array|Vector} v - vector with coordinates (or objects size) in original plot coordinates.\n    * @param {Object} tA - array with scaling and translation factors.\n    *\n    * @returns {Vector} vector with rescaled values\n    *\n    */\n   const transform = function(v, tA) {\n\n      if (!$isOk || v === undefined || v === null) return undefined;\n      if (Array.isArray(v)) v = vector(v);\n      if (!isvector(v) || v.length < 1) return undefined;\n\n      return v.apply(a => roundCoords((a - tA[1]) * tA[0] + tA[2])).v;\n   }\n\n\n   /**\n    * Generic function to transform x or y-values from screen (SVG) coordinates to plot coordinates.\n    *\n    * @param {Array|Vector} v - vector with coordinates (or objects size) in screen (SVG) coordinates.\n    * @param {Object} tA - array with scaling and translation factors.\n    *\n    * @returns {Vector} vector plot coordinates.\n    *\n    */\n   const invTransform = function(v, tA) {\n\n      if (!$isOk || v === undefined || v === null) return undefined;\n      if (Array.isArray(v)) v = vector(v);\n      if (!isvector(v) || v.length < 1) return undefined;\n\n      return v.apply(a => (a - tA[2]) / tA[0] + tA[1]).v;\n   }\n\n   /*****************************************/\n   /* Storage to share with children        */\n   /*****************************************/\n\n   const scale = writable('medium');                                  // scale factor (how big the shown plot is)\n   const tX = writable({'coords': [1, 0, 0], 'objects': [1, 0, 0]});  // scaling and translation factors for x-dimension\n   const tY = writable({'coords': [1, 0, 0], 'objects': [1, 0, 0]});  // scaling and translation factors for y-dimension\n   const isOk = writable(false);                                      // are axes ready for drawing\n   const xLim = writable(limX);\n   const yLim = writable(limY);\n\n\n   /*****************************************/\n   /* Axes context                          */\n   /*****************************************/\n\n   let context = {\n\n      // methods\n      transform: transform,\n      invTransform: invTransform,\n\n      // variables\n      scale: scale,\n      isOk: isOk,\n      xLim: xLim,\n      yLim: yLim,\n      tX: tX,\n      tY: tY,\n      xLabel: xLabel,\n      yLabel: yLabel,\n\n      // constants\n      LINE_STYLES: LINE_STYLES,\n      LABELS_MARGIN: LABELS_MARGIN,\n      TICK_NUM: TICK_NUM,\n      TICK_SIZE: TICK_SIZE,\n      MARKER_SYMBOLS: MARKER_SYMBOLS,\n      LEGEND_FONT_SIZE: LEGEND_FONT_SIZE\n   }\n\n\tsetContext('axes', context);\n\n   /*****************************************/\n   /* Reactive updates of the parameters    */\n   /*****************************************/\n\n   // computes real margins in pixels based on current scale\n   $: pxMargins = margins.map(v => v * AXES_MARGIN_FACTORS[$scale]);\n\n   // update limits if necessary\n   $: xLim.update(v => limX);\n   $: yLim.update(v => limY);\n\n   // computes status which tells that axes limits look fine and it is safe to draw\n   // the status is based on the axis limits validity\n   $: isOk.update(v =>\n      Array.isArray($yLim) &&\n      Array.isArray($xLim) &&\n      $xLim.length === 2 &&\n      $yLim.length === 2 &&\n      !$yLim.some(v => v === undefined) &&\n      !$xLim.some(v => v === undefined) &&\n      !$yLim.some(v => isNaN(v)) &&\n      !$xLim.some(v => isNaN(v)) &&\n      $xLim[1] !== $xLim[0] &&\n      $yLim[1] !== $yLim[0] &&\n      width > (pxMargins[1] + pxMargins[3]) &&\n      height > (pxMargins[0] + pxMargins[2])\n   )\n\n   // update transformation array for x-coordinates\n   $: {\n      if ($isOk) {\n         tX.update(v => ({\n            'coords':  [ (width - pxMargins[1] - pxMargins[3]) / ($xLim[1] - $xLim[0]), $xLim[0], pxMargins[1]],\n            'objects': [ (width - pxMargins[1] - pxMargins[3]) / ($xLim[1] - $xLim[0]),       0,             0]\n         }));\n      }\n   };\n\n   // update transformation array for y-coordinates\n   $: {\n      if ($isOk) {\n         tY.update(v => ({\n            'coords':  [-(height - pxMargins[0] - pxMargins[2]) / ($yLim[1] - $yLim[0]), $yLim[1], pxMargins[2]],\n            'objects': [ (height - pxMargins[0] - pxMargins[2]) / ($yLim[1] - $yLim[0]),        0,            0]\n         }));\n      }\n   };\n\n   // computes coordinates for clip path box\n   $: cpx = $isOk ? transform($xLim, $tX.coords) : [0, 1];\n   $: cpy = $isOk ? transform($yLim, $tY.coords) : [1, 0];\n\n\n   /*****************************************/\n   /* Events observers                      */\n   /*****************************************/\n\n   // observer for the plot area size — to update the scale\n   const ro = new ResizeObserver(entries => {\n      for (let entry of entries) {\n         const pcr = plotElement.getBoundingClientRect();\n         const scl = getScale(pcr.width, pcr.height);\n         scale.update(x => scl);\n\n         const m = PLOT_FONT_SIZE[scl] * 1.5;\n         left = xLabel && xLabel !== '' ? m : 0;\n         bottom = yLabel && yLabel !== '' ? m : 0;\n         top = title && title !== '' ? m : 0;\n         width = pcr.width > left ? pcr.width - left : 0;\n         height = pcr.height > (bottom + top) ? pcr.height - bottom - top : 0;\n      }\n   });\n\n   $: fontSize = PLOT_FONT_SIZE[$scale];\n\n   onMount(() => {\n      ro.observe(plotElement);\n   });\n\n   onDestroy(() => {\n      ro.unobserve(plotElement);\n   })\n\n   $: lblStyleStr = `font-weight:bold;text-anchor:middle;`;\n\n</script>\n\n<div class=\"plot-container\" bind:this={plotElement} class:plot_error={!$isOk}>\n\n   <svg class=\"plot\" bind:this={plotElement} xmlns=\"http://www.w3.org/2000/svg\"\n      style={`font-family: Arial, Helvetica, sans-serif;font-size:${fontSize}px`}>\n\n      <g style={lblStyleStr}>\n         <!-- y-axis label -->\n         {#if yLabel && yLabel !== ''}\n         <text x={0} y={(height + top) /2} dx={0} dy={0} dominant-baseline=\"top\" transform={`rotate(-90, 10, ${height/2})`} style=\"font-size:1.1em;\">{@html yLabel}</text>\n         {/if}\n         <!-- x-axis label -->\n         {#if xLabel && xLabel !== ''}\n         <text x={left + width/2 } y={height + top} dx={0} dy={5} dominant-baseline=\"middle\" style=\"font-size:1.1em;\">{@html xLabel}</text>\n         {/if}\n         <!-- plot title -->\n         {#if title && title !== ''}\n         <text x={left + width/2 } y={0} dx={0} dy={10}  dominant-baseline=\"hanging\" style=\"font-size:1.2em;\">{@html title}</text>\n         {/if}\n      </g>\n\n      <svg x={left} y={top} width={width} height={height} on:click={handleClick}\n         on:keydown={handleClick} preserveAspectRatio=\"none\" class=\"axes\">\n\n         <!-- define clipping path -->\n         <defs>\n            <clipPath id={clipPathID}>\n               <rect style=\"pointer-events:none\" x={cpx[0]} y={cpy[1]} width={cpx[1]-cpx[0]} height={cpy[0]-cpy[1]} />\n            </clipPath>\n         </defs>\n\n         <!-- axis and box -->\n         <slot name=\"xaxis\"></slot>\n         <slot name=\"yaxis\"></slot>\n\n         <!-- main plot content -->\n         <g class=\"axes-content\" clip-path=\"url(#{clipPathID})\">\n            <slot></slot>\n         </g>\n\n         <!-- axis and box -->\n         <slot name=\"box\"></slot>\n      </svg>\n   </svg>\n\n   {#if !$isOk}\n   <p class=\"message_error\">\n      Axes component was not properly initialized. <br />\n      Check that you defined axes limits and margins correctly.\n   </p>\n   {/if}\n</div>\n\n<style>\n\n   /* Plot container */\n   .plot-container {\n      font-family: Arial, Helvetica, sans-serif;\n      box-sizing: border-box;\n      position: relative;\n      min-width: 100px;\n      min-height: 50px;\n      width: 100%;\n      height: 100%;\n      padding: 0;\n      margin: 0;\n   }\n\n   .plot_error {\n      display: flex;\n      justify-content: center;\n      align-items: center;\n   }\n\n   .message_error {\n      font-size: 1.2em;\n      color: crimson;\n      padding: 1em;\n      box-sizing: border-box;\n      text-align: center;\n   }\n\n   /* Plot and axes (coordinate system) */\n\n   .plot {\n      display: block;\n      box-sizing: border-box;\n      position:absolute;\n      padding: 0;\n      margin: 0;\n      left: 0;\n      top: 0;\n      bottom: 0;\n      right: 0;\n      width: 100%;\n      height: 100%;\n   }\n\n   .axes-content {\n      padding: 0;\n      margin: 0;\n      height: 100%;\n      width: 100%;\n      max-height: 100%;\n      max-width: 100%;\n      min-height: 100%;\n      min-width: 100%;\n   }\n\n</style>","export const Colors = {\n   \"AXIS_LINE\": \"#303030\",\n   \"AXIS_TICK\": \"#606060\",\n   \"WHITE\":     \"#fff\",\n   \"BLACK\":     \"#000\",\n   \"GRAY\":      \"#909090\",\n   \"MIDDLEGRAY\": \"#dadada\",\n   \"LIGHTGRAY\": \"#f0f0f0\",\n   \"DARKGRAY\":  \"#606060\",\n   \"LEGEND\": \"#303030\",\n\n   \"PRIMARY\": \"#2679B2\",\n   \"PRIMARY_LIGHT\": \"#d2ebff\",\n   \"PRIMARY_TEXT\": \"#333\",\n}\n\n\n/**\n * Returns an array with 'n' colors.\n *\n * @param {number} n - number of colors to return.\n *\n * @returns {Array} array with colors as strings (hexadecimal).\n *\n */\nexport function getcolmap(n) {\n   if (n ==  1) return [\"#2679B2\"];\n   if (n ==  2) return [\"#2679B2\", \"#D22C2F\"];\n   if (n ==  3) return [\"#2679B2\", \"#92B42A\", \"#D22C2F\"];\n   if (n ==  4) return [\"#2679B2\", \"#2E9658\", \"#F2B825\", \"#D22C2F\"];\n   if (n ==  5) return [\"#2679B2\", \"#22988A\", \"#92B42A\", \"#F79426\", \"#D22C2F\"];\n   if (n ==  6) return [\"#2679B2\", \"#1C9AA8\", \"#379531\", \"#EED524\", \"#FB7F28\", \"#D22C2F\"];\n   if (n ==  7) return [\"#2679B2\", \"#1D94A9\", \"#2E9658\", \"#92B42A\", \"#F2B825\", \"#F47129\", \"#D22C2F\"];\n   if (n ==  8) return [\"#2679B2\", \"#1E90AA\", \"#279775\", \"#519E2F\", \"#D3CB25\", \"#F5A326\", \"#EF672A\", \"#D22C2F\"];\n   if (n ==  9) return [\"#2679B2\", \"#1F8DAB\", \"#22988A\", \"#33953F\", \"#92B42A\", \"#EFCA24\", \"#F79426\", \"#EB5F2A\", \"#D22C2F\"];\n   if (n == 10) return [\"#2679B2\", \"#208BAC\", \"#1E999A\", \"#2E9658\", \"#5FA32E\", \"#C5C626\", \"#F2B825\", \"#F98827\", \"#E85A2B\", \"#D22C2F\"];\n   if (n == 11) return [\"#2679B2\", \"#2089AD\", \"#1C9AA8\", \"#29976C\", \"#379531\", \"#92B42A\", \"#EED524\", \"#F4AA26\", \"#FB7F28\",\n      \"#E6552B\", \"#D22C2F\"];\n   if (n == 12) return [\"#2679B2\", \"#2188AD\", \"#1C97A8\", \"#25987C\", \"#329546\", \"#68A62D\", \"#BCC327\", \"#F0C524\", \"#F69E26\",\n      \"#F77728\", \"#E4512B\", \"#D22C2F\"];\n   if (n == 13) return [\"#2679B2\", \"#2186AD\", \"#1D94A9\", \"#22988A\", \"#2E9658\", \"#469A2F\", \"#92B42A\", \"#DECF25\", \"#F2B825\",\n      \"#F79426\", \"#F47129\", \"#E34E2C\", \"#D22C2F\"];\n   if (n == 14) return [\"#2679B2\", \"#2285AE\", \"#1E92AA\", \"#209995\", \"#2A9767\", \"#34953A\", \"#6FA82D\", \"#B5C128\", \"#EFCE24\", \"#F3AD25\",\n      \"#F98C27\", \"#F16B29\", \"#E14B2C\", \"#D22C2F\"];\n   if (n == 15) return [\"#2679B2\", \"#2284AE\", \"#1E90AA\", \"#1D999F\", \"#279775\", \"#31964A\", \"#519E2F\", \"#92B42A\", \"#D3CB25\", \"#F0C224\",\n      \"#F5A326\", \"#FA8527\", \"#EF672A\", \"#E0492C\", \"#D22C2F\"];\n\n   // if n > 15 return 16 colors\n   return [\"#2679B2\", \"#2283AE\", \"#1F8FAB\", \"#1C9AA8\", \"#249880\", \"#2E9658\", \"#379531\", \"#73AA2C\", \"#B0BF28\", \"#EDD424\", \"#F2B825\",\n      \"#F69B26\", \"#FB7F28\", \"#ED632A\", \"#DF472C\", \"#D22C2F\"];\n}\n","<script>\n   /****************************************************\n   * Axis lines                                        *\n   * --------------------                              *\n   * generic component for axis lines (main, grid, ...)*\n   * !!! not for users !!!                             *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Colors } from '../Colors.js';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let lineCoords = [];               // coordinates of start and end points of the lines\n   export let lineColor = Colors.DARKGRAY;   // line color\n   export let lineType = 1;                  // line type\n   export let lineWidth = 1;                 // lined width (thickness)\n   export let className = '';                // CSS class name for the component\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n   const scale = axes.scale;\n   const tX = axes.tX;\n   const tY = axes.tY;\n\n   // reactive variables for coordinates of axis lines\n   let x1, x2, y1, y2 = undefined;\n   $: if (lineCoords.length == 2) {\n      x1 = axes.transform(lineCoords[0][0], $tX.coords);\n      y1 = axes.transform(lineCoords[0][1], $tY.coords);\n      x2 = axes.transform(lineCoords[1][0], $tX.coords);\n      y2 = axes.transform(lineCoords[1][1], $tY.coords);\n   }\n\n   /* styles for axis and grid lines */\n   $: lineStyleStr = `stroke:${lineColor};stroke-width: ${lineWidth}px;stroke-dasharray:${axes.LINE_STYLES[$scale][lineType-1]}`;\n\n</script>\n\n{#if x1 !== undefined && y1 !== undefined && x2 !== undefined && y2 !== undefined}\n<g class={className}>\n   {#each x1 as v, i}\n   <line vector-effect=\"non-scaling-stroke\" x1={x1[i]} x2={x2[i]} y1={y1[i]} y2={y2[i]} style={lineStyleStr} />\n   {/each}\n</g>\n{/if}\n","<script>\n   /****************************************************\n   * AxisTickLabels                                    *\n   * --------------------                              *\n   * shows a series of tick labels along an axis       *\n   * !!! not for users !!!                             *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n\texport let tickCoords;  // array with tick coordinates\n   export let textColor;   // color of tick labels\n   export let tickLabels;  // array with tick labels\n   export let pos = 1;     // position of tick labels\n   export let las = 1;     // rotation of tick labels (1 - horizontal, 2 - vertical)\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const scale = axes.scale;\n   const tX = axes.tX;\n   const tY = axes.tY;\n   const isOk = axes.isOk;\n\n   let el;\n\n   let x, y = undefined;\n   let dx = 0, dy = 0, textAnchor;\n\n   // reactive calculations triggered by changes in coordinates and plot parameters\n   $: if ($isOk) {\n      x = axes.transform(tickCoords[1][0], $tX.coords);\n      y = axes.transform(tickCoords[1][1], $tY.coords);\n   }\n\n   // reactive calculations triggered by changes in scale\n   $: m = axes.LABELS_MARGIN[$scale];\n\n   // reactive calculations triggered by changes in pos\n   $: {\n      textAnchor = (['middle', 'middle', 'start', 'middle', 'end'])[pos];\n      dx = ([0, 0, m,  0, -m])[pos];\n      dy = ([0, m, 0, -m, 0])[pos];\n   }\n\n   // styles for the elements\n   $: textStyleStr = `dominant-baseline:middle;fill:${textColor};font-size:1em; text-anchor:middle;`;\n</script>\n\n{#if x !== undefined && y !== undefined}\n<g class=\"tick_labels\" bind:this={el} style={textStyleStr} >\n   {#if las === 2 && pos === 4}\n   {#each x as v, i}\n      <text data-id={i} x={x[i]} y={y[i]} dx={0} dy={dx*1.25} transform={`rotate(-90, ${x[i]}, ${y[i]})`} text-anchor={\"middle\"}>{@html tickLabels[i]}</text>\n   {/each}\n   {:else if las === 2 && pos === 1}\n   {#each x as v, i}\n      <text data-id={i} x={x[i]} y={y[i]} dx={-dy/2} dy={0} transform={`rotate(-90, ${x[i]}, ${y[i]})`} text-anchor={\"end\"}>{@html tickLabels[i]}</text>\n   {/each}\n   {:else}\n   {#each x as v, i}\n      <text data-id={i} x={x[i]} y={y[i]} dx={dx} dy={dy} text-anchor={textAnchor}>{@html tickLabels[i]}</text>\n   {/each}\n   {/if}\n</g>\n{/if}\n\n<style>\n   text, text > :global(tspan) {\n      cursor: default;\n      user-select: none;\n      dominant-baseline: middle;\n   }\n</style>","<script>\n   /****************************************************\n   * Axis                                              *\n   * ---------------------------------                 *\n   * generic element for X- or Y-axis                  *\n   * !!! not for users !!!                             *\n   *****************************************************/\n\n   import { Colors } from '../Colors.js';\n   import AxisLines from './AxisLines.svelte';\n   import AxisTickLabels from './AxisTickLabels.svelte';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let tickLabels = [];               // vector with labels for each tick\n   export let showGrid = false;              // logical, show or not grid lines\n   export let las = 1;                       // rotation of tick labels\n\n   export let pos = 1;                       // position of tick labels\n   export let className = \"\";                // name of CSS class for the axis\n   export let grid = [];                     // array with grid coordinates\n   export let axisLine = [];                 // array with coordinates of main axis line\n   export let tickCoords = [];               // array with axis tick coordinates\n   export let tfCoords = [];                 // array with tick factor coordinates\n   export let tickFactor = 0;                // tick factor (as power of 10)\n\n   export let lineColor = Colors.DARKGRAY;   // color of main axis line\n   export let gridColor = Colors.MIDDLEGRAY; // color of grid lines\n   export let textColor = Colors.DARKGRAY;   // color of tick labels\n\n   // generate text for tick factor label\n   function getTickFactorLabel(tf) {\n      if (tf === 0) return '';\n      if (tf < 0) {\n         return `&times;10<tspan dy=\"-0.5em\">${(tf).toString()}</tspan>`;\n      } else {\n         return `&times;10<tspan dy=\"-0.5em\">${(tf).toString()}</tspan>`;\n      }\n   }\n</script>\n\n<g class=\"mdaplot__axis {className}\">\n   <!-- grid -->\n   {#if showGrid }\n      <AxisLines lineCoords={grid} lineColor={gridColor} lineType={3} />\n   {/if}\n\n   <!-- main axis line -->\n   <AxisLines lineCoords={axisLine} lineColor={lineColor} lineType={1} />\n\n   <!-- ticks-->\n   <AxisLines lineCoords={tickCoords} lineColor={lineColor} lineType={1} />\n\n   <!-- labels -->\n   {#if tickCoords.length === 2 && tickLabels.length === tickCoords[1][0].length}\n   <AxisTickLabels {las} {pos} {tickCoords} {tickLabels} {textColor} />\n   {/if}\n\n   <!-- tick factor -->\n   {#if tickFactor !== 0}\n   <AxisTickLabels {pos} tickCoords={tfCoords} tickLabels={[getTickFactorLabel(tickFactor)]} {textColor} />\n   {/if}\n</g>\n\n","<script>\n   /****************************************************\n   * X-Axis                                            *\n   * --------------------                              *\n   * shows x-axis and its elements (ticks, grid, etc.) *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Vector, vector } from 'mdatools/arrays';\n   import { Colors } from '../Colors.js';\n   import { getAxisTicks, getTickLabels } from '../Utils.js';\n   import Axis from './Axis.svelte';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let slot = 'xaxis';                // slot the component must be placed in (must be \"xaxis\")\n   export let ticks = undefined;             // vector with numeric tick positions (by default is computed automatically)\n   export let tickLabels = undefined;        // vector with labels for each tick (by default tick values will be used)\n   export let showGrid = false;              // logical, show or not grid lines\n   export let las = 1;                       // orientation of tick labels (1 - horizontal, 2 - vertical)\n\n   export let lineColor = Colors.DARKGRAY;   // color of axis and tick lines\n   export let gridColor = Colors.MIDDLEGRAY; // color og grid lines\n   export let textColor = Colors.DARKGRAY;   // color of text tick labels\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // sanity checks of input parameters\n   if (slot !== 'xaxis') {\n      throw('Component XAxis must have \"slot=\\'xaxis\\'\" attribute.');\n   }\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n   const tY = axes.tY;\n\n   // prepare variables for coordinates\n   let grid = [];\n   let axisLine = [];\n   let tickCoords = [];\n   let tfCoords = [];\n   let tickFactor = 0;\n\n   // compute coordinates for ticks, grid and axis line\n   $: if ($isOk) {\n\n      // compute x-coordinates of the ticks or take the ones manually specified by user\n      const ticksX = getAxisTicks(ticks, $xLim, axes.TICK_NUM[$scale], true);\n      const tickNum = ticksX.length;\n\n      // compute tick y-coordinates (up and bottom)\n      const dY = axes.invTransform([axes.TICK_SIZE[$scale]], $tY.objects)[0];\n      const ticksY1 = Vector.fill($yLim[0], tickNum);\n      const ticksY2 = ticksY1.add(dY);\n\n      // compute coordinates for the ends of grid\n      const gridYEnd = Vector.fill($yLim[1], tickNum);\n\n      // tick labels and tick factor\n      if (ticks === undefined || tickLabels === undefined) {\n         [tickFactor, tickLabels] = getTickLabels(ticksX.v);\n      }\n\n      if (tickLabels.length !== ticksX.length) {\n         throw('XAxis: \"tickLabels\" must be a array of the same size as ticks.')\n      }\n\n      // combine all coordinates together\n      grid = [\n         [ticksX, ticksY1],\n         [ticksX, gridYEnd]\n      ];\n\n      axisLine = [\n         [vector([$xLim[0]]), vector([$yLim[0]])],\n         [vector([$xLim[1]]), vector([$yLim[0]])]\n      ]\n\n      tickCoords = [\n         [ticksX, ticksY2],\n         [ticksX, ticksY1]\n      ];\n\n      tfCoords = [\n         [null, null],\n         [[$xLim[1]], [ticksY1.v[tickNum - 1] - 1.5 * dY]],\n      ];\n   }\n</script>\n\n{#if $isOk && axisLine.length > 0}\n<Axis\n   className=\"mdaplot__xaxis\" pos={1}\n   {lineColor} {gridColor} {textColor} {showGrid} {grid} {axisLine}\n   {tickCoords} {tickLabels} {tfCoords} {tickFactor} {las}\n/>\n{/if}","<script>\n   /****************************************************\n   * Y-Axis                                            *\n   * --------------------                              *\n   * shows y-axis and its elements (ticks, grid, etc.) *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Vector, vector } from 'mdatools/arrays';\n   import { Colors } from '../Colors.js';\n   import { getAxisTicks, getTickLabels } from '../Utils.js';\n   import Axis from './Axis.svelte';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let slot = 'yaxis';                // slot the component must be placed in (must be \"yaxis\")\n   export let ticks = undefined;             // vector with numeric tick positions (by default is computed automatically)\n   export let tickLabels = undefined;        // vector with labels for each tick (by default tick values will be used)\n   export let showGrid = false;              // logical, show or not grid lines\n   export let las = 1;                       // orientation of tick labels (1 - horizontal, 2 - vertical)\n\n   export let lineColor = Colors.DARKGRAY;   // color of axis and tick lines\n   export let gridColor = Colors.MIDDLEGRAY; // color og grid lines\n   export let textColor = Colors.DARKGRAY;   // color of text tick labels\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // sanity checks of input parameters\n   if (slot !== 'yaxis') {\n      throw('Component YAxis must have \"slot=\\'yaxis\\'\" attribute.');\n   }\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n\n   // get reactive variables needed to compute coordinates\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n   const tX = axes.tX;\n\n   // prepare variables for coordinates\n   let grid = [];\n   let axisLine = [];\n   let tickCoords = [];\n   let tfCoords = [];\n   let tickFactor = 0;\n\n   // compute tick x-coordinates\n   $: if ($isOk) {\n\n      // compute x-coordinates of the ticks or take the ones manually specified by user\n      const ticksY = getAxisTicks(ticks, $yLim, axes.TICK_NUM[$scale], true);\n      const tickNum = ticksY.length;\n\n      // compute tick y-coordinates (up and bottom)\n      const dX = axes.invTransform([axes.TICK_SIZE[$scale]], $tX.objects)[0];\n      const ticksX1 = Vector.fill($xLim[0], tickNum)\n      const ticksX2 = ticksX1.add(dX)\n\n      // coordinates for the ends of grid\n      const gridXEnd = Vector.fill($xLim[1], tickNum);\n\n      // tick labels and tick factor\n      if (ticks === undefined || tickLabels === undefined) {\n         [tickFactor, tickLabels] = getTickLabels(ticksY.v)\n      }\n\n      if (tickLabels.length !== ticksY.length) {\n         throw('YAxis: \"tickLabels\" must be a array of the same size as ticks.')\n      }\n\n      // combine all coordinates together\n      grid = [\n         [ticksX1, ticksY],\n         [gridXEnd, ticksY]\n      ];\n\n      axisLine = [\n         [vector([$xLim[0]]), vector([$yLim[0]])],\n         [vector([$xLim[0]]), vector([$yLim[1]])]\n      ]\n\n      tickCoords = [\n         [ticksX1, ticksY],\n         [ticksX2, ticksY]\n      ];\n\n      tfCoords = [\n         [[], []],\n         [[ticksX1.v[tickNum - 1]], [$yLim[1]]],\n      ];\n   }\n</script>\n\n{#if $isOk && axisLine.length > 0}\n<Axis\n   className=\"mdaplot__yaxis\" pos={4}\n   {lineColor} {gridColor} {textColor} {showGrid} {grid} {axisLine}\n   {tickCoords} {tickLabels} {tfCoords} {tickFactor} {las}\n/>\n{/if}","<script>\n   /****************************************************\n   * Box                                               *\n   * --------------------                              *\n   * shows border box around axes                      *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Colors } from '../Colors';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let slot;  // slot name, must be \"box\"\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // check that the box is located in a correct slot\n   if (slot !== 'box') {\n      throw('Component Box must have \\'slot=\"box\"\\' attribute.')\n   }\n\n   // box style\n   const rectStyleStr = `fill:transparent;stroke:${Colors.DARKGRAY};stroke-width:1px;`;\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const isOk = axes.isOk;\n   const tX = axes.tX;\n   const tY = axes.tY;\n\n   // reactive variables for coordinates of box points in pixels\n   $: xx = $isOk ? axes.transform($xLim, $tX.coords) : undefined;\n   $: yy = $isOk ? axes.transform($yLim, $tY.coords) : undefined;\n\n</script>\n\n{#if $isOk}\n   <g style=\"pointer-events:none\" class=\"mdaplot__axes-box\">\n   <rect x={xx[0]} y={yy[1]} width={xx[1] - xx[0]} height={yy[0] - yy[1]} style={rectStyleStr} />\n   </g>\n{/if}\n\n","<script>\n   /****************************************************\n   * Segments                                          *\n   * --------------------                              *\n   * shows series of line segments                     *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Colors } from '../Colors';\n   import { checkCoords } from '../Utils';\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n\texport let xStart;                        // vector or array with x-coordinates of starting points\n   export let xEnd;                          // vector or array with x-coordinates of end points\n   export let yStart;                        // vector or array with y-coordinates of starting points\n   export let yEnd;                          // vector or array with y-coordinates of end points\n   export let lineColor = Colors.PRIMARY;    // color of segment lines\n   export let lineType = 1;                  // type of segment lines (1 - solid, 2 - dashed, 3 - dotted, 4 - dashdot)\n   export let lineWidth = 1;                 // width (thickness) of segment lines\n   export let className = 'series_seg';      // CSS class name of the SVG group\n   export let title = '';                    // title of the segment series (reserved for future use)\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n   const tX = axes.tX;\n   const tY = axes.tY;\n\n   let x1, x2, y1, y2 = undefined;\n   $: {\n      if ($isOk) {\n\n         x1 = axes.transform(checkCoords(xStart, 'Segments'), $tX.coords);\n         y1 = axes.transform(checkCoords(yStart, 'Segments'), $tY.coords);\n         x2 = axes.transform(checkCoords(xEnd, 'Segments'), $tX.coords);\n         y2 = axes.transform(checkCoords(yEnd, 'Segments'), $tY.coords);\n\n         const n = x1.length;\n         if (x2.length !== n || y1.length !== n || y2.length !== n) {\n            throw Error('Segments: parameters \"xStart\", \"yStart\", \"xEnd\" and \"yEnd\" should have the same length.');\n         }\n      }\n   }\n\n   // reactive variables for coordinates of data points in pixels (and line style)\n   $: lineStyleStr = `stroke:${lineColor};stroke-width: ${lineWidth}px;stroke-dasharray:${axes.LINE_STYLES[$scale][lineType-1]}`;\n</script>\n\n{#if $isOk}\n   <g class=\"series {className}\" title={title} style={lineStyleStr}>\n   {#each x1 as v, i}\n      <line x1={x1[i]} x2={x2[i]} y1={y1[i]} y2={y2[i]} />\n   {/each}\n   </g>\n{/if}\n\n","<script>\n   /****************************************************\n   * TextLabels component                              *\n   * --------------------                              *\n   * shows a series of text labels on the plot         *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Colors } from '../Colors';\n   import { checkCoords } from '../Utils';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n\texport let xValues;                             // vector or array with x-coordinates for each label\n   export let yValues;                             // vector or array with y-coordinates for each label\n   export let labels;                              // array with labels (strings)\n   export let pos = 0;                             // position of labels related to coordinates (middle, bottom, left, top, right)\n   export let faceColor = Colors.PRIMARY_TEXT;     // face color of label symbols\n   export let borderColor = 'transparent';         // border colors of label symbols\n   export let borderWidth = 0;                     // border width of label symbols\n   export let textSize = 1;                        // size of label symbols\n   export let className = 'series_text';           // CSS class name for the labels group\n   export let title = 'series_text';               // title of the labels SVG group\n   export let rotateAngle = 0;                     // angle to rotate labels\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // get axes context and reactive variables needed to compute coordinates\n   const axes = getContext('axes');\n   const scale = axes.scale;\n   const tX = axes.tX;\n   const tY = axes.tY;\n   const isOk = axes.isOk;\n\n   const textAnchors = ['middle', 'middle', 'start', 'middle', 'end'];\n\n   let x, y = undefined;\n   let dx = 0, dy = 0;\n\n   // reactive calculations triggered by changes in coordinates and plot parameters\n   $: if ($isOk) {\n\n      if (typeof labels === 'string' && typeof pos !== 'number' ) {\n         throw Error('TextLabels: parameter \"labels\" is provided as single string, so \"pos\" must be a single number.');\n      }\n\n      x = axes.transform(checkCoords(xValues, 'TextLabels'), $tX.coords);\n      y = axes.transform(checkCoords(yValues, 'TextLabels'), $tY.coords);\n\n      // sanity check for input parameters\n      if (x.length !== y.length) {\n         throw Error('TextLabels: parameters \"xValues\" and \"yValues\" must be vectors of the same length.');\n      }\n\n      if (Array.isArray(labels) && labels.length !== x.length ) {\n         throw Error('TextLabels: number of elements in \"labels\" does not match number of coordinates.');\n      }\n   }\n\n   // reactive calculations triggered by changes in scale\n   $: {\n      const m = axes.LABELS_MARGIN[$scale];\n      dx = [0, 0, m,  0, -m, m];\n      dy = [0, m, 0, -m, 0, m];\n   }\n\n   // styles for the elements\n   $: textStyleStr = `dominant-baseline:middle;fill:${faceColor};stroke-width:${borderWidth}px;stroke:${borderColor};\n      font-size:${textSize}em;`;\n</script>\n\n{#if $isOk && x !== undefined && y !== undefined}\n<g class=\"series {className}\" title={title} style={textStyleStr} >\n\n   {#if typeof labels === 'string'}\n   {#each x as v, i}\n      <text data-id={i} x={x[i]} y={y[i]} dx={dx[pos]} dy={dy[pos]}\n         transform={rotateAngle !== undefined ? `rotate(${rotateAngle}, ${x[i] + dx[pos]}, ${y[i] + dy[pos]})` : ''}\n         text-anchor={textAnchors[pos[i]]}>{@html labels}</text>\n   {/each}\n\n   {:else if (Array.isArray(pos) || ArrayBuffer.isView(pos))}\n   {#each x as v, i}\n      <text data-id={i} x={x[i]} y={y[i]} dx={dx[pos[i]]} dy={dy[pos[i]]} text-anchor={textAnchors[pos[i]]}>{@html labels[i]}</text>\n   {/each}\n\n   {:else}\n   {#each x as v, i}\n      <text data-id={i} x={x[i]} y={y[i]} dx={dx[pos]} dy={dy[pos]} text-anchor={textAnchors[pos]}>{@html labels[i]}</text>\n   {/each}\n   {/if}\n</g>\n{/if}\n\n<style>\ntext, text > :global(tspan) {\n   dominant-baseline: middle;\n   text-anchor: middle;\n   cursor: default;\n   user-select: none;\n}\n</style>","<script>\n   /****************************************************\n   * Points                                            *\n   * --------------------                              *\n   * shows series of points/markers on a plot          *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Colors } from '../Colors';\n   import { checkCoords } from '../Utils';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n\texport let xValues;                          // array of vector with x-coordinates of points\n   export let yValues;                          // array of vector with y-coordinates of points\n   export let marker = 1                        // index for point symbol (from 1 to 8): \"●\", \"◼\", \"▲\", \"▼\", \"⬥\", \"＋\", \"*\", \"✕\"\n   export let faceColor = 'transparent';        // face (fill) color of the points\n   export let borderColor = Colors.PRIMARY;     // border color of the points\n   export let borderWidth = 1;                  // width (thickness) of the points\n   export let markerSize = 1;                   // size of the marker symbols\n   export let title = '';                       // title of the point series - required for handling mouse click events\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // get axes context and adjust x margins\n   const axes = getContext('axes');\n   const tX = axes.tX;\n   const tY = axes.tY;\n   const isOk = axes.isOk;\n\n   let x, y, markerSymbol;\n\n   // reactive calculations triggered by changes in coordinates and plot parameters\n   $: if ($isOk) {\n\n      if (typeof(marker) !== \"number\" || marker < 1 || marker > axes.MARKER_SYMBOLS.length) {\n         throw Error(`Points: parameter \"marker\" must be a number from 1 to ${axes.MARKER_SYMBOLS.length}.`);\n      }\n\n      markerSymbol = axes.MARKER_SYMBOLS[marker - 1];\n\n\n      x = axes.transform(checkCoords(xValues, 'Points'), $tX.coords);\n      y = axes.transform(checkCoords(yValues, 'Points'), $tY.coords);\n\n      // sanity check for input parameters\n      if (x.length !== y.length) {\n         throw Error('Points: parameters \"xValues\" and \"yValues\" must be vectors of the same length.')\n      }\n   }\n\n\n   // styles for the elements\n   $: textStyleStr = `dominant-baseline:middle;fill:${faceColor};stroke-width:${borderWidth}px;stroke:${borderColor};\n      font-size:${markerSize}em; text-anchor:middle;cursor:default;user-select:none;`;\n</script>\n\n{#if $isOk && x !== undefined && y !== undefined}\n<g class=\"series series_points\" title={title} style={textStyleStr} >\n   {#each x as v, i}\n      <text x={x[i]} y={y[i]}>{markerSymbol}</text>\n   {/each}\n</g>\n{/if}\n\n<style>\ntext, text > :global(tspan) {\n   dominant-baseline: middle;\n   text-anchor: middle;\n   cursor: default;\n   user-select: none;\n}\n</style>","<script>\n   /****************************************************\n   * Lines                                             *\n   * --------------------                              *\n   * shows lines connected sequence of points          *\n   *****************************************************/\n\n   import { getContext } from 'svelte';\n   import { Colors } from '../Colors';\n   import { val2p } from '../Utils';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n\texport let xValues;                       // vector or array with x-coordinates of the points\n   export let yValues;                       // vector or array with y-coordinates of the points\n   export let lineWidth = 1;                 // width (thickness) of the lines\n   export let lineColor = Colors.PRIMARY;    // color of the lines\n   export let lineType = 1;                  // type of the lines (1 - solid, 2 - dashed, 3 - dotted, 4 - dashdot)\n   export let title = '';                    // title of the bar series (reserved for future use)\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   // get axes context\n   const axes = getContext('axes');\n\n   const scale = axes.scale;\n   const isOk = axes.isOk;\n   const tX = axes.tX;\n   const tY = axes.tY;\n\n   // compute polynomial coordinates as string\n   $: p = $isOk ? val2p(xValues, yValues, $tX, $tY, axes) : undefined;\n\n   // reactive variables for coordinates of data points in pixels\n   $: lineStyleStr = `fill:transparent;stroke:${lineColor};stroke-width: ${lineWidth}px; stroke-dasharray:${axes.LINE_STYLES[$scale][lineType-1]}`;\n</script>\n\n{#if $isOk && p !== undefined}\n   <g class=\"series series_line\" style={lineStyleStr} title={title}>\n      <polyline class=\"line\" points={p}/>\n   </g>\n{/if}\n\n","<script>\n   /****************************************************\n   * Legend                                            *\n   * --------------------                              *\n   * shows legend for plot components                  *\n   *****************************************************/\n\n   import { mean } from 'mdatools/stat';\n   import { getContext } from 'svelte';\n   import { Colors } from '../Colors';\n\n\n   /*****************************************/\n   /* Input parameters                      */\n   /*****************************************/\n\n   export let items;                 // array with text labels for each legend element\n\texport let position = \"topleft\";  // position of the legend (\"topleft\", \"top\", \"topright\", \"right\", \"bottomright\", etc).\n\n\n   /*****************************************/\n   /* Component code                        */\n   /*****************************************/\n\n   const axes = getContext('axes');\n   const scale = axes.scale;\n   const xLim = axes.xLim;\n   const yLim = axes.yLim;\n   const tX = axes.tX;\n   const tY = axes.tY;\n   const isOk = axes.isOk;\n\n\n   /**\n    * Computes width of text element for given font.\n    *\n    * @param {string} text - string with text\n    * @param {string} font - font name and size, e.g. '12px Arial'\n    *\n    * @return {number} size of element in pixels\n    */\n   function getTextWidth(text, font) {\n      const element = document.createElement('canvas');\n      const context = element.getContext('2d');\n      context.font = font;\n      return context.measureText(text).width;\n   }\n\n   /**\n    * Compute size of main legend elements.\n    *\n    * @param {Array} items - array of legend items and their properties.\n    * @param {number} fontSize - font size of a legend element.\n    * @param {string} position - position of the legend.\n    *\n    * @return {Array} array with height and width og graphical part of legend item, padding size,\n    * height and width of text labels (all in pixels).\n    */\n   function getLegendSize(items, fontSize, position)  {\n\n      // compute size of graphical elements\n      const elHeight = fontSize;       // height of legend element without padding\n      const elPadding = elHeight / 4;  // top and bottom padding\n      const elWidth = elHeight * 1.5;  // width of legend element without padding\n\n      // compute size of text label elements\n      // TODO: implement one row legend if position is \"top\" or \"bottom\"\n      const lbHeight = elHeight;\n      let lbWidth = 0;\n      for (let i = 0; i < items.length; i++) {\n         const w = getTextWidth('  ' + items[i].label + '  ', fontSize + 'px Arial');\n         lbWidth = w > lbWidth ? w : lbWidth;\n      }\n\n      return [elHeight, elWidth, elPadding, lbHeight, lbWidth];\n   }\n\n   // reactive expression to compute all sizes and coordinates\n   let left, top, elHeight, elWidth, elPadding, lbHeight, lbWidth, legendHeight, legendWidth, fontSize;\n   $: if ($isOk) {\n\n      fontSize = axes.LEGEND_FONT_SIZE[$scale];\n\n      // compute size of elements\n      [elHeight, elWidth, elPadding, lbHeight, lbWidth] = getLegendSize(items, fontSize, position);\n\n      // compute size of whole legend box\n      legendHeight = (elHeight + 2 * elPadding) * items.length;\n      legendWidth = (elWidth + 2 * elPadding + lbWidth);\n\n      // compute coordinates of top left corner of the legend box\n      const xLimPx = axes.transform($xLim, $tX.coords);\n      left = position.includes(\"left\") ? xLimPx[0] + axes.TICK_SIZE[$scale] :\n          position.includes(\"right\") ? xLimPx[1] - legendWidth - axes.TICK_SIZE[$scale] :\n          mean(xLimPx) - legendWidth/2;\n\n      const yLimPx = axes.transform($yLim, $tY.coords);\n      top = position.includes(\"top\") ? yLimPx[1] + axes.TICK_SIZE[$scale] :\n          position.includes(\"bottom\") ? yLimPx[0] - legendHeight - axes.TICK_SIZE[$scale] :\n          mean(yLimPx) - legendHeight/2;\n   }\n</script>\n\n{#if $isOk }\n\n<!-- outer legend box, background and frame -->\n<svg x=\"{left}px\" y=\"{top}px\" height=\"{legendHeight}px\" width=\"{legendWidth}\">\n<rect height=\"100%\" width=\"100%\" style=\"fill:white;stroke:{Colors.MIDDLEGRAY};\"></rect>\n\n{#each items as item, i}\n\n<!-- individual legend item -->\n<svg x=\"{0}px\" y=\"{i * (elHeight + 2 * elPadding)}px\" width=\"{legendWidth}px\" height=\"{elHeight + 2 * elPadding}px\">\n\n   <!-- line -->\n   {#if item.lineType && item.lineType > 0 && item.lineType <= 4}\n   <line x1={elPadding} x2={elPadding + elWidth} y1={(elHeight + elPadding * 2)/2} y2={(elHeight + elPadding * 2)/2} style={`\n      stroke:${item.lineColor ? item.lineColor : Colors.PRIMARY};\n      stroke-width: ${item.lineWidth ? item.lineWidth : 1}px;\n      stroke-dasharray:${axes.LINE_STYLES[$scale][item.lineType - 1]}\n   `}/>\n   {/if}\n\n   <!-- marker -->\n   {#if item.marker && item.marker > 0 && item.marker < axes.MARKER_SYMBOLS.length}\n   <text x=\"{(elWidth + 2 * elPadding)/2}px\" y=\"{(elHeight + 2 * elPadding)/2}px\"\n      dominant-baseline=\"middle\"\n      style={`\n         fill:${item.faceColor ? item.faceColor : \"transparent\"};\n         stroke-width:${item.borderWidth ? item.borderWidth : 1}px;\n         stroke:${item.borderColor ? item.borderColor : Colors.PRIMARY};\n         font-size:${fontSize}px;\n         text-anchor:middle;`}\n   >{axes.MARKER_SYMBOLS[item.marker - 1]}</text>\n   {/if}\n\n\n\n   <!-- text -->\n   <text x=\"{elWidth + elPadding * 3}px\" y=\"{elPadding}px\"\n      dominant-baseline=\"hanging\"\n      style={`text-anchor:start;fill:${Colors.LEGEND};font-size:${fontSize}px`};\n   >{@html '&nbsp;' + item.label}</text>\n\n</svg>\n{/each}\n</svg>\n{/if}\n","<script>\n   import { Legend } from 'svelte-plots-basic/2d';\n\n   export let colors;\n   export let show = 'both';\n\n   $: lsin = {label:\"sin(x)\", marker: 2, borderColor: \"transparent\", faceColor: colors.sin};\n   $: lcos = {label:\"cos(x)\", marker: 2, borderColor: \"transparent\", faceColor: colors.cos};\n   $: legendItems = show === 'both' ? [lsin, lcos] : show === 'sin' ? [lsin] : [lcos];\n</script>\n\n{#if legendItems}\n<Legend items={legendItems} />\n{/if}","<script>\n   import { Vector } from 'mdatools/arrays';\n   import {Axes, XAxis, YAxis, Lines, Box, Points, Segments, TextLabels} from 'svelte-plots-basic/2d';\n   import  Legend  from './AppPlotLegend.svelte';\n\n   export let angle;\n   export let colors;\n   export let show = 'both';\n\n   let x = Vector.seq(0, 360, 0.1);\n   let sinx = x.apply(v => Math.sin(v / 180 * Math.PI));\n   let cosx = x.apply(v => Math.cos(v / 180 * Math.PI));\n\n   $: asin = Math.sin(angle / 180 * Math.PI);\n   $: acos = Math.cos(angle / 180 * Math.PI);\n</script>\n\n<Axes limX={[-1.35, 1.35]} limY={[-1.35, 1.35]} xLabel=\"cos(x)\" yLabel=\"sin(x)\" margins={[0.75, 0.75, 0.5, 0.5]}>\n\n   <!-- the circle and axes -->\n   <Segments xStart={[-2]} xEnd={[2]} yStart={[0]} yEnd={[0]} lineColor=\"#00000030\" />\n   <Segments yStart={[-2]} yEnd={[2]} xStart={[0]} xEnd={[0]} lineColor=\"#00000030\" />\n   <Lines xValues={cosx} yValues={sinx} lineColor=\"#00000080\"/>\n\n   <!-- radius, coordinates and point -->\n   <Segments xStart={[0]} yStart={[0]} xEnd={[acos]} yEnd={[asin]} lineColor=\"#000000\"/>\n   <Segments xStart={[acos]} yStart={[asin]} xEnd={[acos]} yEnd={[-2]} lineWidth={1} lineType={3} lineColor=\"#00000080\"/>\n   <Segments xStart={[acos]} yStart={[asin]} xEnd={[-2]} yEnd={[asin]} lineWidth={1} lineType={3} lineColor=\"#00000080\"/>\n   <Points xValues={[acos]} yValues={[asin]} faceColor=\"#000000\" borderColor=\"#000000\" />\n\n   <!-- cos -->\n   {#if show === 'cos' || show === 'both'}\n   <Segments xStart={[0]} yStart={[0]} xEnd={[acos]} yEnd={[0]} lineWidth={1.5} lineColor={colors.cos}/>\n   <TextLabels xValues={[acos/2]} yValues={[0]} labels={[acos.toFixed(3)]} pos={1} faceColor={colors.cos}/>\n   {/if}\n\n   <!-- sin -->\n   {#if show === 'sin' || show === 'both'}\n   <Segments xStart={[acos]} yStart={[0]} xEnd={[acos]} yEnd={[asin]} lineWidth={1.5} lineColor={colors.sin} />\n   <TextLabels xValues={[acos + 0.07]} yValues={[asin/2]} labels={[asin.toFixed(3)]} pos={2} faceColor={colors.sin} />\n   {/if}\n\n   <Legend {colors} {show} />\n\n   <XAxis slot=\"xaxis\" showGrid={true}/>\n   <YAxis slot=\"yaxis\" showGrid={true}/>\n   <Box slot=\"box\"/>\n\n</Axes>\n","<script>\n   import { Vector } from 'mdatools/arrays';\n   import {Axes, XAxis, YAxis, Lines, Box, Points, Segments, TextLabels} from 'svelte-plots-basic/2d';\n   import  Legend  from './AppPlotLegend.svelte';\n\n   export let angle;\n   export let colors;\n   export let show = 'both';\n\n   let x = Vector.seq(-60, 420, 0.1);\n   let sinx = x.apply(v => Math.sin(v / 180 * Math.PI));\n   let cosx = x.apply(v => Math.cos(v / 180 * Math.PI));\n\n   $: asin = Math.sin(angle / 180 * Math.PI);\n   $: acos = Math.cos(angle / 180 * Math.PI);\n</script>\n\n<Axes limX={[-60, 420]} limY={[-1.2, 1.5]} yLabel=\" \" xLabel=\"Angle, degrees\" margins={[1, 1, 0.5, 0.5]}>\n\n   <!-- y = 0 and x = angle lines -->\n   <Segments xStart={[-60]} xEnd={[420]} yStart={[0]} yEnd={[0]} lineColor=\"#00000060\" />\n   <Segments xStart={[angle]}  xEnd={[angle]} yStart={[-1.2]} yEnd={[1.5]} lineColor=\"#00000060\" lineType={3}/>\n   <TextLabels xValues={[angle + 20]} yValues={[1.4]} labels={[\"angle = \" + angle + \"º\"]} pos={2}/>\n\n   {#if show === 'sin' || show === 'both'}\n   <Lines xValues={x} yValues={sinx} lineWidth={2} lineColor={colors.sin + '60'}/>\n   <Segments xStart={[-60]}  xEnd={[angle]} yStart={[asin]} yEnd={[asin]} lineColor={colors.sin + '60'} lineType={1}/>\n   <Points xValues={[angle]} yValues={[asin]} faceColor={colors.sin} borderColor={colors.sin} />\n   <TextLabels xValues={[10]} yValues={[asin]} labels={[`sin(${angle}º) = ${asin.toFixed(3)}`]} pos={[3]} faceColor={colors.sin}/>\n   {/if}\n\n   {#if show === 'cos' || show === 'both'}\n   <Lines xValues={x} yValues={cosx} lineWidth={2} lineColor={colors.cos + '60'}/>\n   <Segments xStart={[-60]}  xEnd={[angle]} yStart={[acos]} yEnd={[acos]} lineColor={colors.cos + '60'} lineType={1}/>\n   <Points xValues={[angle]} yValues={[acos]} faceColor={colors.cos} borderColor={colors.cos} />\n   <TextLabels xValues={[10]} yValues={[acos]} labels={[`cos(${angle}º) = ${acos.toFixed(3)}`]} pos={[3]} faceColor={colors.cos}/>\n   {/if}\n\n\n   <Legend {show} {colors} />\n\n   <XAxis slot=\"xaxis\" showGrid={true}/>\n   <YAxis slot=\"yaxis\" showGrid={true}/>\n   <Box slot=\"box\"/>\n</Axes>\n","<script>\n   // shared components - controls\n   import AppControlArea from './AppControlArea.svelte';\n   import AppControlRange from './AppControlRange.svelte';\n   import AppControlSwitch from './AppControlSwitch.svelte';\n\n   import PlotCircle from './AppPlotCircle.svelte';\n   import PlotFunction from './AppPlotFunction.svelte';\n\n\n   const colors = { sin: \"#ff0000\", cos: \"#0000ff\"};\n   let show = 'both';\n   let angle = 60;\n   $: angleRad = angle / 180 * Math.PI;\n</script>\n\n<div class=\"app-layout\">\n\n      <div class=\"app-plot1-area\">\n         <PlotFunction {angle} {colors} {show} />\n      </div>\n\n      <div class=\"app-plot2-area\">\n         <PlotCircle {angle} {colors} {show} />\n      </div>\n\n      <div class=\"app-controls-area\">\n         <AppControlArea>\n            <AppControlRange label=\"Angle\" bind:value={angle} min={0} max={360} step={1} />\n            <AppControlSwitch label=\"Show\" bind:value={show} options={['both', 'sin', 'cos']} />\n         </AppControlArea>\n         <table>\n            <tr>\n               <td>angle, degrees</td>\n               <td>{angle}</td>\n            </tr>\n            <tr>\n               <td>angle, radians</td>\n               <td>{(angleRad).toFixed(5)}</td>\n            </tr>\n            <tr>\n               <td>sin(a)</td>\n               <td>{Math.sin(angleRad).toFixed(3)}</td>\n            </tr>\n            <tr>\n               <td>cos(a)</td>\n               <td>{Math.cos(angleRad).toFixed(3)}</td>\n            </tr>\n            <tr>\n               <td>sin<sup>2</sup>(a)</td>\n               <td>{(Math.sin(angleRad)**2).toFixed(3)}</td>\n            </tr>\n            <tr>\n               <td>cos<sup>2</sup>(a)</td>\n               <td>{(Math.cos(angleRad)**2).toFixed(3)}</td>\n            </tr>\n            <tr>\n               <td>sin<sup>2</sup>(a) + cos<sup>2</sup>(a)</td>\n               <td>{(Math.sin(angleRad)**2 + Math.cos(angleRad)**2).toFixed(3)}</td>\n            </tr>\n         </table>\n      </div>\n\n</div>\n\n<style>\n\n.app-layout {\n   font-family: Helvetica, Arial, sans-serif;\n   width: 100%;\n   height: 100%;\n   box-sizing: border-box;\n   padding: 1em;\n   display: grid;\n   grid-template-areas:\n      \"plot1 plot2\"\n      \"plot1 controls\"\n      \"plot1 .\";\n   grid-template-columns: 1fr 500px;\n   grid-template-rows: 475px min-content 1fr;\n\n}\n\n.app-plot1-area {\n   box-sizing: border-box;\n   grid-area: plot1;\n   padding: 0;\n   margin: 0;\n   position: relative;\n   top: 0;\n   bottom: 0;\n}\n\n.app-plot2-area {\n   grid-area: plot2;\n   padding: 1em;\n}\n\n.app-controls-area {\n   grid-area: controls;\n   padding: 1em;\n}\n\ntable {\n   width: 100%;\n   box-sizing: border-box;\n   margin: 0;\n   padding: 0;\n   margin-top: 1em;\n   border-collapse: collapse;\n}\n\ntable td {\n   padding: 0.35em;\n   color: #606060;\n}\n\ntable tr td:last-child {\n   text-align: right;\n   padding-right: 1em;\n}\n\ntable tr:hover td {\n   color: #222;\n   background-color: #ffffe0;\n}\n\ntable tr:hover td:first-child {\n   font-weight: bold;\n}\n\n\n</style>","import App from './App.svelte';\n\nconst app = new App({\n\ttarget: document.getElementById(\"graasta-app-container\"),\n});\n\nexport default app;"],"names":["noop","assign","tar","src","k","run","fn","blank_object","run_all","fns","is_function","thing","safe_not_equal","a","b","is_empty","obj","subscribe","store","callbacks","unsub","component_subscribe","component","callback","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","get_slot_changes","dirty","lets","merged","len","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","get_all_dirty_from_scope","length","append","target","node","insert","anchor","detach","destroy_each","iterations","detaching","element","name","svg_element","text","data","space","empty","listen","event","handler","options","prevent_default","attr","attribute","value","to_number","children","set_data","set_input_value","input","set_style","key","important","toggle_class","toggle","custom_event","type","detail","bubbles","cancelable","e","current_component","set_current_component","get_current_component","onMount","onDestroy","createEventDispatcher","setContext","context","getContext","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","update_scheduled","schedule_update","flush","add_render_callback","add_flush_callback","seen_callbacks","flushidx","saved_component","update","$$","flush_render_callbacks","filtered","targets","c","outroing","outros","group_outros","check_outros","transition_in","block","local","transition_out","destroy_block","lookup","update_keyed_each","old_blocks","get_key","dynamic","list","destroy","create_each_block","next","get_context","o","n","old_indexes","new_blocks","new_lookup","deltas","updates","child_ctx","will_move","did_move","new_block","old_block","new_key","old_key","bind","index","create_component","mount_component","customElement","fragment","after_update","new_on_destroy","destroy_component","make_dirty","init","instance","create_fragment","not_equal","props","append_styles","parent_component","ready","ret","rest","nodes","SvelteComponent","$$props","legend_1","div","if_block0","create_if_block_1","create_if_block","fieldset","errormsg","legend","div1","div0","label_1","id","label","disable","hidden","span","t1","t1_value","min","max","decNum","step","dispatch","sliderElement","sliderContainer","isDragging","computeValue","p","tmpValue","getRelativePosition","sliderRect","parentRect","minX","maxX","startChanging","width","cancelChanging","stopChanging","changingByWheel","newValue","$$invalidate","changing","$$value","t","t_value","click_handler","option","keydown_handler","diff","x","isvector","out","Vector","mean","sum","s","isindex","minind","outind","maxind","runif","rnorm","mu","sigma","isnumber","vector","values","_Vector","fun","Index","_shuffle","decreasing","_sort","_sortind","_rep","_repeach","ind","r","start","end","_dot","_opvv","_opvn","args","l","acc","cur","by","_seq","v","__publicField","_Index","classRef","j","v1","v2","xv","yv","nrx","ncx","nry","ncy","nrows","ncols","ninner","yc","outc","yci","xr","y","subscriber_queue","writable","stop","subscribers","set","new_value","run_queue","subscriber","invalidate","getTickLabels","ticks","tickFactor","checkCoords","source","val2p","tX","tY","axes","px","py","getAxisTicks","lim","maxTickNum","round","delta","range","niceNum","tickSpacing","tickMin","tickMax","localRange","exponent","fraction","niceFraction","roundCoords","getScale","height","text_1","text_1_transform_value","text_1_y_value","create_if_block_3","create_if_block_2","rect","rect_x_value","rect_y_value","rect_width_value","rect_height_value","svg1","g0","svg0","defs","clipPath","g1","current","limX","limY","title","xLabel","yLabel","margins","AXES_MARGIN_FACTORS","TICK_NUM","TICK_SIZE","LEGEND_FONT_SIZE","PLOT_FONT_SIZE","LABELS_MARGIN","LINE_STYLES","MARKER_SYMBOLS","clipPathID","plotElement","left","bottom","top","dispatchClickEvent","eventName","el","handleClick","transform","tA","$isOk","invTransform","scale","isOk","xLim","yLim","ro","entries","entry","pcr","scl","m","pxMargins","$scale","$yLim","$xLim","cpx","$tX","cpy","$tY","fontSize","lblStyleStr","Colors","g","line","line_x__value","line_x__value_1","line_y__value","line_y__value_1","if_block","lineCoords","lineColor","lineType","lineWidth","className","x1","x2","y1","y2","lineStyleStr","raw_value","text_1_x_value","text_1_dx_value","text_1_dy_value","tickCoords","textColor","tickLabels","pos","las","dx","dy","textAnchor","textStyleStr","getTickFactorLabel","axisticklabels_changes","if_block1","if_block2","tf","showGrid","grid","axisLine","tfCoords","gridColor","ticksX","tickNum","dY","ticksY1","ticksY2","gridYEnd","ticksY","dX","ticksX1","ticksX2","gridXEnd","rectStyleStr","xx","yy","xStart","xEnd","yStart","yEnd","text_1_text_anchor_value","xValues","yValues","labels","faceColor","borderColor","borderWidth","textSize","rotateAngle","textAnchors","marker","markerSize","markerSymbol","polyline","svg","svg_y_value","getTextWidth","font","getLegendSize","items","position","elHeight","elPadding","elWidth","lbHeight","lbWidth","w","legendHeight","legendWidth","xLimPx","yLimPx","colors","show","lsin","lcos","legendItems","segments_changes","textlabels_changes","angle","sinx","cosx","asin","acos","points_changes","t13_value","t17_value","t37_value","div3","div2","table","tr0","td0","td1","tr1","td2","td3","tr2","td4","td5","tr3","td6","td7","tr4","td8","td9","tr5","td10","td11","tr6","td12","td13","t9","t9_value","t13","t17","t23","t23_value","t29","t29_value","t37","angleRad","App"],"mappings":";gCAAA,SAASA,GAAO,CAAG,CAEnB,SAASC,GAAOC,EAAKC,EAAK,CAEtB,UAAWC,KAAKD,EACZD,EAAIE,GAAKD,EAAIC,GACjB,OAAOF,CACX,CAWA,SAASG,GAAIC,EAAI,CACb,OAAOA,EAAE,CACb,CACA,SAASC,IAAe,CACpB,OAAO,OAAO,OAAO,IAAI,CAC7B,CACA,SAASC,GAAQC,EAAK,CAClBA,EAAI,QAAQJ,EAAG,CACnB,CACA,SAASK,GAAYC,EAAO,CACxB,OAAO,OAAOA,GAAU,UAC5B,CACA,SAASC,EAAeC,EAAGC,EAAG,CAC1B,OAAOD,GAAKA,EAAIC,GAAKA,EAAID,IAAMC,GAAOD,GAAK,OAAOA,GAAM,UAAa,OAAOA,GAAM,UACtF,CAYA,SAASE,GAASC,EAAK,CACnB,OAAO,OAAO,KAAKA,CAAG,EAAE,SAAW,CACvC,CAMA,SAASC,GAAUC,KAAUC,EAAW,CACpC,GAAID,GAAS,KACT,OAAOlB,EAEX,MAAMoB,EAAQF,EAAM,UAAU,GAAGC,CAAS,EAC1C,OAAOC,EAAM,YAAc,IAAMA,EAAM,YAAW,EAAKA,CAC3D,CAMA,SAASC,EAAoBC,EAAWJ,EAAOK,EAAU,CACrDD,EAAU,GAAG,WAAW,KAAKL,GAAUC,EAAOK,CAAQ,CAAC,CAC3D,CACA,SAASC,GAAYC,EAAYC,EAAKC,EAASrB,EAAI,CAC/C,GAAImB,EAAY,CACZ,MAAMG,EAAWC,GAAiBJ,EAAYC,EAAKC,EAASrB,CAAE,EAC9D,OAAOmB,EAAW,GAAGG,CAAQ,CAChC,CACL,CACA,SAASC,GAAiBJ,EAAYC,EAAKC,EAASrB,EAAI,CACpD,OAAOmB,EAAW,IAAMnB,EAClBL,GAAO0B,EAAQ,IAAI,MAAO,EAAEF,EAAW,GAAGnB,EAAGoB,CAAG,CAAC,CAAC,EAClDC,EAAQ,GAClB,CACA,SAASG,GAAiBL,EAAYE,EAASI,EAAOzB,EAAI,CACtD,GAAImB,EAAW,IAAMnB,EAAI,CACrB,MAAM0B,EAAOP,EAAW,GAAGnB,EAAGyB,CAAK,CAAC,EACpC,GAAIJ,EAAQ,QAAU,OAClB,OAAOK,EAEX,GAAI,OAAOA,GAAS,SAAU,CAC1B,MAAMC,EAAS,CAAA,EACTC,EAAM,KAAK,IAAIP,EAAQ,MAAM,OAAQK,EAAK,MAAM,EACtD,QAASG,EAAI,EAAGA,EAAID,EAAKC,GAAK,EAC1BF,EAAOE,GAAKR,EAAQ,MAAMQ,GAAKH,EAAKG,GAExC,OAAOF,CACV,CACD,OAAON,EAAQ,MAAQK,CAC1B,CACD,OAAOL,EAAQ,KACnB,CACA,SAASS,GAAiBC,EAAMC,EAAiBZ,EAAKC,EAASY,EAAcC,EAAqB,CAC9F,GAAID,EAAc,CACd,MAAME,EAAeZ,GAAiBS,EAAiBZ,EAAKC,EAASa,CAAmB,EACxFH,EAAK,EAAEI,EAAcF,CAAY,CACpC,CACL,CAKA,SAASG,GAAyBf,EAAS,CACvC,GAAIA,EAAQ,IAAI,OAAS,GAAI,CACzB,MAAMI,EAAQ,CAAA,EACRY,EAAShB,EAAQ,IAAI,OAAS,GACpC,QAASQ,EAAI,EAAGA,EAAIQ,EAAQR,IACxBJ,EAAMI,GAAK,GAEf,OAAOJ,CACV,CACD,MAAO,EACX,CA4OA,SAASa,EAAOC,EAAQC,EAAM,CAC1BD,EAAO,YAAYC,CAAI,CAC3B,CAoDA,SAASC,EAAOF,EAAQC,EAAME,EAAQ,CAClCH,EAAO,aAAaC,EAAME,GAAU,IAAI,CAC5C,CASA,SAASC,EAAOH,EAAM,CACdA,EAAK,YACLA,EAAK,WAAW,YAAYA,CAAI,CAExC,CACA,SAASI,GAAaC,EAAYC,EAAW,CACzC,QAASjB,EAAI,EAAGA,EAAIgB,EAAW,OAAQhB,GAAK,EACpCgB,EAAWhB,IACXgB,EAAWhB,GAAG,EAAEiB,CAAS,CAErC,CACA,SAASC,EAAQC,EAAM,CACnB,OAAO,SAAS,cAAcA,CAAI,CACtC,CAgBA,SAASC,EAAYD,EAAM,CACvB,OAAO,SAAS,gBAAgB,6BAA8BA,CAAI,CACtE,CACA,SAASE,GAAKC,EAAM,CAChB,OAAO,SAAS,eAAeA,CAAI,CACvC,CACA,SAASC,GAAQ,CACb,OAAOF,GAAK,GAAG,CACnB,CACA,SAASG,GAAQ,CACb,OAAOH,GAAK,EAAE,CAClB,CAIA,SAASI,GAAOd,EAAMe,EAAOC,EAASC,EAAS,CAC3C,OAAAjB,EAAK,iBAAiBe,EAAOC,EAASC,CAAO,EACtC,IAAMjB,EAAK,oBAAoBe,EAAOC,EAASC,CAAO,CACjE,CACA,SAASC,GAAgB1D,EAAI,CACzB,OAAO,SAAUuD,EAAO,CACpB,OAAAA,EAAM,eAAc,EAEbvD,EAAG,KAAK,KAAMuD,CAAK,CAClC,CACA,CA6BA,SAASI,EAAKnB,EAAMoB,EAAWC,EAAO,CAC9BA,GAAS,KACTrB,EAAK,gBAAgBoB,CAAS,EACzBpB,EAAK,aAAaoB,CAAS,IAAMC,GACtCrB,EAAK,aAAaoB,EAAWC,CAAK,CAC1C,CA6GA,SAASC,GAAUD,EAAO,CACtB,OAAOA,IAAU,GAAK,KAAO,CAACA,CAClC,CAQA,SAASE,GAAShB,EAAS,CACvB,OAAO,MAAM,KAAKA,EAAQ,UAAU,CACxC,CA6HA,SAASiB,GAASd,EAAMC,EAAM,CAC1BA,EAAO,GAAKA,EACRD,EAAK,OAASC,IAElBD,EAAK,KAAOC,EAChB,CAeA,SAASc,GAAgBC,EAAOL,EAAO,CACnCK,EAAM,MAAQL,GAAS,KAAO,GAAKA,CACvC,CASA,SAASM,GAAU3B,EAAM4B,EAAKP,EAAOQ,EAAW,CACxCR,GAAS,KACTrB,EAAK,MAAM,eAAe4B,CAAG,EAG7B5B,EAAK,MAAM,YAAY4B,EAAKP,EAAOQ,EAAY,YAAc,EAAE,CAEvE,CAqFA,SAASC,GAAavB,EAASC,EAAMuB,EAAQ,CACzCxB,EAAQ,UAAUwB,EAAS,MAAQ,UAAUvB,CAAI,CACrD,CACA,SAASwB,GAAaC,EAAMC,EAAQ,CAAE,QAAAC,EAAU,GAAO,WAAAC,EAAa,EAAO,EAAG,GAAI,CAC9E,MAAMC,EAAI,SAAS,YAAY,aAAa,EAC5C,OAAAA,EAAE,gBAAgBJ,EAAME,EAASC,EAAYF,CAAM,EAC5CG,CACX,CA4OA,IAAIC,GACJ,SAASC,GAAsB/D,EAAW,CACtC8D,GAAoB9D,CACxB,CACA,SAASgE,IAAwB,CAC7B,GAAI,CAACF,GACD,MAAM,IAAI,MAAM,kDAAkD,EACtE,OAAOA,EACX,CAoBA,SAASG,GAAQjF,EAAI,CACjBgF,GAAuB,EAAC,GAAG,SAAS,KAAKhF,CAAE,CAC/C,CAiBA,SAASkF,GAAUlF,EAAI,CACnBgF,GAAuB,EAAC,GAAG,WAAW,KAAKhF,CAAE,CACjD,CAaA,SAASmF,IAAwB,CAC7B,MAAMnE,EAAYgE,KAClB,MAAO,CAACP,EAAMC,EAAQ,CAAE,WAAAE,EAAa,EAAO,EAAG,KAAO,CAClD,MAAM/D,EAAYG,EAAU,GAAG,UAAUyD,GACzC,GAAI5D,EAAW,CAGX,MAAM0C,EAAQiB,GAAaC,EAAMC,EAAQ,CAAE,WAAAE,CAAU,CAAE,EACvD,OAAA/D,EAAU,MAAK,EAAG,QAAQb,GAAM,CAC5BA,EAAG,KAAKgB,EAAWuC,CAAK,CACxC,CAAa,EACM,CAACA,EAAM,gBACjB,CACD,MAAO,EACf,CACA,CAUA,SAAS6B,GAAWhB,EAAKiB,EAAS,CAC9B,OAAAL,GAAqB,EAAG,GAAG,QAAQ,IAAIZ,EAAKiB,CAAO,EAC5CA,CACX,CAOA,SAASC,GAAWlB,EAAK,CACrB,OAAOY,GAAuB,EAAC,GAAG,QAAQ,IAAIZ,CAAG,CACrD,CA+BA,MAAMmB,GAAmB,CAAA,EAEnBC,GAAoB,CAAA,EAC1B,IAAIC,GAAmB,CAAA,EACvB,MAAMC,GAAkB,CAAA,EAClBC,GAAmC,QAAQ,UACjD,IAAIC,GAAmB,GACvB,SAASC,IAAkB,CAClBD,KACDA,GAAmB,GACnBD,GAAiB,KAAKG,EAAK,EAEnC,CAKA,SAASC,GAAoB/F,EAAI,CAC7ByF,GAAiB,KAAKzF,CAAE,CAC5B,CACA,SAASgG,GAAmBhG,EAAI,CAC5B0F,GAAgB,KAAK1F,CAAE,CAC3B,CAmBA,MAAMiG,GAAiB,IAAI,IAC3B,IAAIC,GAAW,EACf,SAASJ,IAAQ,CAIb,GAAII,KAAa,EACb,OAEJ,MAAMC,EAAkBrB,GACxB,EAAG,CAGC,GAAI,CACA,KAAOoB,GAAWX,GAAiB,QAAQ,CACvC,MAAMvE,EAAYuE,GAAiBW,IACnCA,KACAnB,GAAsB/D,CAAS,EAC/BoF,GAAOpF,EAAU,EAAE,CACtB,CACJ,OACM,EAAP,CAEI,MAAAuE,GAAiB,OAAS,EAC1BW,GAAW,EACL,CACT,CAID,IAHAnB,GAAsB,IAAI,EAC1BQ,GAAiB,OAAS,EAC1BW,GAAW,EACJV,GAAkB,QACrBA,GAAkB,IAAG,IAIzB,QAAS3D,EAAI,EAAGA,EAAI4D,GAAiB,OAAQ5D,GAAK,EAAG,CACjD,MAAMZ,EAAWwE,GAAiB5D,GAC7BoE,GAAe,IAAIhF,CAAQ,IAE5BgF,GAAe,IAAIhF,CAAQ,EAC3BA,IAEP,CACDwE,GAAiB,OAAS,CAClC,OAAaF,GAAiB,QAC1B,KAAOG,GAAgB,QACnBA,GAAgB,IAAG,IAEvBE,GAAmB,GACnBK,GAAe,MAAK,EACpBlB,GAAsBoB,CAAe,CACzC,CACA,SAASC,GAAOC,EAAI,CAChB,GAAIA,EAAG,WAAa,KAAM,CACtBA,EAAG,OAAM,EACTnG,GAAQmG,EAAG,aAAa,EACxB,MAAM5E,EAAQ4E,EAAG,MACjBA,EAAG,MAAQ,CAAC,EAAE,EACdA,EAAG,UAAYA,EAAG,SAAS,EAAEA,EAAG,IAAK5E,CAAK,EAC1C4E,EAAG,aAAa,QAAQN,EAAmB,CAC9C,CACL,CAIA,SAASO,GAAuBnG,EAAK,CACjC,MAAMoG,EAAW,CAAA,EACXC,EAAU,CAAA,EAChBf,GAAiB,QAASgB,GAAMtG,EAAI,QAAQsG,CAAC,IAAM,GAAKF,EAAS,KAAKE,CAAC,EAAID,EAAQ,KAAKC,CAAC,CAAC,EAC1FD,EAAQ,QAASC,GAAMA,EAAG,CAAA,EAC1BhB,GAAmBc,CACvB,CAeA,MAAMG,GAAW,IAAI,IACrB,IAAIC,GACJ,SAASC,IAAe,CACpBD,GAAS,CACL,EAAG,EACH,EAAG,CAAE,EACL,EAAGA,EACX,CACA,CACA,SAASE,IAAe,CACfF,GAAO,GACRzG,GAAQyG,GAAO,CAAC,EAEpBA,GAASA,GAAO,CACpB,CACA,SAASG,EAAcC,EAAOC,EAAO,CAC7BD,GAASA,EAAM,IACfL,GAAS,OAAOK,CAAK,EACrBA,EAAM,EAAEC,CAAK,EAErB,CACA,SAASC,EAAeF,EAAOC,EAAOrE,EAAQ1B,EAAU,CACpD,GAAI8F,GAASA,EAAM,EAAG,CAClB,GAAIL,GAAS,IAAIK,CAAK,EAClB,OACJL,GAAS,IAAIK,CAAK,EAClBJ,GAAO,EAAE,KAAK,IAAM,CAChBD,GAAS,OAAOK,CAAK,EACjB9F,IACI0B,GACAoE,EAAM,EAAE,CAAC,EACb9F,IAEhB,CAAS,EACD8F,EAAM,EAAEC,CAAK,CAChB,MACQ/F,GACLA,GAER,CAwTA,SAASiG,GAAcH,EAAOI,EAAQ,CAClCJ,EAAM,EAAE,CAAC,EACTI,EAAO,OAAOJ,EAAM,GAAG,CAC3B,CAcA,SAASK,GAAkBC,EAAY5F,EAAO6F,EAASC,EAASnG,EAAKoG,EAAML,EAAQ3E,EAAMiF,EAASC,EAAmBC,EAAMC,EAAa,CACpI,IAAIC,EAAIR,EAAW,OACfS,EAAIN,EAAK,OACT3F,EAAIgG,EACR,MAAME,EAAc,CAAA,EACpB,KAAOlG,KACHkG,EAAYV,EAAWxF,GAAG,KAAOA,EACrC,MAAMmG,EAAa,CAAA,EACbC,EAAa,IAAI,IACjBC,EAAS,IAAI,IACbC,EAAU,CAAA,EAEhB,IADAtG,EAAIiG,EACGjG,KAAK,CACR,MAAMuG,EAAYR,EAAYxG,EAAKoG,EAAM3F,CAAC,EACpCuC,EAAMkD,EAAQc,CAAS,EAC7B,IAAIrB,EAAQI,EAAO,IAAI/C,CAAG,EACrB2C,EAIIQ,GAELY,EAAQ,KAAK,IAAMpB,EAAM,EAAEqB,EAAW3G,CAAK,CAAC,GAL5CsF,EAAQW,EAAkBtD,EAAKgE,CAAS,EACxCrB,EAAM,EAAC,GAMXkB,EAAW,IAAI7D,EAAK4D,EAAWnG,GAAKkF,CAAK,EACrC3C,KAAO2D,GACPG,EAAO,IAAI9D,EAAK,KAAK,IAAIvC,EAAIkG,EAAY3D,EAAI,CAAC,CACrD,CACD,MAAMiE,EAAY,IAAI,IAChBC,EAAW,IAAI,IACrB,SAAS7F,EAAOsE,EAAO,CACnBD,EAAcC,EAAO,CAAC,EACtBA,EAAM,EAAEvE,EAAMmF,CAAI,EAClBR,EAAO,IAAIJ,EAAM,IAAKA,CAAK,EAC3BY,EAAOZ,EAAM,MACbe,GACH,CACD,KAAOD,GAAKC,GAAG,CACX,MAAMS,EAAYP,EAAWF,EAAI,GAC3BU,EAAYnB,EAAWQ,EAAI,GAC3BY,EAAUF,EAAU,IACpBG,EAAUF,EAAU,IACtBD,IAAcC,GAEdb,EAAOY,EAAU,MACjBV,IACAC,KAEMG,EAAW,IAAIS,CAAO,EAKvB,CAACvB,EAAO,IAAIsB,CAAO,GAAKJ,EAAU,IAAII,CAAO,EAClDhG,EAAO8F,CAAS,EAEXD,EAAS,IAAII,CAAO,EACzBb,IAEKK,EAAO,IAAIO,CAAO,EAAIP,EAAO,IAAIQ,CAAO,GAC7CJ,EAAS,IAAIG,CAAO,EACpBhG,EAAO8F,CAAS,IAGhBF,EAAU,IAAIK,CAAO,EACrBb,MAfAJ,EAAQe,EAAWrB,CAAM,EACzBU,IAgBP,CACD,KAAOA,KAAK,CACR,MAAMW,EAAYnB,EAAWQ,GACxBI,EAAW,IAAIO,EAAU,GAAG,GAC7Bf,EAAQe,EAAWrB,CAAM,CAChC,CACD,KAAOW,GACHrF,EAAOuF,EAAWF,EAAI,EAAE,EAC5B,OAAA5H,GAAQiI,CAAO,EACRH,CACX,CAsQA,SAASW,GAAK3H,EAAWgC,EAAM/B,EAAU,CACrC,MAAM2H,EAAQ5H,EAAU,GAAG,MAAMgC,GAC7B4F,IAAU,SACV5H,EAAU,GAAG,MAAM4H,GAAS3H,EAC5BA,EAASD,EAAU,GAAG,IAAI4H,EAAM,EAExC,CACA,SAASC,EAAiB9B,EAAO,CAC7BA,GAASA,EAAM,GACnB,CAIA,SAAS+B,EAAgB9H,EAAWuB,EAAQG,EAAQqG,EAAe,CAC/D,KAAM,CAAE,SAAAC,EAAU,aAAAC,GAAiBjI,EAAU,GAC7CgI,GAAYA,EAAS,EAAEzG,EAAQG,CAAM,EAChCqG,GAEDhD,GAAoB,IAAM,CACtB,MAAMmD,EAAiBlI,EAAU,GAAG,SAAS,IAAIjB,EAAG,EAAE,OAAOK,EAAW,EAIpEY,EAAU,GAAG,WACbA,EAAU,GAAG,WAAW,KAAK,GAAGkI,CAAc,EAK9ChJ,GAAQgJ,CAAc,EAE1BlI,EAAU,GAAG,SAAW,EACpC,CAAS,EAELiI,EAAa,QAAQlD,EAAmB,CAC5C,CACA,SAASoD,EAAkBnI,EAAW8B,EAAW,CAC7C,MAAMuD,EAAKrF,EAAU,GACjBqF,EAAG,WAAa,OAChBC,GAAuBD,EAAG,YAAY,EACtCnG,GAAQmG,EAAG,UAAU,EACrBA,EAAG,UAAYA,EAAG,SAAS,EAAEvD,CAAS,EAGtCuD,EAAG,WAAaA,EAAG,SAAW,KAC9BA,EAAG,IAAM,GAEjB,CACA,SAAS+C,GAAWpI,EAAWa,EAAG,CAC1Bb,EAAU,GAAG,MAAM,KAAO,KAC1BuE,GAAiB,KAAKvE,CAAS,EAC/B6E,KACA7E,EAAU,GAAG,MAAM,KAAK,CAAC,GAE7BA,EAAU,GAAG,MAAOa,EAAI,GAAM,IAAO,GAAMA,EAAI,EACnD,CACA,SAASwH,GAAKrI,EAAWyC,EAAS6F,EAAUC,EAAiBC,EAAWC,EAAOC,EAAejI,EAAQ,CAAC,EAAE,EAAG,CACxG,MAAMkI,EAAmB7E,GACzBC,GAAsB/D,CAAS,EAC/B,MAAMqF,EAAKrF,EAAU,GAAK,CACtB,SAAU,KACV,IAAK,CAAE,EAEP,MAAAyI,EACA,OAAQ/J,EACR,UAAA8J,EACA,MAAOvJ,GAAc,EAErB,SAAU,CAAE,EACZ,WAAY,CAAE,EACd,cAAe,CAAE,EACjB,cAAe,CAAE,EACjB,aAAc,CAAE,EAChB,QAAS,IAAI,IAAIwD,EAAQ,UAAYkG,EAAmBA,EAAiB,GAAG,QAAU,CAAA,EAAG,EAEzF,UAAW1J,GAAc,EACzB,MAAAwB,EACA,WAAY,GACZ,KAAMgC,EAAQ,QAAUkG,EAAiB,GAAG,IACpD,EACID,GAAiBA,EAAcrD,EAAG,IAAI,EACtC,IAAIuD,EAAQ,GAkBZ,GAjBAvD,EAAG,IAAMiD,EACHA,EAAStI,EAAWyC,EAAQ,OAAS,CAAE,EAAE,CAAC5B,EAAGgI,KAAQC,IAAS,CAC5D,MAAMjG,EAAQiG,EAAK,OAASA,EAAK,GAAKD,EACtC,OAAIxD,EAAG,KAAOmD,EAAUnD,EAAG,IAAIxE,GAAIwE,EAAG,IAAIxE,GAAKgC,CAAK,IAC5C,CAACwC,EAAG,YAAcA,EAAG,MAAMxE,IAC3BwE,EAAG,MAAMxE,GAAGgC,CAAK,EACjB+F,GACAR,GAAWpI,EAAWa,CAAC,GAExBgI,CACnB,CAAS,EACC,GACNxD,EAAG,OAAM,EACTuD,EAAQ,GACR1J,GAAQmG,EAAG,aAAa,EAExBA,EAAG,SAAWkD,EAAkBA,EAAgBlD,EAAG,GAAG,EAAI,GACtD5C,EAAQ,OAAQ,CAChB,GAAIA,EAAQ,QAAS,CAEjB,MAAMsG,EAAQhG,GAASN,EAAQ,MAAM,EAErC4C,EAAG,UAAYA,EAAG,SAAS,EAAE0D,CAAK,EAClCA,EAAM,QAAQpH,CAAM,CACvB,MAGG0D,EAAG,UAAYA,EAAG,SAAS,EAAC,EAE5B5C,EAAQ,OACRqD,EAAc9F,EAAU,GAAG,QAAQ,EACvC8H,EAAgB9H,EAAWyC,EAAQ,OAAQA,EAAQ,OAAQA,EAAQ,aAAa,EAEhFqC,IACH,CACDf,GAAsB4E,CAAgB,CAC1C,CAoDA,MAAMK,EAAgB,CAClB,UAAW,CACPb,EAAkB,KAAM,CAAC,EACzB,KAAK,SAAWzJ,CACnB,CACD,IAAI+E,EAAMxD,EAAU,CAChB,GAAI,CAACb,GAAYa,CAAQ,EACrB,OAAOvB,EAEX,MAAMmB,EAAa,KAAK,GAAG,UAAU4D,KAAU,KAAK,GAAG,UAAUA,GAAQ,CAAA,GACzE,OAAA5D,EAAU,KAAKI,CAAQ,EAChB,IAAM,CACT,MAAM2H,EAAQ/H,EAAU,QAAQI,CAAQ,EACpC2H,IAAU,IACV/H,EAAU,OAAO+H,EAAO,CAAC,CACzC,CACK,CACD,KAAKqB,EAAS,CACN,KAAK,OAAS,CAACxJ,GAASwJ,CAAO,IAC/B,KAAK,GAAG,WAAa,GACrB,KAAK,MAAMA,CAAO,EAClB,KAAK,GAAG,WAAa,GAE5B,CACL,kEC5tEY7I,EAAM,EAAA,wCAAfqB,EAAyBF,EAAA2H,EAAAxH,CAAA,2BAAhBtB,EAAM,EAAA,oEAG+BA,EAAQ,EAAA,0DAAxCqB,EAA+CF,EAAA4H,EAAAzH,CAAA,2BAAftB,EAAQ,EAAA,6CAJjDgJ,EAAAhJ,OAAW,IAAEiJ,GAAAjJ,CAAA,iDAIbA,EAAQ,IAAAkJ,GAAAlJ,CAAA,4HALhBqB,EAMWF,EAAAgI,EAAA7H,CAAA,4EALHtB,OAAW,8HAIXA,EAAQ,mMATF,CAAA,SAAAoJ,EAAW,MAAS,EAAAP,EACpB,CAAA,OAAAQ,EAAS,EAAE,EAAAR,0ZCOV7I,EAAE,EAAA,yHAFjBqB,EAIMF,EAAAmI,EAAAhI,CAAA,EAHHJ,EAA0BoI,EAAAC,CAAA,SAC1BrI,EAAqCoI,EAAAE,CAAA,cAAdxJ,EAAK,gEAALA,EAAK,yBAAhBA,EAAE,EAAA,2PARH,GAAAyJ,CAAE,EAAAZ,GACF,MAAAa,CAAK,EAAAb,EACL,CAAA,QAAAc,EAAU,EAAK,EAAAd,EACf,CAAA,OAAAe,EAAS,EAAK,EAAAf,8TCsFf7I,EAAK,GAAC,QAAQA,EAAM,EAAA,EAAA,mJADaA,EAAK,IAAA,GAAA,oHAGtBA,EAAI,EAAA,YAA4BA,EAAG,EAAA,YAAOA,EAAG,EAAA,wCAZvEqB,EAWMF,EAAAmI,EAAAhI,CAAA,EAFHJ,EAAiFoI,EAAAC,CAAA,kBACjFrI,EAAoCoI,EAAAO,CAAA,2BAEvCxI,EAAyEF,EAAA2B,EAAAxB,CAAA,OAA5BtB,EAAK,EAAA,8BATjBA,EAAe,GAAA,CAAA,mBAC/BA,EAAQ,GAAA,mBACRA,EAAa,GAAA,oBACZA,EAAc,GAAA,iBACjBA,EAAY,GAAA,+EAEgBA,EAAK,IAAA,GAAA,eACtCA,EAAK,GAAC,QAAQA,EAAM,EAAA,EAAA,KAAA4C,GAAAkH,EAAAC,CAAA,mBAEJ/J,EAAI,EAAA,iBAA4BA,EAAG,EAAA,kBAAOA,EAAG,EAAA,YAA1BA,EAAK,EAAA,uHAbrCA,EAAE,SAASA,EAAK,kJAAhBA,EAAE,kBAASA,EAAK,+MA3ElB,GAAAyJ,CAAE,EAAAZ,GACF,MAAAa,CAAK,EAAAb,GACL,MAAApG,CAAK,EAAAoG,GACL,IAAAmB,CAAG,EAAAnB,GACH,IAAAoB,CAAG,EAAApB,EACH,CAAA,OAAAqB,EAAS,CAAC,EAAArB,GACV,KAAAsB,EAAI,GAAMF,EAAMD,GAAO,KAAK,QAAQ,CAAC,CAAA,EAAAnB,EACrC,CAAA,QAAAc,EAAU,EAAK,EAAAd,EACf,CAAA,OAAAe,EAAS,EAAK,EAAAf,EAErB,GAAApG,EAAQuH,GAAOvH,EAAQwH,OAClB,8CAGH,MAAAG,EAAWrG,SAEbsG,EACAC,EACAC,EAAa,GAEX,MAAAC,EAAgBC,GAAC,CACd,MAAAC,EAAWV,EAAMS,GAAKR,EAAMD,WAKzB,KAAK,MAAMU,EAAWP,CAAI,EAAIA,GAAM,QAAQ,CAAC,GAGnDQ,EAAuBlH,GAAC,OACrBmH,EAAaP,EAAc,wBAC3BQ,EAAaP,EAAgB,wBAC7BQ,EAAOF,EAAW,EAClBG,EAAOF,EAAW,EAAIA,EAAW,MAE/B,OAAApH,EAAE,QAAUqH,IAASC,EAAOD,IAGjCE,EAAiBvH,GAAC,OACfgH,EAAIE,EAAoBlH,CAAC,EAC3BgH,EAAI,GAAKA,EAAI,IACjBF,EAAaE,EAAI,IAAMQ,EAAQ,GAAKR,EAAI,IAAMQ,EAAQ,IAGnDC,EAAkBzH,GAAC,CACtB8G,EAAa,IAGVY,EAAgB1H,GAAC,CACpB8G,EAAa,SACPE,EAAIE,EAAoBlH,CAAC,EAC3BgH,EAAI,GAAKA,EAAI,OAEjBhI,EAAQ+H,EAAaC,CAAC,CAAA,GAGnBW,EAAmB3H,GAAC,KACnB4H,EAAW5I,EAAQ0H,EAAO1G,EAAE,OAAS,GACrC4H,EAAWrB,IAAKqB,EAAWrB,GAC3BqB,EAAWpB,IAAKoB,EAAWpB,GAC/BqB,EAAA,EAAA7I,EAAU,EAAA,KAAK,MAAM4I,EAAWlB,CAAI,EAAIA,GAAM,QAAQ,CAAC,CAAA,GAGpDoB,EAAY9H,GAAC,KACX8G,EAAU,aACTE,EAAIE,EAAoBlH,CAAC,EAC3BgH,EAAI,GAAKA,EAAI,OAEjBhI,EAAQ+H,EAAaC,CAAC,CAAA,6CAiBsCJ,EAAamB,qDAP9DlB,EAAekB,yBAUgB/I,EAAKC,GAAA,KAAA,KAAA,iTAjBjD4I,EAAA,GAAEL,GAASxI,EAAQuH,IAAQC,EAAMD,GAAO,GAAG,gBACzCI,EAAS,SAAU3H,CAAK,+QC5D8FzC,EAAM,GAAA,0JAAtBkD,GAAA6F,EAAA,WAAA/I,MAAQA,EAAK,EAAA,uBAAnHqB,EAAmIF,EAAA4H,EAAAzH,CAAA,iFAAbtB,EAAM,GAAA,KAAA4C,GAAA6I,EAAAC,CAAA,OAAtBxI,GAAA6F,EAAA,WAAA/I,MAAQA,EAAK,EAAA,2EAD5GA,EAAO,cAAYA,EAAM,mBAA9B,OAAIS,GAAA,EAAA,6KAKKT,EAAE,EAAA,uCANhBqB,EAKMF,EAAA4H,EAAAzH,CAAA,4DACND,EAAwCF,EAAA2B,EAAAxB,CAAA,OAARtB,EAAK,EAAA,iDAL3BA,EAAO,wDAKHA,EAAE,EAAA,iBAAgBA,EAAK,SAALA,EAAK,EAAA,6fAhB1B,GAAAyJ,CAAE,EAAAZ,GACF,MAAAa,CAAK,EAAAb,GACL,QAAAxG,CAAO,EAAAwG,GACP,MAAApG,EAAQJ,EAAQ,EAAC,EAAAwG,EACjB,CAAA,QAAAc,EAAU,EAAK,EAAAd,EACf,CAAA,OAAAe,EAAS,EAAK,EAAAf,EAOD,MAAA8C,EAAAC,GAAAN,EAAA,EAAA7I,EAAQmJ,CAAM,EAAoBC,EAAAD,GAAAN,EAAA,EAAA7I,EAAQmJ,CAAM,eAIxCnJ,EAAK,KAAA,oVC4IjC,SAASqJ,GAAKC,EAAG,CAErB,GAAIC,GAASD,CAAC,EACX,OAAOD,GAAKC,EAAE,CAAC,EAGlB,MAAME,EAAM,IAAIC,GAAO,kBAAkBH,EAAE,OAAS,CAAC,EACrD,QAAStL,EAAI,EAAGA,EAAIsL,EAAE,OAAS,EAAGtL,IAC/BwL,EAAIxL,GAAKsL,EAAEtL,EAAI,GAAKsL,EAAEtL,GAGzB,OAAO,IAAIyL,GAAOD,CAAG,CACxB,CAkVO,SAASE,GAAKJ,EAAG,CAErB,OAAIC,GAASD,CAAC,EACJI,GAAKJ,EAAE,CAAC,EAGXK,GAAIL,CAAC,EAAIA,EAAE,MACrB,CAWO,SAASK,GAAIL,EAAG,CAEpB,GAAIC,GAASD,CAAC,EACX,OAAOK,GAAIL,EAAE,CAAC,EAGjB,IAAIM,EAAI,EACR,QAAS5L,EAAI,EAAGA,EAAIsL,EAAE,OAAQtL,IAC3B4L,EAAIA,EAAIN,EAAEtL,GAGb,OAAO4L,CACV,CAkCO,SAASrC,GAAI+B,EAAG,CAEpB,OAAIC,GAASD,CAAC,GAAKO,GAAQP,CAAC,EAClBA,EAAE,EAAEQ,GAAOR,EAAE,CAAC,EAAI,GAGrBA,EAAEQ,GAAOR,CAAC,EAAI,EACxB,CAWO,SAASQ,GAAOR,EAAG,CAEvB,GAAIC,GAASD,CAAC,GAAKO,GAAQP,CAAC,EACzB,OAAOQ,GAAOR,EAAE,CAAC,EAGpB,IAAIS,EAAS,EACTP,EAAMF,EAAE,GACZ,QAAStL,EAAI,EAAGA,GAAKsL,EAAE,OAAQtL,IACxBsL,EAAEtL,EAAI,GAAKwL,IACZO,EAAS/L,EACTwL,EAAMF,EAAEtL,EAAI,IAIlB,OAAO+L,CACV,CAWO,SAASvC,GAAI8B,EAAG,CAEpB,OAAIC,GAASD,CAAC,GAAKO,GAAQP,CAAC,EAClBA,EAAE,EAAEU,GAAOV,EAAE,CAAC,EAAI,GAGrBA,EAAEU,GAAOV,CAAC,EAAI,EACxB,CAWO,SAASU,GAAOV,EAAG,CAEvB,GAAIC,GAASD,CAAC,GAAKO,GAAQP,CAAC,EACzB,OAAOU,GAAOV,EAAE,CAAC,EAGpB,IAAIS,EAAS,EACTP,EAAMF,EAAE,GACZ,QAAStL,EAAI,EAAGA,GAAKsL,EAAE,OAAQtL,IACxBsL,EAAEtL,EAAI,GAAKwL,IACZO,EAAS/L,EACTwL,EAAMF,EAAEtL,EAAI,IAIlB,OAAO+L,CACV,CCtnBO,SAASE,GAAMhG,EAAGvH,EAAI,EAAGC,EAAI,EAAG,CACpC,IAAI6M,EAAMC,GAAO,MAAMxF,CAAC,EACxB,QAASjG,EAAI,EAAGA,EAAIiG,EAAGjG,IACpBwL,EAAI,EAAExL,GAAMtB,EAAI,KAAK,UAAYC,EAAID,GAExC,OAAO8M,CACV,CAoDO,SAASU,GAAMjG,EAAGkG,EAAK,EAAGC,EAAQ,EAAG,CAEzC,IAAIZ,EAAMC,GAAO,MAAMxF,CAAC,EACxB,QAASjG,EAAI,EAAGA,EAAIiG,EAAGjG,IAAM,CAC1B,MAAMtB,EAAI,KAAK,KAAK,GAAK,KAAK,IAAI,KAAK,OAAQ,CAAA,CAAC,EAC1CC,EAAI,EAAI,KAAK,GAAK,KAAK,SAC7B6M,EAAI,EAAExL,GAAMtB,EAAI,KAAK,IAAIC,CAAC,EAAIyN,EAAQD,CACxC,CAED,OAAOX,CACV,CCnFO,SAASa,GAASf,EAAG,CACzB,OAAO,OAAOA,GAAO,QACxB,CAitCO,SAASC,GAASD,EAAG,CACzB,OAAOA,GAAKA,EAAE,cAAgBG,EACjC,CAWO,SAASa,GAAOC,EAAQ,CAC5B,OAAO,IAAId,GAAO,IAAI,aAAac,CAAM,CAAC,CAC7C,CAIO,MAAMC,GAAN,KAAa,CAiBjB,YAAYD,EAAQ,CAEjB,GAAI,CAAC,YAAY,OAAOA,CAAM,GAAKA,EAAO,cAAgB,aACvD,MAAM,MAAM,kDAAkD,EAGjE,KAAK,EAAIA,EACT,KAAK,OAASA,EAAO,MACvB,CASD,MAAME,EAAK,CACR,MAAMjB,EAAM,IAAIkB,GAAM,kBAAkB,KAAK,MAAM,EACnD,IAAIzG,EAAI,EACR,QAASjG,EAAI,EAAGA,EAAI,KAAK,OAAQA,IAC1ByM,EAAI,KAAK,EAAEzM,GAAIA,CAAC,IACjBwL,EAAIvF,GAAKjG,EAAI,EACbiG,EAAIA,EAAI,GAId,OAAO,IAAIyG,GAAMlB,EAAI,SAAS,EAAGvF,CAAC,CAAC,CACrC,CAUD,OAAOwG,EAAK,CACT,MAAMjB,EAAM,IAAIgB,GAAO,kBAAkB,KAAK,MAAM,EACpD,IAAIvG,EAAI,EACR,QAASjG,EAAI,EAAGA,EAAI,KAAK,OAAQA,IAC1ByM,EAAI,KAAK,EAAEzM,GAAIA,CAAC,IACjBwL,EAAIvF,GAAK,KAAK,EAAEjG,GAChBiG,EAAIA,EAAI,GAId,OAAO,IAAIuG,GAAOhB,EAAI,SAAS,EAAGvF,CAAC,CAAC,CACtC,CAQD,SAAU,CACP,OAAO,IAAIuG,GAAOG,GAAS,KAAK,CAAC,CAAC,CACpC,CAWD,KAAKC,EAAY,CACd,OAAO,IAAIJ,GAAOK,GAAM,KAAK,EAAGD,CAAU,CAAC,CAC7C,CAUD,QAAQA,EAAY,CACjB,OAAO,IAAIF,GAAMI,GAAS,KAAK,EAAGF,CAAU,CAAC,CAC/C,CAWD,IAAI3G,EAAG,CACJ,OAAO8G,GAAK,KAAM9G,CAAC,CACrB,CAWD,QAAQA,EAAG,CACR,OAAO+G,GAAS,KAAM/G,CAAC,CACzB,CAkBD,QAASqF,EAAG2B,EAAK,CAEV,OAAOA,GAAS,WACjBA,EAAM,CAACA,CAAG,GAGTA,EAAI,SAAW,IAChBA,EAAMP,GAAM,IAAI,EAAG,KAAK,MAAM,GAG5Bb,GAAQoB,CAAG,IACbA,EAAMlG,GAAMkG,CAAG,GAGlB,MAAMhH,EAAIgH,EAAI,OAEd,GAAI1D,GAAI0D,CAAG,EAAI,GAAKzD,GAAIyD,CAAG,EAAI,KAAK,OACjC,MAAM,MAAM,gEAAgE,EAG/E,GAAI3B,EAAE,SAAWrF,EACd,MAAM,MAAM,2DAA2D,EAG1E,QAASjG,EAAI,EAAGA,EAAIiN,EAAI,OAAQjN,IAAK,CAClC,MAAMkN,EAAID,EAAI,EAAEjN,GAChB,KAAK,EAAEkN,EAAI,GAAK5B,EAAE,EAAEtL,EACtB,CAED,OAAO,IACT,CAUD,OAAOiN,EAAK,CAUT,GARI,OAAOA,GAAS,WACjBA,EAAMlG,GAAM,CAACkG,CAAG,CAAC,GAGhB,MAAM,QAAQA,CAAG,IAClBA,EAAM,OAAOA,EAAI,IAAQ,UAAYP,GAAM,SAASO,CAAG,EAAIlG,GAAMkG,CAAG,GAGnE,CAACpB,GAAQoB,CAAG,EACb,MAAM,MAAM,2EAA2E,EAG1F,MAAM,EAAIA,EAAI,OACRzB,EAAMgB,GAAO,MAAM,CAAC,EAE1B,QAASxM,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAEzB,GAAIiN,EAAI,EAAEjN,GAAK,EACZ,MAAM,MAAM,4CAA4C,EAG3D,GAAIiN,EAAI,EAAEjN,GAAK,KAAK,OACjB,MAAM,MAAM,iDAAiD,EAGhEwL,EAAI,EAAExL,GAAK,KAAK,EAAEiN,EAAI,EAAEjN,GAAK,EAC/B,CAED,OAAOwL,CACT,CAWD,MAAM2B,EAAOC,EAAK,CAUf,GARID,IAAU,OACXA,EAAQ,GAGPC,GAAQ,OACTA,EAAM,KAAK,QAGVD,EAAQ,EACT,MAAM,MAAM,2CAA2C,EAG1D,GAAIC,EAAM,KAAK,OACZ,MAAM,MAAM,gDAAgD,EAG/D,GAAIA,EAAMD,EACP,MAAM,MAAM,gDAAgD,EAG/D,OAAO,IAAIX,GAAO,KAAK,EAAE,MAAMW,EAAQ,EAAGC,CAAG,CAAC,CAChD,CAMD,MAAO,CACJ,OAAO,IAAIZ,GAAO,KAAK,EAAE,MAAO,CAAA,CAClC,CAWD,IAAIlB,EAAG,CAEJ,OAAIA,IAAM,SACPA,EAAI,MAGA+B,GAAK,KAAK,EAAG/B,EAAE,EAAG,EAAG,KAAK,OAAQA,EAAE,OAAQ,CAAC,EAAE,EACxD,CAYD,GAAGA,EAAGmB,EAAK,CACR,GAAIlB,GAASD,CAAC,EACX,OAAO,IAAIkB,GAAOc,GAAM,KAAK,EAAGhC,EAAE,EAAGmB,CAAG,CAAC,EAG5C,GAAIJ,GAASf,CAAC,EACX,OAAO,IAAIkB,GAAOe,GAAM,KAAK,EAAGjC,EAAGmB,CAAG,CAAC,EAG1C,MAAM,IAAI,MAAM,gDAAgD,CAClE,CAWD,IAAInB,EAAG,CACJ,OAAO,KAAK,GAAGA,EAAG,CAAC5M,EAAGC,IAAMD,EAAIC,CAAC,CACnC,CAWD,SAAS2M,EAAG,CACT,OAAO,KAAK,GAAGA,EAAG,CAAC5M,EAAGC,IAAMD,EAAIC,CAAC,CACnC,CAWD,KAAK2M,EAAG,CACL,OAAO,KAAK,GAAGA,EAAG,CAAC5M,EAAGC,IAAMD,EAAIC,CAAC,CACnC,CAWD,OAAO2M,EAAG,CACP,OAAO,KAAK,GAAGA,EAAG,CAAC5M,EAAGC,IAAMD,EAAIC,CAAC,CACnC,CAUD,MAAM8N,EAAK,CAER,MAAM,EAAI,KAAK,EAAE,OACXjB,EAAMgB,GAAO,MAAM,CAAC,EAC1B,QAASxM,EAAI,EAAGA,EAAI,EAAGA,IACpBwL,EAAI,EAAExL,GAAKyM,EAAI,KAAK,EAAEzM,EAAE,EAG3B,OAAOwL,CACT,CAcD,OAAO,KAAKgC,EAAM,CAEf,GAAIA,EAAK,SAAW,EAAG,OAAOA,EAAK,GAEnC,MAAMC,EAAID,EAAK,OAAQ,CAACE,EAAKC,IAAQD,GAAO,OAAOC,GAAS,SAAW,EAAIA,EAAI,QAAS,CAAC,EACnFnC,EAAM,IAAIgB,GAAO,kBAAkBiB,CAAC,EAE1C,IAAIN,EAAQ,EACZ,UAAWzO,KAAK8O,EAET,OAAO9O,GAAO,UACf8M,EAAI2B,GAASzO,EACbyO,GAAS,IAET3B,EAAI,IAAID,GAAS7M,CAAC,EAAIA,EAAE,EAAI,IAAI8N,GAAO,kBAAkB9N,CAAC,EAAGyO,CAAK,EAClEA,GAAS,OAAOzO,GAAO,SAAW,EAAIA,EAAE,QAI9C,OAAO,IAAI8N,GAAOhB,CAAG,CACvB,CAaD,OAAO,IAAI2B,EAAOC,EAAKQ,EAAI,CACxB,OAAOC,GAAKV,EAAOC,EAAKQ,EAAIpB,EAAM,CACpC,CAaD,OAAO,MAAMhM,EAAQ2L,EAAIC,EAAO,CAC7B,OAAOF,GAAM1L,EAAQ2L,EAAIC,CAAK,CAChC,CAaD,OAAO,KAAK5L,EAAQ9B,EAAGC,EAAG,CACvB,OAAOsN,GAAMzL,EAAQ9B,EAAGC,CAAC,CAC3B,CAWD,OAAO,MAAMsH,EAAG,CACb,OAAO,IAAIuG,GAAO,IAAIA,GAAO,kBAAkBvG,CAAC,CAAC,CACnD,CAWD,OAAO,KAAKA,EAAG,CACZ,OAAOuG,GAAO,KAAK,EAAGvG,CAAC,CACzB,CAYD,OAAO,KAAK6H,EAAG,EAAG,CAEf,MAAMtC,EAAM,IAAIgB,GAAO,kBAAkB,CAAC,EAC1C,QAASxM,EAAI,EAAGA,EAAIwL,EAAI,OAAQxL,IAC7BwL,EAAIxL,GAAK8N,EAGZ,OAAO,IAAItB,GAAOhB,CAAG,CACvB,CAEJ,EAhfO,IAAMC,GAANe,GAEJuB,GAFUtC,GAEH,oBAAoB,cAyfvB,SAASI,GAAQP,EAAG,CACxB,OAAOA,EAAE,cAAgBoB,EAC5B,CAWO,SAAS3F,GAAMwF,EAAQ,CAC3B,OAAO,IAAIG,GAAM,IAAI,WAAWH,CAAM,CAAC,CAC1C,CAIO,MAAMyB,GAAN,KAAY,CAiBhB,YAAYzB,EAAQ,CAEjB,GAAI,CAAC,YAAY,OAAOA,CAAM,GAAKA,EAAO,cAAgB,WACvD,MAAM,MAAM,+CAA+C,EAG9D,KAAK,EAAIA,EACT,KAAK,OAASA,EAAO,MACvB,CAUD,MAAME,EAAK,CACR,MAAMjB,EAAM,IAAIwC,GAAM,kBAAkB,KAAK,MAAM,EACnD,IAAI/H,EAAI,EACR,QAASjG,EAAI,EAAGA,EAAI,KAAK,OAAQA,IAC1ByM,EAAI,KAAK,EAAEzM,GAAIA,CAAC,IACjBwL,EAAIvF,GAAKjG,EAAI,EACbiG,EAAIA,EAAI,GAId,OAAO,IAAI+H,GAAMxC,EAAI,SAAS,EAAGvF,CAAC,CAAC,CACrC,CAUD,OAAOwG,EAAK,CACT,MAAMjB,EAAM,IAAIwC,GAAM,kBAAkB,KAAK,MAAM,EACnD,IAAI/H,EAAI,EACR,QAASjG,EAAI,EAAGA,EAAI,KAAK,OAAQA,IAC1ByM,EAAI,KAAK,EAAEzM,GAAIA,CAAC,IACjBwL,EAAIvF,GAAK,KAAK,EAAEjG,GAChBiG,EAAIA,EAAI,GAId,OAAO,IAAI+H,GAAMxC,EAAI,SAAS,EAAGvF,CAAC,CAAC,CACrC,CAQD,SAAU,CACP,OAAO,IAAI+H,GAAMrB,GAAS,KAAK,CAAC,CAAC,CACnC,CAWD,KAAKC,EAAY,CACd,OAAO,IAAIoB,GAAMnB,GAAM,KAAK,EAAGD,CAAU,CAAC,CAC5C,CAUD,QAAQA,EAAY,CACjB,OAAO,IAAIoB,GAAMlB,GAAS,KAAK,EAAGF,CAAU,CAAC,CAC/C,CAUD,IAAI3G,EAAG,CACJ,OAAO8G,GAAK,KAAM9G,CAAC,CACrB,CAWD,QAAQA,EAAG,CACR,OAAO+G,GAAS,KAAM/G,CAAC,CACzB,CASD,OAAOgH,EAAK,CAUT,GARG,OAAOA,GAAS,WAChBA,EAAMlG,GAAM,CAACkG,CAAG,CAAC,GAGhB,MAAM,QAAQA,CAAG,IAClBA,EAAMlG,GAAMkG,CAAG,GAGd,CAACpB,GAAQoB,CAAG,EACb,MAAM,MAAM,2EAA2E,EAG1F,MAAM,EAAIA,EAAI,OACRzB,EAAM,IAAIwC,GAAM,kBAAkB,CAAC,EAEzC,QAAShO,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAEzB,GAAIiN,EAAI,EAAEjN,GAAK,EACZ,MAAM,MAAM,4CAA4C,EAG3D,GAAIiN,EAAI,EAAEjN,GAAK,KAAK,OACjB,MAAM,MAAM,iDAAiD,EAGhEwL,EAAIxL,GAAK,KAAK,EAAEiN,EAAI,EAAEjN,GAAK,EAC7B,CAED,OAAO,IAAIgO,GAAMxC,CAAG,CACtB,CAWD,MAAM2B,EAAOC,EAAK,CAUf,GARID,IAAU,OACXA,EAAQ,GAGPC,GAAQ,OACTA,EAAM,KAAK,QAGVD,EAAQ,EACT,MAAM,MAAM,2CAA2C,EAG1D,GAAIC,EAAM,KAAK,OACZ,MAAM,MAAM,gDAAgD,EAG/D,GAAIA,EAAMD,EACP,MAAM,MAAM,gDAAgD,EAG/D,OAAO,IAAIa,GAAM,KAAK,EAAE,MAAMb,EAAQ,EAAGC,CAAG,CAAC,CAC/C,CAeD,OAAO,IAAID,EAAOC,EAAKQ,EAAI,CACxB,OAAOC,GAAKV,EAAOC,EAAKQ,EAAII,EAAK,CACnC,CAWD,OAAO,KAAK/H,EAAG,CACZ,OAAO+H,GAAM,KAAK,EAAG/H,CAAC,CACxB,CAYD,OAAO,KAAK6H,EAAG,EAAG,CAEf,MAAMtC,EAAM,IAAIwC,GAAM,kBAAkB,CAAC,EACzC,QAAShO,EAAI,EAAGA,EAAIwL,EAAI,OAAQxL,IAC7BwL,EAAIxL,GAAK8N,EAGZ,OAAO,IAAIE,GAAMxC,CAAG,CACtB,CAWD,OAAO,SAASF,EAAG,CAEhB,IAAI,EAAI,EACR,MAAME,EAAM,IAAIwC,GAAM,kBAAkB1C,EAAE,MAAM,EAEhD,QAAStL,EAAI,EAAGA,EAAIsL,EAAE,OAAQtL,IACvBsL,EAAEtL,KACHwL,EAAI,GAAKxL,EAAI,EACb,EAAI,EAAI,GAId,OAAO,IAAIgO,GAAMxC,EAAI,SAAS,EAAG,CAAC,CAAC,CACrC,CACJ,EApRO,IAAMkB,GAANsB,GAEJD,GAFUrB,GAEH,oBAAoB,YAuY9B,SAASmB,GAAKV,EAAOC,EAAKQ,EAAIK,EAAU,CAGjCL,IAAO,SAAWA,EAAMT,GAASC,EAAO,EAAI,IAGhD,MAAM5M,EAAS,KAAK,OAAO4M,EAAMD,GAASS,CAAE,EAAI,EAEhD,GAAIpN,EAAS,EACV,MAAM,MAAM,uCAAuC,EAGtD,MAAM8K,EAAI,IAAI2C,EAAS,kBAAkBzN,CAAM,EAC/C,QAAS,EAAI,EAAG,EAAIA,EAAQ,IACzB8K,EAAE,GAAK6B,EAAQ,EAAIS,EAGtB,OAAO,IAAIK,EAAS3C,CAAC,CACxB,CAYA,SAASyB,GAAKlO,EAAKoH,EAAG,CAEnB,MAAMwH,EAAI5O,EAAI,OAASoH,EACjBuF,EAAM,IAAI3M,EAAI,YAAY,kBAAkB4O,CAAC,EACnD,QAASzN,EAAI,EAAGA,GAAKiG,EAAGjG,IACrB,QAASkO,EAAI,EAAGA,EAAIrP,EAAI,OAAQqP,IAC7B1C,GAAKxL,EAAI,GAAKnB,EAAI,OAASqP,GAAKrP,EAAI,EAAEqP,GAI5C,OAAO,IAAIrP,EAAI,YAAY2M,CAAG,CACjC,CAYA,SAASwB,GAASnO,EAAKoH,EAAG,CAEvB,GAAIA,EAAI,GAAK,KAAK,MAAMA,CAAC,IAAMA,EAC5B,MAAM,MAAM,mDAAmD,EAGlE,MAAMwH,EAAI5O,EAAI,OAASoH,EACjBuF,EAAM,IAAI3M,EAAI,YAAY,kBAAkB4O,CAAC,EACnD,QAASS,EAAI,EAAGA,EAAIrP,EAAI,OAAQqP,IAC7B,QAASlO,EAAI,EAAGA,EAAIiG,EAAGjG,IACpBwL,EAAI0C,EAAIjI,EAAIjG,GAAKnB,EAAI,EAAEqP,GAI7B,OAAO,IAAIrP,EAAI,YAAY2M,CAAG,CACjC,CAcA,SAAS8B,GAAMa,EAAIC,EAAI3B,EAAK,CAEzB,GAAI0B,EAAG,SAAWC,EAAG,OAClB,MAAM,IAAI,MAAM,mCAAmC,EAGtD,GAAID,EAAG,cAAgBC,EAAG,YACvB,MAAM,IAAI,MAAM,kCAAkC,EAGrD,MAAM5C,EAAM,IAAI2C,EAAG,YAAYA,EAAG,MAAM,EACxC,QAASnO,EAAI,EAAGA,EAAImO,EAAG,OAAQnO,IAC5BwL,EAAIxL,GAAKyM,EAAI0B,EAAGnO,GAAIoO,EAAGpO,EAAE,EAG5B,OAAOwL,CACV,CAeA,SAAS+B,GAAMY,EAAIC,EAAI3B,EAAK,CAEzB,MAAMjB,EAAM,IAAI2C,EAAG,YAAYA,EAAG,MAAM,EACxC,QAASnO,EAAI,EAAGA,EAAImO,EAAG,OAAQnO,IAC5BwL,EAAIxL,GAAKyM,EAAI0B,EAAGnO,GAAIoO,CAAE,EAGzB,OAAO5C,CACV,CAcO,SAAS6B,GAAKgB,EAAIC,EAAIC,EAAKC,EAAKC,EAAKC,EAAK,CAE9C,GAAIF,IAAQC,EACT,MAAM,MAAM,sCAAsC,EAIrD,MAAME,EAAQJ,EACRK,EAAQF,EACRG,EAASL,EACThD,EAAM,IAAI6C,EAAG,YAAYM,EAAQC,CAAK,EAE5C,QAAS,EAAI,EAAG,EAAIA,EAAO,IAAK,CAC7B,MAAME,EAAKR,EAAG,SAAS,EAAIG,GAAM,EAAI,GAAKA,CAAG,EACvCM,EAAOvD,EAAI,SAAS,EAAImD,GAAQ,EAAI,GAAKA,CAAK,EAEpD,QAAS3O,EAAI,EAAGA,EAAI6O,EAAQ7O,IAAK,CAC9B,MAAMgP,EAAMF,EAAG9O,GACTiP,EAAKZ,EAAG,SAASrO,EAAIuO,GAAMvO,EAAI,GAAKuO,CAAG,EAC7C,QAASrB,EAAI,EAAGA,EAAIyB,EAAOzB,IACxB6B,EAAK7B,IAAM+B,EAAG/B,GAAK8B,CAExB,CACH,CAED,OAAOxD,CACV,CAWO,SAASmB,GAASrB,EAAG,CAE1B,IAAI4D,EAAI5D,EAAE,QACN,EAAI4D,EAAE,OACNlE,EAAGhL,EAEP,KAAO,GACLA,EAAI,KAAK,MAAM,KAAK,OAAQ,EAAG,GAAG,EAClCgL,EAAIkE,EAAE,GACNA,EAAE,GAAKA,EAAElP,GACTkP,EAAElP,GAAKgL,EAGT,OAAOkE,CACT,CAYO,SAASrC,GAAMvB,EAAGsB,EAAa,GAAO,CAC1C,OAAOA,EAAatB,EAAE,MAAO,EAAC,KAAK,CAAC5M,EAAGC,IAAMA,EAAID,CAAC,EAAI4M,EAAE,MAAO,EAAC,KAAK,CAAC5M,EAAGC,IAAMD,EAAIC,CAAC,CACvF,CAYO,SAASmO,GAASxB,EAAGsB,EAAa,GAAO,CAC7C,MAAMK,EAAMP,GAAM,IAAI,EAAGpB,EAAE,MAAM,EAAE,EACnC,OAAOsB,EAAaK,EAAI,KAAK,CAACvO,EAAGC,IAAM2M,EAAE3M,EAAI,GAAK2M,EAAE5M,EAAI,EAAE,EAAIuO,EAAI,KAAK,CAACvO,EAAGC,IAAM2M,EAAE5M,EAAI,GAAK4M,EAAE3M,EAAI,EAAE,CACvG,CCz1EA,MAAMwQ,GAAmB,CAAA,EAgBzB,SAASC,GAASpN,EAAOmL,EAAQtP,EAAM,CACnC,IAAIwR,EACJ,MAAMC,EAAc,IAAI,IACxB,SAASC,EAAIC,EAAW,CACpB,GAAI/Q,EAAeuD,EAAOwN,CAAS,IAC/BxN,EAAQwN,EACJH,GAAM,CACN,MAAMI,EAAY,CAACN,GAAiB,OACpC,UAAWO,KAAcJ,EACrBI,EAAW,KACXP,GAAiB,KAAKO,EAAY1N,CAAK,EAE3C,GAAIyN,EAAW,CACX,QAASzP,EAAI,EAAGA,EAAImP,GAAiB,OAAQnP,GAAK,EAC9CmP,GAAiBnP,GAAG,GAAGmP,GAAiBnP,EAAI,EAAE,EAElDmP,GAAiB,OAAS,CAC7B,CACJ,CAER,CACD,SAAS5K,EAAOpG,EAAI,CAChBoR,EAAIpR,EAAG6D,CAAK,CAAC,CAChB,CACD,SAASlD,EAAUZ,EAAKyR,EAAa9R,EAAM,CACvC,MAAM6R,EAAa,CAACxR,EAAKyR,CAAU,EACnC,OAAAL,EAAY,IAAII,CAAU,EACtBJ,EAAY,OAAS,IACrBD,EAAOlC,EAAMoC,CAAG,GAAK1R,GAEzBK,EAAI8D,CAAK,EACF,IAAM,CACTsN,EAAY,OAAOI,CAAU,EACzBJ,EAAY,OAAS,GAAKD,IAC1BA,IACAA,EAAO,KAEvB,CACK,CACD,MAAO,CAAE,IAAAE,EAAK,OAAAhL,EAAQ,UAAAzF,EAC1B,CChDO,SAAS8Q,GAAcC,EAAO,CAElC,GAAIA,IAAU,OAAW,OAEzB,MAAMnG,EAAO,KAAK,IAAIH,GAAI8B,GAAKwE,CAAK,CAAC,CAAC,EACtC,IAAIC,EAAa,EACjB,GAAIpG,EAAO,GAAK,KAAK,IAAIF,GAAIqG,CAAK,CAAC,EAAI,EAAG,CAEvC,IAAIpG,EAAS,KAAK,KAAK,CAAC,KAAK,MAAMC,CAAI,CAAC,EACxC,OAAID,GAAU,EACJ,CAAC,EAAG,MAAM,KAAKoG,CAAK,EAAE,IAAI/B,GAAKA,EAAE,QAAQrE,CAAM,EAAE,SAAQ,CAAE,CAAC,GAEtEqG,EAAarG,EAAS,EACtBA,EAAS,EACF,CAAC,CAACqG,EAAY,MAAM,KAAKD,CAAK,EAAE,IAAI/B,IAAMA,EAAI,KAAK,IAAI,GAAIgC,CAAU,GAAG,QAAQrG,CAAM,EAAE,SAAU,CAAA,CAAC,EAChH,KAAU,CACJ,IAAIA,EAAS,KAAK,KAAK,KAAK,MAAMC,CAAI,CAAC,EACvC,OAAID,GAAU,EACJ,CAAC,EAAG,MAAM,KAAKoG,CAAK,EAAE,IAAI/B,GAAKA,EAAE,SAAQ,CAAE,CAAC,GAEtDgC,EAAarG,EAAS,EACtBA,EAAS,EACF,CAACqG,EAAY,MAAM,KAAKD,CAAK,EAAE,IAAI/B,IAAMA,EAAI,KAAK,IAAI,GAAIgC,CAAU,GAAG,SAAU,CAAA,CAAC,EAC3F,CACJ,CAYO,SAASC,GAAYzE,EAAG0E,EAAQ,CAMpC,GAJI,MAAM,QAAQ1E,CAAC,IAChBA,EAAIgB,GAAOhB,CAAC,GAGX,CAACC,GAASD,CAAC,EACZ,MAAM,MAAM0E,EAAS,sEAAsE,EAG9F,GAAI1E,EAAE,OAAS,EACZ,MAAM,MAAM0E,EAAS,qCAAqC,EAG7D,OAAO1E,CACV,CA8CO,SAAS2E,GAAM3E,EAAG4D,EAAGgB,EAAIC,EAAIC,EAAM,CAEvC,GAAI9E,IAAM,QAAa4D,IAAM,OAAW,OAExC,MAAMmB,EAAKD,EAAK,UAAUL,GAAYzE,EAAG,OAAO,EAAG4E,EAAG,MAAM,EACtDI,EAAKF,EAAK,UAAUL,GAAYb,EAAG,OAAO,EAAGiB,EAAG,MAAM,EAE5D,GAAIE,EAAG,QAAUC,EAAG,OACjB,MAAM,MAAM,4FAA4F,EAG3G,IAAItG,EAAI,GACR,QAAShK,EAAI,EAAGA,EAAIqQ,EAAG,OAAQrQ,IAC5BgK,GAAKqG,EAAGrQ,GAAK,IAAMsQ,EAAGtQ,GAAK,IAG9B,OAAOgK,CACV,CAaO,SAASuG,GAAaV,EAAOW,EAAKC,EAAYC,EAAQ,GAAM,CAGhE,GAAIb,IAAU,OAAW,CAKtB,GAJI,MAAM,QAAQA,CAAK,IACpBA,EAAQvD,GAAOuD,CAAK,GAGnB,CAACtE,GAASsE,CAAK,EAChB,MAAM,MAAM,uEAAuE,EAGtF,OAAOA,EAAM,OAAOvE,GAAKA,GAAKkF,EAAI,GAAKlF,GAAKkF,EAAI,EAAE,CACpD,CAGD,GAAI,OAAOA,GAAS,UAAYA,EAAI,KAAO,QAAaA,EAAI,KAAO,OAAW,OAG9E,MAAMG,GAASH,EAAI,GAAKA,EAAI,IAAM,GAC5BI,EAAQC,GAAQL,EAAI,GAAKA,EAAI,GAAK,EAAIG,EAAOD,CAAK,EAClDI,EAAcD,GAAQD,GAASH,EAAa,GAAIC,CAAK,EACrDK,EAAU,KAAK,MAAMP,EAAI,GAAKG,GAASG,CAAW,EAAIA,EACtDE,EAAU,KAAK,OAAOR,EAAI,GAAKG,GAASG,CAAW,EAAIA,EAS7D,GANAL,EAAa,KAAK,OAAOO,EAAUD,EAAU,GAAKD,CAAW,EAAI,EAGjEjB,EAAQpE,GAAO,IAAIsF,EAASC,EAASF,CAAW,EAG5C,KAAK,IAAIA,CAAW,EAAI,EAAG,CAE5B,MAAM5D,EAAI,KAAK,IAAI,GAAI,EAAI,KAAK,MAAM,CAAC,KAAK,MAAM4D,CAAW,CAAC,CAAC,EAC/DjB,EAAQA,EAAM,MAAM/B,GAAM,KAAK,OAAOA,EAAI,OAAO,SAAWZ,CAAC,EAAIA,CAAE,CACrE,CAGD,OAAO2C,EAAM,OAAOvE,GAAKA,GAAKkF,EAAI,GAAKlF,GAAKkF,EAAI,EAAE,CACrD,CAYO,SAASK,GAASI,EAAaP,EAAO,CAE1C,MAAMQ,EAAW,KAAK,MAAM,KAAK,MAAMD,CAAU,CAAC,EAC5CE,EAAWF,EAAa,KAAK,IAAI,GAAIC,CAAQ,EACnD,IAAIE,EAEJ,OAAIV,EACGS,EAAW,IACZC,EAAe,EACTD,EAAW,EACjBC,EAAe,EACTD,EAAW,EACjBC,EAAe,EAEfA,EAAe,GAEdD,GAAY,EACbC,EAAe,EACTD,GAAY,EAClBC,EAAe,EACTD,GAAY,EAClBC,EAAe,EAEfA,EAAe,GAGdA,EAAe,KAAK,IAAI,GAAIF,CAAQ,CAC9C,CAMO,SAASG,GAAY/F,EAAG,CAC5B,OAAO,KAAK,MAAMA,EAAI,EAAE,EAAI,EAC/B,CAYO,SAASgG,GAAS9G,EAAO+G,EAAQ,CACrC,OAAIA,EAAS,OAAS/G,EAAQ,MAAc,QACxC+G,EAAS,OAAS/G,EAAQ,MAAc,SACxC+G,EAAS,OAAS/G,EAAQ,MAAc,QACrC,QACV,uICgFkB,CAAC,aAAMjL,EAAM,GAAGA,EAAG,IAAG,CAAC,WAAM,CAAC,WAAM,CAAC,iCAAwDuC,EAAA0P,EAAA,YAAAC,EAAA,mBAAAlS,KAAO,IAAC,oCAA9GqB,EAAiKF,EAAA8Q,EAAA3Q,CAAA,cAAdtB,EAAM,gCAANA,EAAM,sBAAzIA,EAAM,GAAGA,EAAG,IAAG,eAAuEK,EAAA,GAAA,IAAA6R,KAAAA,EAAA,mBAAAlS,KAAO,oGAIpGA,EAAI,GAAGA,EAAK,GAAC,CAAC,EAAMuC,EAAA0P,EAAA,IAAAE,EAAAnS,KAASA,EAAG,EAAA,WAAM,CAAC,WAAM,CAAC,sEAAvDqB,EAAkIF,EAAA8Q,EAAA3Q,CAAA,cAAdtB,EAAM,gCAANA,EAAM,qBAAjHA,EAAI,GAAGA,EAAK,GAAC,eAAOK,EAAA,GAAA,KAAA8R,KAAAA,EAAAnS,KAASA,EAAG,wFAIhCA,EAAI,GAAGA,EAAK,GAAC,CAAC,UAAM,CAAC,WAAM,CAAC,WAAM,EAAE,uEAA7CqB,EAAyHF,EAAA8Q,EAAA3Q,CAAA,cAAbtB,EAAK,gCAALA,EAAK,qBAAxGA,EAAI,GAAGA,EAAK,GAAC;oHA6B5BqB,EAGIF,EAAAsJ,EAAAnJ,CAAA,6EAzCOtB,EAAM,IAAIA,EAAM,KAAK,IAAEoS,GAAApS,CAAA,IAIvBA,EAAM,IAAIA,EAAM,KAAK,IAAEqS,GAAArS,CAAA,IAIvBA,EAAK,IAAIA,EAAK,KAAK,IAAEiJ,GAAAjJ,CAAA,qJA6B1BA,EAAK,IAAAkJ,GAAA,8MAvCElJ,EAAW,EAAA,gCAqByBuC,EAAA+P,EAAA,IAAAC,EAAAvS,MAAI,EAAC,EAAMuC,EAAA+P,EAAA,IAAAE,EAAAxS,MAAI,EAAC,EAAUuC,EAAA+P,EAAA,QAAAG,EAAAzS,EAAI,IAAA,GAAGA,MAAI,EAAC,EAAWuC,EAAA+P,EAAA,SAAAI,EAAA1S,EAAI,IAAA,GAAGA,MAAI,EAAC,WADvFA,EAAU,GAAA,oEAUcA,EAAU,IAAA,GAAA,UAf9CA,EAAI,EAAA,UAAKA,EAAG,EAAA,cAASA,EAAK,EAAA,eAAUA,EAAM,EAAA,yMAjBYA,EAAQ,OAAA,iEAHLA,EAAK,EAAA,UAA5EqB,EAkDMF,EAAA4H,EAAAzH,CAAA,EAhDHJ,EAwCM6H,EAAA4J,CAAA,EArCHzR,EAaIyR,EAAAC,CAAA,6DAEJ1R,EAqBMyR,EAAAE,CAAA,EAjBH3R,EAIO2R,EAAAC,CAAA,EAHJ5R,EAEW4R,EAAAC,CAAA,EADR7R,EAAuG6R,EAAAT,CAAA,gCAS7GpR,EAEI2R,EAAAG,CAAA,iGAjBuDhT,EAAW,GAAA,iBAC1DA,EAAW,GAAA,iBAdlBA,EAAM,IAAIA,EAAM,KAAK,0DAIrBA,EAAM,IAAIA,EAAM,KAAK,0DAIrBA,EAAK,IAAIA,EAAK,KAAK,yFAVjBA,EAAW,EAAA,GAqByB,CAAAiT,GAAA5S,EAAA,GAAA,MAAAkS,KAAAA,EAAAvS,MAAI,kBAAO,CAAAiT,GAAA5S,EAAA,GAAA,MAAAmS,KAAAA,EAAAxS,MAAI,kBAAW,CAAAiT,GAAA5S,EAAA,GAAA,MAAAoS,KAAAA,EAAAzS,EAAI,IAAA,GAAGA,MAAI,sBAAY,CAAAiT,GAAA5S,EAAA,GAAA,MAAAqS,KAAAA,EAAA1S,EAAI,IAAA,GAAGA,MAAI,8WANlGA,EAAI,EAAA,0BAAKA,EAAG,EAAA,4BAASA,EAAK,EAAA,8BAAUA,EAAM,EAAA,gFAjBYA,EAAQ,0BAyCnEA,EAAK,sFA5CyDA,EAAK,EAAA,6RAzS9D,KAAAkT,CAAI,EAAArK,GACJ,KAAAsK,CAAI,EAAAtK,EACJ,CAAA,MAAAuK,EAAQ,EAAE,EAAAvK,EACV,CAAA,OAAAwK,EAAS,EAAE,EAAAxK,EACX,CAAA,OAAAyK,EAAS,EAAE,EAAAzK,EACX,CAAA,QAAA0K,GAAW,EAAK,IAAM,GAAK,EAAG,CAAA,EAAA1K,EAQnC,MAAAuB,EAAWrG,KAGXyP,EAAmB,CACtB,MAAS,GACT,OAAU,GACV,MAAS,GACT,OAAU,IAIPC,EAAQ,CACX,MAAS,EACT,OAAU,EACV,MAAS,GACT,OAAU,IAIPC,EAAS,CACZ,MAAS,EACT,OAAU,EACV,MAAS,EACT,OAAU,IAIPC,EAAgB,CACnB,MAAS,GACT,OAAU,GACV,MAAS,GACT,OAAU,IAIPC,EAAc,CACjB,MAAS,GACT,OAAU,GACV,MAAS,GACT,OAAU,IAIPC,EAAa,CAChB,MAAS,GACT,OAAU,GACV,MAAS,GACT,OAAU,IAIPC,EAAW,CACd,OAAQ,IAAK,MAAO,MAAO,KAAK,EAChC,QAAS,IAAK,MAAO,MAAO,KAAK,EACjC,OAAQ,IAAK,MAAO,MAAO,KAAK,EAChC,QAAS,IAAK,MAAO,MAAO,KAAK,GAI9BC,EAAkB,CAAA,SAAK,SAAK,SAAK,SAAK,SAAK,SAAK,IAAK,MAAG,EAGxDC,EAAa,eAAiB,KAAK,MAAM,KAAK,OAAM,EAAK,GAAK,MAQhEC,EACAhJ,EAAQ,IAAK+G,GAAS,IACtBkC,GAAO,EAAGC,GAAS,EAAGC,GAAM,WAavBC,GAAmBC,EAAWC,EAAE,CAChC,MAAA9K,GAAK,MAAM,UAAU,QAAQ,KAAK8K,EAAG,WAAW,SAAUA,CAAE,EAClEnK,EAASkK,EAAS,CAAG,YAAaC,EAAG,WAAW,aAAa,OAAO,EAAG,UAAW9K,KAY5E,SAAA+K,GAAY/Q,EAAC,CAGf,GAAAA,EAAE,OAAO,UAAY,QAAUA,EAAE,OAAO,WAAW,UAAU,SAAS,eAAe,EAAA,CACtF4Q,GAAmB,cAAe5Q,EAAE,MAAM,SAKzC,GAAAA,EAAE,OAAO,UAAY,QAAUA,EAAE,OAAO,WAAW,UAAU,SAAS,YAAY,EAAA,CACnF4Q,GAAmB,WAAY5Q,EAAE,MAAM,SAK1C2G,EAAS,WAAW,QAYjBqK,GAAS,SAAYlG,EAAGmG,EAAE,OAExBC,GAASpG,IAAM,QAAaA,IAAM,QACnC,MAAM,QAAQA,CAAC,IAAGA,EAAIxB,GAAOwB,CAAC,MAC7BvC,GAASuC,CAAC,GAAKA,EAAE,OAAS,WAExBA,EAAE,MAAMpP,IAAK2S,IAAa3S,GAAIuV,EAAG,IAAMA,EAAG,GAAKA,EAAG,EAAC,CAAA,EAAI,GAa3DE,GAAY,SAAYrG,EAAGmG,EAAE,OAE3BC,GAASpG,IAAM,QAAaA,IAAM,QACnC,MAAM,QAAQA,CAAC,IAAGA,EAAIxB,GAAOwB,CAAC,MAC7BvC,GAASuC,CAAC,GAAKA,EAAE,OAAS,IAExB,OAAAA,EAAE,MAAMpP,KAAMA,GAAIuV,EAAG,IAAMA,EAAG,GAAKA,EAAG,IAAI,GAO9CG,GAAQhF,GAAS,QAAQ,uBACzB,MAAAc,GAAKd,GAAQ,CAAE,OAAW,CAAA,EAAG,EAAG,CAAC,EAAG,QAAY,CAAA,EAAG,EAAG,CAAC,yBACvD,MAAAe,GAAKf,GAAQ,CAAE,OAAW,CAAA,EAAG,EAAG,CAAC,EAAG,QAAY,CAAA,EAAG,EAAG,CAAC,+BACvDiF,GAAOjF,GAAS,EAAK,4BACrBkF,GAAOlF,GAASqD,CAAI,6BACpB8B,GAAOnF,GAASsD,CAAI,uBAgC5BnP,GAAW,OAzBE,CAGG,UAAAyQ,GACG,aAAAG,GAGP,MAAAC,GACD,KAAAC,GACA,KAAAC,GACA,KAAAC,GACF,GAAArE,GACA,GAAAC,GACI,OAAAyC,EACA,OAAAC,EAGK,YAAAQ,EACE,cAAAD,EACL,SAAAJ,EACC,UAAAC,EACK,eAAAK,EACE,iBAAAJ,EAGG,QA4DlBsB,GAAE,IAAO,eAAeC,GAAO,CACzB,QAAAC,KAASD,EAAO,OAChBE,GAAMnB,EAAY,wBAClBoB,GAAMtD,GAASqD,GAAI,MAAOA,GAAI,MAAM,EAC1CP,GAAM,OAAO9I,IAAKsJ,EAAG,EAEf,MAAAC,GAAI1B,EAAeyB,IAAO,QAChCnB,GAAOb,GAAUA,IAAW,GAAKiC,GAAI,CAAC,EACtCnB,GAASb,GAAUA,IAAW,GAAKgC,GAAI,MACvClB,GAAMhB,GAASA,IAAU,GAAKkC,GAAI,CAAC,EACnChK,EAAA,EAAAL,EAAQmK,GAAI,MAAQlB,GAAOkB,GAAI,MAAQlB,GAAO,CAAC,EAC/C5I,EAAA,EAAA0G,GAASoD,GAAI,OAAUjB,GAASC,GAAOgB,GAAI,OAASjB,GAASC,GAAM,CAAC,KAM1EvQ,GAAO,IAAA,CACJoR,GAAG,QAAQhB,CAAW,IAGzBnQ,GAAS,IAAA,CACNmR,GAAG,UAAUhB,CAAW,+CASEA,EAAWzI,sDAFJyI,EAAWzI,wRAlF5CF,EAAA,GAAAiK,EAAYhC,EAAQ,IAAIhF,GAAKA,EAAIiF,EAAoBgC,EAAM,CAAA,yBAG3DT,GAAK,OAAOxG,GAAK2E,CAAI,yBACrB8B,GAAK,OAAOzG,GAAK4E,CAAI,2BAIrB2B,GAAK,OAAOvG,GACZ,MAAM,QAAQkH,CAAK,GACnB,MAAM,QAAQC,CAAK,GACnBA,EAAM,SAAW,GACjBD,EAAM,SAAW,GAAC,CACjBA,EAAM,KAAKlH,GAAKA,IAAM,MAAS,GAAA,CAC/BmH,EAAM,KAAKnH,GAAKA,IAAM,MAAS,GAC/B,CAAAkH,EAAM,KAAKlH,GAAK,MAAMA,CAAC,CAAA,GAAA,CACvBmH,EAAM,KAAKnH,GAAK,MAAMA,CAAC,CACxB,GAAAmH,EAAM,KAAOA,EAAM,IACnBD,EAAM,KAAOA,EAAM,IACnBxK,EAASsK,EAAU,GAAKA,EAAU,IAClCvD,GAAUuD,EAAU,GAAKA,EAAU,EAAC,2BAKhCZ,GACDhE,GAAG,OAAOpC,IAAC,CACR,OAAQ,EAAMtD,EAAQsK,EAAU,GAAKA,EAAU,KAAOG,EAAM,GAAKA,EAAM,IAAKA,EAAM,GAAIH,EAAU,IAChG,QAAS,EAAKtK,EAAQsK,EAAU,GAAKA,EAAU,KAAOG,EAAM,GAAKA,EAAM,IAAW,EAAe,CAAC,8BAOpGf,GACD/D,GAAG,OAAOrC,IAAC,CACR,OAAQ,CAAM,EAAAyD,GAASuD,EAAU,GAAKA,EAAU,KAAOE,EAAM,GAAKA,EAAM,IAAKA,EAAM,GAAIF,EAAU,IACjG,QAAS,EAAKvD,GAASuD,EAAU,GAAKA,EAAU,KAAOE,EAAM,GAAKA,EAAM,IAAY,EAAc,CAAC,8BAMzGnK,EAAA,GAAAqK,EAAMhB,EAAQF,GAAUiB,EAAOE,EAAI,MAAM,EAAK,CAAA,EAAG,CAAC,CAAA,2BAClDtK,EAAA,GAAAuK,EAAMlB,EAAQF,GAAUgB,EAAOK,EAAI,MAAM,EAAK,CAAA,EAAG,CAAC,CAAA,0BAuBlDxK,EAAA,GAAAyK,EAAWnC,EAAe4B,EAAM,OAUhCQ,EAAW,sCAAA,uNCtTV,MAAMC,EAAS,CACnB,UAAa,UACb,UAAa,UACb,MAAa,OACb,MAAa,OACb,KAAa,UACb,WAAc,UACd,UAAa,UACb,SAAa,UACb,OAAU,UAEV,QAAW,UACX,cAAiB,UACjB,aAAgB,MACnB,0FCmCUjW,EAAE,wBAAP,OAAIS,GAAA,0FADCT,EAAS,EAAA,UAAnBqB,EAIIF,EAAA+U,EAAA5U,CAAA,sEAHMtB,EAAE,qBAAP,OAAI,GAAA,EAAA,mHAAJ,wBADKA,EAAS,EAAA,wHAE6BuC,EAAA4T,EAAA,KAAAC,EAAApW,KAAGA,EAAC,IAAA,EAAOuC,EAAA4T,EAAA,KAAAE,EAAArW,KAAGA,EAAC,IAAA,EAAOuC,EAAA4T,EAAA,KAAAG,EAAAtW,KAAGA,EAAC,IAAA,EAAOuC,EAAA4T,EAAA,KAAAI,EAAAvW,KAAGA,EAAC,IAAA,cAAUA,EAAY,EAAA,UAAxGqB,EAA4GF,EAAAgV,EAAA7U,CAAA,UAA/DjB,EAAA,GAAA+V,KAAAA,EAAApW,KAAGA,EAAC,mBAAOK,EAAA,GAAAgW,KAAAA,EAAArW,KAAGA,EAAC,mBAAOK,EAAA,GAAAiW,KAAAA,EAAAtW,KAAGA,EAAC,mBAAOK,EAAA,IAAAkW,KAAAA,EAAAvW,KAAGA,EAAC,qCAAUA,EAAY,EAAA,uCAHtGwW,EAAAxW,EAAO,KAAA,QAAaA,EAAO,KAAA,QAAaA,EAAO,KAAA,QAAaA,OAAO,QAASkJ,GAAAlJ,CAAA,mEAA5EA,EAAO,KAAA,QAAaA,EAAO,KAAA,QAAaA,EAAO,KAAA,QAAaA,OAAO,2IA/B1D,WAAAyW,EAAU,EAAA,EAAA5N,GACV,UAAA6N,EAAYT,EAAO,QAAQ,EAAApN,EAC3B,CAAA,SAAA8N,EAAW,CAAC,EAAA9N,EACZ,CAAA,UAAA+N,EAAY,CAAC,EAAA/N,EACb,CAAA,UAAAgO,EAAY,EAAE,EAAAhO,QAQnBgI,EAAO3M,GAAW,MAAM,EACxB2Q,EAAQhE,EAAK,gCACbF,EAAKE,EAAK,6BACVD,EAAKC,EAAK,uBAGZ,IAAAiG,EAAIC,EAAIC,EAAIC,gPACTR,EAAW,QAAU,IACzBnL,EAAA,EAAAwL,EAAKjG,EAAK,UAAU4F,EAAW,GAAG,GAAIb,EAAI,MAAM,CAAA,EAChDtK,EAAA,EAAA0L,EAAKnG,EAAK,UAAU4F,EAAW,GAAG,GAAIX,EAAI,MAAM,CAAA,EAChDxK,EAAA,EAAAyL,EAAKlG,EAAK,UAAU4F,EAAW,GAAG,GAAIb,EAAI,MAAM,CAAA,EAChDtK,EAAA,EAAA2L,EAAKpG,EAAK,UAAU4F,EAAW,GAAG,GAAIX,EAAI,MAAM,CAAA,qBAIhDxK,EAAA,EAAA4L,EAAyB,UAAAR,mBAA2BE,wBAAgC/F,EAAK,YAAY2E,GAAQmB,EAAS,IAAC,yZCiBrH,OAAA3W,EAAQ,KAAA,GAAKA,OAAQ,EAACiJ,GAIjBjJ,EAAQ,KAAA,GAAKA,OAAQ,EAACqS,yFALUrS,EAAY,EAAA,UAAzDqB,EAcIF,EAAA+U,EAAA5U,CAAA,kHAdyCtB,EAAY,EAAA,2DAU/CA,EAAC,wBAAN,OAAIS,GAAA,8JAACT,EAAC,qBAAN,OAAI,GAAA,EAAA,2HAAJ,uDAJKA,EAAC,wBAAN,OAAIS,GAAA,8JAACT,EAAC,qBAAN,OAAI,GAAA,EAAA,2HAAJ,uDAJKA,EAAC,wBAAN,OAAIS,GAAA,8JAACT,EAAC,qBAAN,OAAI,GAAA,EAAA,2HAAJ,qDASqFmX,EAAAnX,KAAWA,EAAC,KAAA,4CAAjFA,EAAC,GAAA,EAAKuC,EAAA0P,EAAA,IAAAmF,EAAApX,KAAEA,EAAC,IAAA,EAAMuC,EAAA0P,EAAA,IAAAE,EAAAnS,KAAEA,EAAC,IAAA,WAAOA,EAAE,EAAA,WAAMA,EAAE,EAAA,oBAAeA,EAAU,EAAA,wCAA3EqB,EAAyGF,EAAA8Q,EAAA3Q,CAAA,wBAArBjB,EAAA,GAAA8W,KAAAA,EAAAnX,KAAWA,EAAC,KAAA,MAAAiS,EAAA,UAAAkF,GAA3E9W,EAAA,IAAA+W,KAAAA,EAAApX,KAAEA,EAAC,kBAAMK,EAAA,IAAA8R,KAAAA,EAAAnS,KAAEA,EAAC,iCAAOA,EAAE,EAAA,kBAAMA,EAAE,EAAA,2BAAeA,EAAU,EAAA,uCAJkDmX,EAAAnX,KAAWA,EAAC,KAAA,gDAA1HA,EAAC,GAAA,EAAKuC,EAAA0P,EAAA,IAAAmF,EAAApX,KAAEA,EAAC,IAAA,EAAMuC,EAAA0P,EAAA,IAAAE,EAAAnS,KAAEA,EAAC,IAAA,EAAQuC,EAAA0P,EAAA,KAAAoF,EAAA,CAAArX,KAAG,CAAC,WAAM,CAAC,EAA4BuC,EAAA0P,EAAA,YAAAC,EAAA,eAAAlS,EAAE,GAAAA,EAAO,SAAAA,KAAEA,EAAC,OAAA,oBAAmB,KAAK,wCAApHqB,EAAkJF,EAAA8Q,EAAA3Q,CAAA,wBAArBjB,EAAA,GAAA8W,KAAAA,EAAAnX,KAAWA,EAAC,KAAA,MAAAiS,EAAA,UAAAkF,GAApH9W,EAAA,IAAA+W,KAAAA,EAAApX,KAAEA,EAAC,kBAAMK,EAAA,IAAA8R,KAAAA,EAAAnS,KAAEA,EAAC,kBAAQK,EAAA,KAAAgX,KAAAA,EAAA,CAAArX,KAAG,gBAAoCK,EAAA,IAAA6R,KAAAA,EAAA,eAAAlS,EAAE,GAAAA,EAAO,SAAAA,KAAEA,EAAC,kEAJsCmX,EAAAnX,KAAWA,EAAC,KAAA,gDAA/HA,EAAC,GAAA,EAAKuC,EAAA0P,EAAA,IAAAmF,EAAApX,KAAEA,EAAC,IAAA,EAAMuC,EAAA0P,EAAA,IAAAE,EAAAnS,KAAEA,EAAC,IAAA,WAAO,CAAC,EAAMuC,EAAA0P,EAAA,KAAAqF,EAAAtX,KAAG,IAAI,EAA4BuC,EAAA0P,EAAA,YAAAC,EAAA,eAAAlS,EAAE,GAAAA,EAAO,SAAAA,KAAEA,EAAC,OAAA,oBAAmB,QAAQ,wCAAzHqB,EAAuJF,EAAA8Q,EAAA3Q,CAAA,wBAArBjB,EAAA,GAAA8W,KAAAA,EAAAnX,KAAWA,EAAC,KAAA,MAAAiS,EAAA,UAAAkF,GAAzH9W,EAAA,IAAA+W,KAAAA,EAAApX,KAAEA,EAAC,kBAAMK,EAAA,IAAA8R,KAAAA,EAAAnS,KAAEA,EAAC,kBAAcK,EAAA,IAAAiX,KAAAA,EAAAtX,KAAG,mBAAgCK,EAAA,IAAA6R,KAAAA,EAAA,eAAAlS,EAAE,GAAAA,EAAO,SAAAA,KAAEA,EAAC,kEAJ/FwW,EAAAxW,EAAM,KAAA,QAAaA,OAAM,QAASkJ,GAAAlJ,CAAA,mEAAlCA,EAAM,KAAA,QAAaA,OAAM,+IA3ClB,WAAAuX,CAAU,EAAA1O,GACR,UAAA2O,CAAS,EAAA3O,GACT,WAAA4O,CAAU,EAAA5O,EACV,CAAA,IAAA6O,EAAM,CAAC,EAAA7O,EACP,CAAA,IAAA8O,EAAM,CAAC,EAAA9O,QAQZgI,EAAO3M,GAAW,MAAM,EACxB2Q,EAAQhE,EAAK,gCACbF,EAAKE,EAAK,6BACVD,EAAKC,EAAK,6BACViE,EAAOjE,EAAK,6BAEd0D,EAEAxI,EAAG4D,EACHiI,EAAK,EAAGC,EAAK,EAAGC,4CAuBWvD,EAAE/I,sOApB1BmJ,IACJrJ,EAAA,EAAAS,EAAI8E,EAAK,UAAU0G,EAAW,GAAG,GAAI3B,EAAI,MAAM,CAAA,EAC/CtK,EAAA,EAAAqE,EAAIkB,EAAK,UAAU0G,EAAW,GAAG,GAAIzB,EAAI,MAAM,CAAA,2BAI/CR,EAAIzE,EAAK,cAAc2E,EAAM,yBAI7BsC,EAAU,CAAK,SAAU,SAAU,QAAS,SAAU,KAAK,EAAGJ,EAAG,MACjEE,EAAE,CAAK,EAAG,EAAGtC,EAAI,EAAC,CAAGA,CAAC,EAAGoC,EAAG,MAC5BG,EAAE,CAAK,EAAGvC,EAAG,EAAC,CAAGA,EAAG,CAAC,EAAGoC,EAAG,qBAI7BpM,EAAA,EAAEyM,EAAY,iCAAoCP,sCAAS,gOCRlCxX,EAAI,aAAaA,EAAS,aAAY,wFAAtCA,EAAI,yBAAaA,EAAS,miBAgBlBA,EAAQ,GAAe,WAAA,CAAAgY,GAAmBhY,EAAU,EAAA,CAAA,2HAApDA,EAAQ,IAAeK,EAAA,MAAA4X,EAAA,WAAA,CAAAD,GAAmBhY,EAAU,EAAA,CAAA,4JAjBjFA,EAAQ,IAAAqS,GAAArS,CAAA,8BAKUA,EAAQ,aAAaA,EAAS,aAAY,iCAG1CA,EAAU,aAAaA,EAAS,aAAY,KAG9D,IAAAkY,EAAAlY,EAAW,GAAA,SAAW,GAAKA,EAAU,GAAC,SAAWA,EAAW,GAAA,GAAG,GAAG,QAAMiJ,GAAAjJ,CAAA,EAKxEmY,EAAAnY,OAAe,GAACkJ,GAAAlJ,CAAA,8HAlBCA,EAAS,EAAA,UAAlCqB,EAqBIF,EAAA+U,EAAA5U,CAAA,oGAnBItB,EAAQ,gIAKUA,EAAQ,yBAAaA,EAAS,+CAG9BA,EAAU,yBAAaA,EAAS,eAGlDA,EAAW,GAAA,SAAW,GAAKA,EAAU,GAAC,SAAWA,EAAW,GAAA,GAAG,GAAG,uGAKlEA,OAAe,wIAlBEA,EAAS,+MAVtB,SAAAgY,GAAmBI,EAAE,QACvBA,IAAO,EAAU,GACjBA,EAAK,EACiC,+BAAAA,EAAI,SAAQ,YAEZ,+BAAAA,EAAI,SAAQ,mCAtB9C,WAAAX,EAAU,EAAA,EAAA5O,EACV,CAAA,SAAAwP,EAAW,EAAK,EAAAxP,EAChB,CAAA,IAAA8O,EAAM,CAAC,EAAA9O,EAEP,CAAA,IAAA6O,EAAM,CAAC,EAAA7O,EACP,CAAA,UAAAgO,EAAY,EAAE,EAAAhO,GACd,KAAAyP,EAAI,EAAA,EAAAzP,GACJ,SAAA0P,EAAQ,EAAA,EAAA1P,GACR,WAAA0O,EAAU,EAAA,EAAA1O,GACV,SAAA2P,EAAQ,EAAA,EAAA3P,EACR,CAAA,WAAA0H,EAAa,CAAC,EAAA1H,GAEd,UAAA6N,EAAYT,EAAO,QAAQ,EAAApN,GAC3B,UAAA4P,EAAYxC,EAAO,UAAU,EAAApN,GAC7B,UAAA2O,EAAYvB,EAAO,QAAQ,EAAApN,owBCyEN,8lBAF9B2N,EAAAxW,EAAS,IAAAA,EAAS,GAAA,OAAS,GAACkJ,GAAAlJ,CAAA,wEAA5BA,EAAS,IAAAA,EAAS,GAAA,OAAS,6MApFlB,CAAA,KAAAW,EAAO,OAAO,EAAAkI,EACd,CAAA,MAAAyH,EAAQ,MAAS,EAAAzH,EACjB,CAAA,WAAA4O,EAAa,MAAS,EAAA5O,EACtB,CAAA,SAAAwP,EAAW,EAAK,EAAAxP,EAChB,CAAA,IAAA8O,EAAM,CAAC,EAAA9O,GAEP,UAAA6N,EAAYT,EAAO,QAAQ,EAAApN,GAC3B,UAAA4P,EAAYxC,EAAO,UAAU,EAAApN,GAC7B,UAAA2O,EAAYvB,EAAO,QAAQ,EAAApN,EAQlC,GAAAlI,IAAS,aACJ,4DAIHkQ,EAAO3M,GAAW,MAAM,EAGxB6Q,EAAOlE,EAAK,+BACZmE,EAAOnE,EAAK,+BACZgE,EAAQhE,EAAK,gCACbiE,EAAOjE,EAAK,8BACZD,EAAKC,EAAK,2BAGZyH,EAAI,CAAA,EACJC,EAAQ,CAAA,EACRhB,EAAU,CAAA,EACViB,EAAQ,CAAA,EACRjI,EAAa,kUAGVoE,EAAK,CAGH,MAAA+D,EAAS1H,GAAaV,EAAOoF,EAAO7E,EAAK,SAAS2E,GAAS,EAAI,EAC/DmD,EAAUD,EAAO,OAGjBE,EAAK/H,EAAK,cAAcA,EAAK,UAAU2E,EAAU,EAAAM,EAAI,OAAO,EAAE,GAC9D+C,EAAU3M,GAAO,KAAKuJ,EAAM,GAAIkD,CAAO,EACvCG,EAAUD,EAAQ,IAAID,CAAE,EAGxBG,EAAW7M,GAAO,KAAKuJ,EAAM,GAAIkD,CAAO,EAO1C,IAJArI,IAAU,QAAamH,IAAe,SACtCnM,EAAA,GAAA,CAAAiF,EAAYkH,CAAU,EAAIpH,GAAcqI,EAAO,CAAC,EAAAnI,GAAAjF,EAAA,EAAAmM,CAAA,EAAAnM,EAAA,EAAAqJ,CAAA,EAAArJ,EAAA,GAAAgF,CAAA,EAAAhF,EAAA,GAAAoK,CAAA,EAAApK,EAAA,GAAAkK,CAAA,EAAAlK,EAAA,GAAAwK,CAAA,EAAAxK,EAAA,GAAAmK,CAAA,IAGhDgC,EAAW,SAAWiB,EAAO,YACxB,iEAITpN,EAAA,EAAAgN,IACII,EAAQG,CAAO,EACf,CAAAH,EAAQK,CAAQ,CAAA,CAAA,MAGpBR,EAAQ,EACJxL,GAAM,CAAE2I,EAAM,KAAM3I,GAAM,CAAE0I,EAAM,EAAC,CAAA,CAAA,GACnC1I,GAAM,CAAE2I,EAAM,KAAM3I,GAAM,CAAE0I,EAAM,EAAC,CAAA,CAAA,IAGvCnK,EAAA,EAAAiM,IACImB,EAAQI,CAAO,EACf,CAAAJ,EAAQG,CAAO,CAAA,CAAA,EAGnBvN,EAAA,GAAAkN,IACI,KAAM,IAAI,EACT,CAAA,CAAA9C,EAAM,EAAC,EAAA,CAAKmD,EAAQ,EAAEF,EAAU,GAAK,IAAMC,CAAE,CAAA,CAAA,CAAA,sRCOrB,8lBAF9BpC,EAAAxW,EAAS,IAAAA,EAAS,GAAA,OAAS,GAACkJ,GAAAlJ,CAAA,wEAA5BA,EAAS,IAAAA,EAAS,GAAA,OAAS,6MApFlB,CAAA,KAAAW,EAAO,OAAO,EAAAkI,EACd,CAAA,MAAAyH,EAAQ,MAAS,EAAAzH,EACjB,CAAA,WAAA4O,EAAa,MAAS,EAAA5O,EACtB,CAAA,SAAAwP,EAAW,EAAK,EAAAxP,EAChB,CAAA,IAAA8O,EAAM,CAAC,EAAA9O,GAEP,UAAA6N,EAAYT,EAAO,QAAQ,EAAApN,GAC3B,UAAA4P,EAAYxC,EAAO,UAAU,EAAApN,GAC7B,UAAA2O,EAAYvB,EAAO,QAAQ,EAAApN,EAQlC,GAAAlI,IAAS,aACJ,4DAIHkQ,EAAO3M,GAAW,MAAM,EAGxB6Q,EAAOlE,EAAK,+BACZmE,EAAOnE,EAAK,+BACZgE,EAAQhE,EAAK,gCACbiE,EAAOjE,EAAK,8BACZF,EAAKE,EAAK,2BAGZyH,EAAI,CAAA,EACJC,EAAQ,CAAA,EACRhB,EAAU,CAAA,EACViB,EAAQ,CAAA,EACRjI,EAAa,kUAGVoE,EAAK,CAGH,MAAAqE,EAAShI,GAAaV,EAAOmF,EAAO5E,EAAK,SAAS2E,GAAS,EAAI,EAC/DmD,EAAUK,EAAO,OAGjBC,EAAKpI,EAAK,cAAcA,EAAK,UAAU2E,EAAU,EAAAI,EAAI,OAAO,EAAE,GAC9DsD,EAAUhN,GAAO,KAAKwJ,EAAM,GAAIiD,CAAO,EACvCQ,EAAUD,EAAQ,IAAID,CAAE,EAGxBG,EAAWlN,GAAO,KAAKwJ,EAAM,GAAIiD,CAAO,EAO1C,IAJArI,IAAU,QAAamH,IAAe,SACtCnM,EAAA,GAAA,CAAAiF,EAAYkH,CAAU,EAAIpH,GAAc2I,EAAO,CAAC,EAAAzI,GAAAjF,EAAA,EAAAmM,CAAA,EAAAnM,EAAA,EAAAqJ,CAAA,EAAArJ,EAAA,GAAAgF,CAAA,EAAAhF,EAAA,GAAAmK,CAAA,EAAAnK,EAAA,GAAAkK,CAAA,EAAAlK,EAAA,GAAAsK,CAAA,EAAAtK,EAAA,GAAAoK,CAAA,IAGhD+B,EAAW,SAAWuB,EAAO,YACxB,iEAIT1N,EAAA,EAAAgN,IACIY,EAASF,CAAM,EACf,CAAAI,EAAUJ,CAAM,CAAA,CAAA,MAGpBT,EAAQ,EACJxL,GAAM,CAAE2I,EAAM,KAAM3I,GAAM,CAAE0I,EAAM,EAAC,CAAA,CAAA,GACnC1I,GAAM,CAAE2I,EAAM,KAAM3I,GAAM,CAAE0I,EAAM,EAAC,CAAA,CAAA,IAGvCnK,EAAA,EAAAiM,IACI2B,EAASF,CAAM,EACf,CAAAG,EAASH,CAAM,CAAA,CAAA,OAGnBR,EAAQ,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAEHU,EAAQ,EAAEP,EAAU,EAAC,EAAA,CAAKlD,EAAM,EAAC,CAAA,CAAA,CAAA,uQCnDhClT,EAAA+P,EAAA,IAAAC,EAAAvS,KAAG,EAAC,EAAMuC,EAAA+P,EAAA,IAAAE,EAAAxS,KAAG,EAAC,EAAUuC,EAAA+P,EAAA,QAAAG,EAAAzS,EAAG,GAAA,GAAKA,KAAG,EAAC,EAAWuC,EAAA+P,EAAA,SAAAI,EAAA1S,EAAG,GAAA,GAAKA,KAAG,EAAC,cAAUA,EAAY,EAAA,yEAD1FqB,EAEIF,EAAA+U,EAAA5U,CAAA,EADJJ,EAA8FgV,EAAA5D,CAAA,UAArFjS,EAAA,GAAAkS,KAAAA,EAAAvS,KAAG,gBAAOK,EAAA,GAAAmS,KAAAA,EAAAxS,KAAG,gBAAWK,EAAA,GAAAoS,KAAAA,EAAAzS,EAAG,GAAA,GAAKA,KAAG,oBAAYK,EAAA,GAAAqS,KAAAA,EAAA1S,EAAG,GAAA,GAAKA,KAAG,4DAFjEA,EAAK,IAAAkJ,GAAAlJ,CAAA,mEAALA,EAAK,6IA7BI,KAAAW,CAAI,EAAAkI,EAQX,GAAAlI,IAAS,WACJ,wDAIH0Y,EAAY,2BAA8BpD,EAAO,6BAGjDpF,EAAO3M,GAAW,MAAM,EACxB6Q,EAAOlE,EAAK,+BACZmE,EAAOnE,EAAK,+BACZiE,EAAOjE,EAAK,8BACZF,EAAKE,EAAK,6BACVD,EAAKC,EAAK,wGAGbvF,EAAA,EAAAgO,EAAK3E,EAAQ9D,EAAK,UAAU6E,EAAOE,EAAI,MAAM,EAAI,MAAS,mBAC1DtK,EAAA,EAAAiO,EAAK5E,EAAQ9D,EAAK,UAAU4E,EAAOK,EAAI,MAAM,EAAI,MAAS,mMCmBtD9V,EAAE,wBAAP,OAAIS,GAAA,sGADYT,EAAS,EAAA,cAAUA,EAAK,EAAA,cAASA,EAAY,EAAA,UAA/DqB,EAIIF,EAAA+U,EAAA5U,CAAA,sEAHGtB,EAAE,qBAAP,OAAIS,GAAA,EAAA,mHAAJ,6BADgBT,EAAS,qCAAUA,EAAK,EAAA,qBAASA,EAAY,EAAA,8EAElDuC,EAAA4T,EAAA,KAAAC,EAAApW,KAAGA,EAAC,IAAA,EAAOuC,EAAA4T,EAAA,KAAAE,EAAArW,KAAGA,EAAC,IAAA,EAAOuC,EAAA4T,EAAA,KAAAG,EAAAtW,KAAGA,EAAC,IAAA,EAAOuC,EAAA4T,EAAA,KAAAI,EAAAvW,KAAGA,EAAC,IAAA,UAA/CqB,EAAoDF,EAAAgV,EAAA7U,CAAA,UAA1CjB,EAAA,GAAA+V,KAAAA,EAAApW,KAAGA,EAAC,mBAAOK,EAAA,GAAAgW,KAAAA,EAAArW,KAAGA,EAAC,mBAAOK,EAAA,IAAAiW,KAAAA,EAAAtW,KAAGA,EAAC,mBAAOK,EAAA,IAAAkW,KAAAA,EAAAvW,KAAGA,EAAC,0DAHhDA,EAAK,IAAAkJ,GAAAlJ,CAAA,mEAALA,EAAK,yIA1CE,OAAAwZ,CAAM,EAAA3Q,GACJ,KAAA4Q,CAAI,EAAA5Q,GACJ,OAAA6Q,CAAM,EAAA7Q,GACN,KAAA8Q,CAAI,EAAA9Q,GACJ,UAAA6N,EAAYT,EAAO,OAAO,EAAApN,EAC1B,CAAA,SAAA8N,EAAW,CAAC,EAAA9N,EACZ,CAAA,UAAA+N,EAAY,CAAC,EAAA/N,EACb,CAAA,UAAAgO,EAAY,YAAY,EAAAhO,EACxB,CAAA,MAAAuK,EAAQ,EAAE,EAAAvK,QAQfgI,EAAO3M,GAAW,MAAM,EACxB2Q,EAAQhE,EAAK,gCACbiE,EAAOjE,EAAK,8BACZF,EAAKE,EAAK,6BACVD,EAAKC,EAAK,uBAEZ,IAAAiG,EAAIC,EAAIC,EAAIC,+VAETtC,EAAK,CAENrJ,EAAA,EAAAwL,EAAKjG,EAAK,UAAUL,GAAYgJ,EAAQ,UAAU,EAAG5D,EAAI,MAAM,CAAA,EAC/DtK,EAAA,EAAA0L,EAAKnG,EAAK,UAAUL,GAAYkJ,EAAQ,UAAU,EAAG5D,EAAI,MAAM,CAAA,EAC/DxK,EAAA,EAAAyL,EAAKlG,EAAK,UAAUL,GAAYiJ,EAAM,UAAU,EAAG7D,EAAI,MAAM,CAAA,EAC7DtK,EAAA,EAAA2L,EAAKpG,EAAK,UAAUL,GAAYmJ,EAAM,UAAU,EAAG7D,EAAI,MAAM,CAAA,QAEvDpP,EAAIoQ,EAAG,OACT,GAAAC,EAAG,SAAWrQ,GAAKsQ,EAAG,SAAWtQ,GAAKuQ,EAAG,SAAWvQ,EAC/C,MAAA,MAAM,yFAAyF,qBAM3G4E,EAAA,EAAA4L,EAAyB,UAAAR,mBAA2BE,wBAAgC/F,EAAK,YAAY2E,GAAQmB,EAAS,IAAC,wcCyB9G,qBAAA,OAAA3W,MAAW,SAAQiJ,mBAOpB,MAAM,QAAQjJ,OAAQ,YAAY,OAAOA,EAAG,EAAA,oFATxCA,EAAS,EAAA,cAAUA,EAAK,EAAA,cAASA,EAAY,GAAA,UAA/DqB,EAmBIF,EAAA+U,EAAA5U,CAAA,8GAnBctB,EAAS,qCAAUA,EAAK,EAAA,sBAASA,EAAY,GAAA,+CAerDA,EAAC,wBAAN,OAAIS,GAAA,gKAACT,EAAC,qBAAN,OAAI,GAAA,EAAA,2HAAJ,uDALKA,EAAC,wBAAN,OAAIS,GAAA,gKAACT,EAAC,qBAAN,OAAI,GAAA,EAAA,2HAAJ,uDAPKA,EAAC,wBAAN,OAAIS,GAAA,gKAACT,EAAC,qBAAN,OAAI,GAAA,EAAA,2HAAJ,qDAaqGmX,EAAAnX,KAAOA,EAAC,KAAA,kDAA7FA,EAAC,GAAA,EAAKuC,EAAA0P,EAAA,IAAAmF,EAAApX,KAAEA,EAAC,IAAA,EAAMuC,EAAA0P,EAAA,IAAAE,EAAAnS,KAAEA,EAAC,IAAA,EAAOuC,EAAA0P,EAAA,KAAAoF,EAAArX,KAAGA,EAAG,GAAA,EAAOuC,EAAA0P,EAAA,KAAAqF,EAAAtX,KAAGA,EAAG,GAAA,EAAgBuC,EAAA0P,EAAA,cAAA2H,EAAA5Z,MAAYA,EAAG,GAAA,wCAA1FqB,EAAqHF,EAAA8Q,EAAA3Q,CAAA,wBAAjBjB,EAAA,GAAA8W,KAAAA,EAAAnX,KAAOA,EAAC,KAAA,MAAAiS,EAAA,UAAAkF,GAAvF9W,EAAA,IAAA+W,KAAAA,EAAApX,KAAEA,EAAC,kBAAMK,EAAA,IAAA8R,KAAAA,EAAAnS,KAAEA,EAAC,kBAAOK,EAAA,KAAAgX,KAAAA,EAAArX,KAAGA,EAAG,kBAAOK,EAAA,KAAAiX,KAAAA,EAAAtX,KAAGA,EAAG,kBAAgBK,EAAA,GAAAuZ,KAAAA,EAAA5Z,MAAYA,EAAG,gEALmBmX,EAAAnX,KAAOA,EAAC,KAAA,kDAAtGA,EAAC,GAAA,EAAKuC,EAAA0P,EAAA,IAAAmF,EAAApX,KAAEA,EAAC,IAAA,EAAMuC,EAAA0P,EAAA,IAAAE,EAAAnS,KAAEA,EAAC,IAAA,aAAOA,EAAE,GAACA,EAAG,GAACA,EAAC,KAAA,aAAQA,EAAE,GAACA,EAAG,GAACA,EAAC,KAAA,sBAAiBA,EAAW,IAACA,EAAG,GAACA,EAAC,KAAA,wCAAlGqB,EAA8HF,EAAA8Q,EAAA3Q,CAAA,wBAAjBjB,EAAA,GAAA8W,KAAAA,EAAAnX,KAAOA,EAAC,KAAA,MAAAiS,EAAA,UAAAkF,GAAhG9W,EAAA,IAAA+W,KAAAA,EAAApX,KAAEA,EAAC,kBAAMK,EAAA,IAAA8R,KAAAA,EAAAnS,KAAEA,EAAC,gCAAOA,EAAE,GAACA,EAAG,GAACA,EAAC,kCAAQA,EAAE,GAACA,EAAG,GAACA,EAAC,gCAAiBA,EAAW,IAACA,EAAG,GAACA,EAAC,mHAPnFA,EAAC,GAAA,EAAKuC,EAAA0P,EAAA,IAAAmF,EAAApX,KAAEA,EAAC,IAAA,EAAMuC,EAAA0P,EAAA,IAAAE,EAAAnS,KAAEA,EAAC,IAAA,EAAOuC,EAAA0P,EAAA,KAAAoF,EAAArX,KAAGA,EAAG,GAAA,EAAOuC,EAAA0P,EAAA,KAAAqF,EAAAtX,KAAGA,EAAG,GAAA,EAC7CuC,EAAA0P,EAAA,YAAAC,EAAAlS,OAAgB,OAAsB,UAAAA,EAAgB,OAAAA,EAAE,GAAAA,OAAKA,EAAE,GAACA,EAAG,QAAMA,EAAE,GAAAA,EAAK,KAAAA,KAAGA,EAAG,OAAO,EAAE,sBAC7FA,EAAW,IAACA,EAAG,GAACA,EAAC,KAAA,wCAFjCqB,EAE0DF,EAAA8Q,EAAA3Q,CAAA,cAAdtB,EAAM,6BAANA,EAAM,IAF7BK,EAAA,IAAA+W,KAAAA,EAAApX,KAAEA,EAAC,kBAAMK,EAAA,IAAA8R,KAAAA,EAAAnS,KAAEA,EAAC,kBAAOK,EAAA,KAAAgX,KAAAA,EAAArX,KAAGA,EAAG,kBAAOK,EAAA,KAAAiX,KAAAA,EAAAtX,KAAGA,EAAG,kBAC7CK,EAAA,KAAA6R,KAAAA,EAAAlS,OAAgB,OAAsB,UAAAA,EAAgB,OAAAA,EAAE,GAAAA,OAAKA,EAAE,GAACA,EAAG,QAAMA,EAAE,GAAAA,EAAK,KAAAA,KAAGA,EAAG,OAAO,oCAC3FA,EAAW,IAACA,EAAG,GAACA,EAAC,kEAPlCwW,EAAAxW,MAASA,EAAC,KAAK,QAAaA,OAAM,QAASkJ,GAAAlJ,CAAA,mEAA3CA,MAASA,EAAC,KAAK,QAAaA,OAAM,6IA5D3B,QAAA6Z,CAAO,EAAAhR,GACL,QAAAiR,CAAO,EAAAjR,GACP,OAAAkR,CAAM,EAAAlR,EACN,CAAA,IAAA6O,EAAM,CAAC,EAAA7O,GACP,UAAAmR,EAAY/D,EAAO,YAAY,EAAApN,EAC/B,CAAA,YAAAoR,EAAc,aAAa,EAAApR,EAC3B,CAAA,YAAAqR,EAAc,CAAC,EAAArR,EACf,CAAA,SAAAsR,EAAW,CAAC,EAAAtR,EACZ,CAAA,UAAAgO,EAAY,aAAa,EAAAhO,EACzB,CAAA,MAAAuK,EAAQ,aAAa,EAAAvK,EACrB,CAAA,YAAAuR,EAAc,CAAC,EAAAvR,QAOpBgI,EAAO3M,GAAW,MAAM,EACxB2Q,EAAQhE,EAAK,gCACbF,EAAKE,EAAK,6BACVD,EAAKC,EAAK,6BACViE,EAAOjE,EAAK,8BAEZwJ,EAAW,CAAI,SAAU,SAAU,QAAS,SAAU,KAAK,MAE7DtO,EAAG4D,EACHiI,EAAK,EAAGC,EAAK,ybAGVlD,EAAK,CAEE,GAAA,OAAAoF,GAAW,UAAmB,OAAArC,GAAQ,SACxC,MAAA,MAAM,gGAAgG,EAO3G,GAJJpM,EAAA,EAAAS,EAAI8E,EAAK,UAAUL,GAAYqJ,EAAS,YAAY,EAAGjE,EAAI,MAAM,CAAA,EACjEtK,EAAA,EAAAqE,EAAIkB,EAAK,UAAUL,GAAYsJ,EAAS,YAAY,EAAGhE,EAAI,MAAM,CAAA,EAG7D/J,EAAE,SAAW4D,EAAE,OACV,MAAA,MAAM,oFAAoF,KAG/F,MAAM,QAAQoK,CAAM,GAAKA,EAAO,SAAWhO,EAAE,OACxC,MAAA,MAAM,kFAAkF,wBAKnG,CACQ,MAAAuJ,EAAIzE,EAAK,cAAc2E,OAC7BoC,EAAE,CAAI,EAAG,EAAGtC,EAAI,EAAC,CAAGA,EAAGA,CAAC,CAAA,MACxBuC,EAAE,CAAI,EAAGvC,EAAG,EAAC,CAAGA,EAAG,EAAGA,CAAC,CAAA,2BAIvByC,EAAY,iCAAoCiC,kBAA0BE,cAAwBD;AAAA,kBACtFE,MAAQ,0VCRhBna,EAAC,wBAAN,OAAIS,GAAA,8HAD8BT,EAAK,EAAA,cAASA,EAAY,EAAA,UAAjEqB,EAIIF,EAAA+U,EAAA5U,CAAA,sEAHMtB,EAAC,qBAAN,OAAI,GAAA,EAAA,mHAAJ,wBADkCA,EAAK,EAAA,oBAASA,EAAY,EAAA,iFAElCA,EAAY,EAAA,EAA5BuC,EAAA0P,EAAA,IAAAmF,EAAApX,KAAEA,EAAC,IAAA,EAAMuC,EAAA0P,EAAA,IAAAE,EAAAnS,KAAEA,EAAC,IAAA,wCAArBqB,EAA6CF,EAAA8Q,EAAA3Q,CAAA,4BAApBtB,EAAY,EAAA,EAA5BK,EAAA,GAAA+W,KAAAA,EAAApX,KAAEA,EAAC,kBAAMK,EAAA,GAAA8R,KAAAA,EAAAnS,KAAEA,EAAC,uDAHtBwW,EAAAxW,MAASA,EAAC,KAAK,QAAaA,OAAM,QAASkJ,GAAAlJ,CAAA,mEAA3CA,MAASA,EAAC,KAAK,QAAaA,OAAM,2IA/C3B,QAAA6Z,CAAO,EAAAhR,GACL,QAAAiR,CAAO,EAAAjR,EACP,CAAA,OAAAyR,EAAS,CAAC,EAAAzR,EACV,CAAA,UAAAmR,EAAY,aAAa,EAAAnR,GACzB,YAAAoR,EAAchE,EAAO,OAAO,EAAApN,EAC5B,CAAA,YAAAqR,EAAc,CAAC,EAAArR,EACf,CAAA,WAAA0R,EAAa,CAAC,EAAA1R,EACd,CAAA,MAAAuK,EAAQ,EAAE,EAAAvK,QAQfgI,EAAO3M,GAAW,MAAM,EACxByM,EAAKE,EAAK,6BACVD,EAAKC,EAAK,6BACViE,EAAOjE,EAAK,4BAEd9E,EAAG4D,EAAG6K,uVAGH7F,EAAK,CAEE,GAAA,OAAA2F,GAAY,UAAYA,EAAS,GAAKA,EAASzJ,EAAK,eAAe,OACrE,MAAA,MAA+D,yDAAAA,EAAK,eAAe,SAAM,EAU9F,GAPJvF,EAAA,EAAAkP,EAAe3J,EAAK,eAAeyJ,EAAS,EAAC,EAG7ChP,EAAA,EAAAS,EAAI8E,EAAK,UAAUL,GAAYqJ,EAAS,QAAQ,EAAGjE,EAAI,MAAM,CAAA,EAC7DtK,EAAA,EAAAqE,EAAIkB,EAAK,UAAUL,GAAYsJ,EAAS,QAAQ,EAAGhE,EAAI,MAAM,CAAA,EAGzD/J,EAAE,SAAW4D,EAAE,OACV,MAAA,MAAM,gFAAgF,wBAM/FoI,EAAY,iCAAoCiC,kBAA0BE,cAAwBD;AAAA,kBACtFM,0DAAU,sSCfSva,EAAC,EAAA,gDADEA,EAAY,EAAA,cAASA,EAAK,EAAA,UAA/DqB,EAEIF,EAAA+U,EAAA5U,CAAA,EADDJ,EAAmCgV,EAAAuE,CAAA,4BAAJza,EAAC,EAAA,mBADEA,EAAY,EAAA,mBAASA,EAAK,EAAA,yCAD7DA,EAAK,IAAIA,EAAC,KAAK,QAASkJ,GAAAlJ,CAAA,mEAAxBA,EAAK,IAAIA,EAAC,KAAK,+IA3BR,QAAA6Z,CAAO,EAAAhR,GACL,QAAAiR,CAAO,EAAAjR,EACP,CAAA,UAAA+N,EAAY,CAAC,EAAA/N,GACb,UAAA6N,EAAYT,EAAO,OAAO,EAAApN,EAC1B,CAAA,SAAA8N,EAAW,CAAC,EAAA9N,EACZ,CAAA,MAAAuK,EAAQ,EAAE,EAAAvK,QAQfgI,EAAO3M,GAAW,MAAM,EAExB2Q,EAAQhE,EAAK,gCACbiE,EAAOjE,EAAK,8BACZF,EAAKE,EAAK,6BACVD,EAAKC,EAAK,uRAGfvF,EAAA,EAAEb,EAAIkK,EAAQjE,GAAMmJ,EAASC,EAASlE,EAAKE,EAAKjF,CAAI,EAAI,MAAS,oBAG/DvF,EAAA,EAAA4L,EAA0C,2BAAAR,mBAA2BE,yBAAiC/F,EAAK,YAAY2E,GAAQmB,EAAS,IAAC,wQCqExI3W,EAAK,wBAAV,OAAIS,GAAA,0JAFqDsC,GAAAuP,EAAA,SAAA2D,EAAO,UAAU,YADnEjW,EAAI,GAAA,IAAA,YAASA,EAAG,IAAA,IAAA,iBAAcA,EAAY,GAAA,IAAA,cAAaA,EAAW,EAAA,UAA3EqB,EAwCMF,EAAAuZ,EAAApZ,CAAA,EAvCNJ,EAAuFwZ,EAAApI,CAAA,wEAEhFtS,EAAK,qBAAV,OAAIS,GAAA,EAAA,mHAAJ,qBAHOT,EAAI,GAAA,iCAASA,EAAG,IAAA,+BAAcA,EAAY,GAAA,yCAAaA,EAAW,EAAA,uFAU9DA,EAAS,EAAA,EAAMuC,EAAA4T,EAAA,KAAAC,EAAApW,KAAYA,EAAO,EAAA,EAAOuC,EAAA4T,EAAA,KAAAG,GAAAtW,EAAW,GAAAA,EAAY,GAAA,GAAG,CAAC,EAAOuC,EAAA4T,EAAA,KAAAI,GAAAvW,EAAW,GAAAA,EAAY,GAAA,GAAG,CAAC;eACpGA,MAAK,UAAYA,MAAK,UAAYiW,EAAO;AAAA,sBAClCjW,MAAK,UAAYA,MAAK,UAAY;AAAA,yBAC/BA,EAAI,IAAC,YAAYA,MAAQA,EAAI,IAAC,SAAW;AAAA,cAH/DqB,EAIIF,EAAAgV,EAAA7U,CAAA,wBAJMtB,EAAS,EAAA,EAAMK,EAAA,IAAA+V,KAAAA,EAAApW,KAAYA,EAAO,iBAAOK,EAAA,IAAAiW,KAAAA,GAAAtW,EAAW,GAAAA,EAAY,GAAA,GAAG,gBAAQK,EAAA,IAAAkW,KAAAA,GAAAvW,EAAW,GAAAA,EAAY,GAAA,GAAG;eACnGA,MAAK,UAAYA,MAAK,UAAYiW,EAAO;AAAA,sBAClCjW,MAAK,UAAYA,MAAK,UAAY;AAAA,yBAC/BA,EAAI,IAAC,YAAYA,MAAQA,EAAI,IAAC,SAAW;AAAA,2DAc7D0L,EAAA1L,MAAK,eAAeA,EAAK,IAAA,OAAS,GAAC,0CAR1BuC,EAAA0P,EAAA,IAAAmF,GAAApX,EAAU,GAAA,EAAIA,MAAW,EAAC,IAAA,EAAUuC,EAAA0P,EAAA,IAAAE,GAAAnS,EAAW,GAAA,EAAIA,MAAW,EAAC,IAAA;gBAG7DA,MAAK,UAAYA,MAAK,UAAY;AAAA,wBAC1BA,MAAK,YAAcA,MAAK,YAAc;AAAA,kBAC5CA,MAAK,YAAcA,MAAK,YAAciW,EAAO;AAAA,qBAC1CjW,EAAQ;AAAA,uCAN1BqB,EAQ8CF,EAAA8Q,EAAA3Q,CAAA,iBAA5CjB,EAAA,GAAAqL,KAAAA,EAAA1L,MAAK,eAAeA,EAAK,IAAA,OAAS,GAAC,KAAA4C,GAAA6I,EAAAC,CAAA,EAR1BrL,EAAA,IAAA+W,KAAAA,GAAApX,EAAU,GAAA,EAAIA,MAAW,EAAC,kBAAUK,EAAA,IAAA8R,KAAAA,GAAAnS,EAAW,GAAA,EAAIA,MAAW,EAAC;gBAG7DA,MAAK,UAAYA,MAAK,UAAY;AAAA,wBAC1BA,MAAK,YAAcA,MAAK,YAAc;AAAA,kBAC5CA,MAAK,YAAcA,MAAK,YAAciW,EAAO;AAAA,qBAC1CjW,EAAQ;AAAA,0FAWlB,SAAWA,EAAI,IAAC,kBA3BnBgJ,EAAAhJ,EAAK,IAAA,UAAYA,EAAK,IAAA,SAAW,GAAKA,EAAK,IAAA,UAAY,GAACqS,GAAArS,CAAA,EASxDkY,EAAAlY,MAAK,QAAUA,EAAI,IAAC,OAAS,GAAKA,MAAK,OAASA,EAAK,IAAA,eAAe,QAAMiJ,GAAAjJ,CAAA,sEAerEA,EAAO,GAAGA,EAAS,GAAG,EAAC,IAAA,YAASA,EAAS,GAAA,IAAA,6EAEfiW,EAAO,oBAAoBjW,EAAQ,OAAA,UA7BjE,EAAC,IAAA,EAASuC,EAAAmY,EAAA,IAAAC,EAAA3a,EAAK,KAAAA,EAAW,GAAA,EAAIA,EAAS,IAAA,IAAA,gBAAcA,EAAW,GAAA,IAAA,iBAAcA,EAAQ,GAAG,EAAIA,EAAS,GAAA,IAAA,UAA/GqB,EAgCMF,EAAAuZ,EAAApZ,CAAA,uCALHJ,EAGqCwZ,EAAAzI,CAAA,wBA3BhCjS,EAAK,IAAA,UAAYA,EAAK,IAAA,SAAW,GAAKA,EAAK,IAAA,UAAY,yDASvDA,MAAK,QAAUA,EAAI,IAAC,OAAS,GAAKA,MAAK,OAASA,EAAK,IAAA,eAAe,0EAkBjE,SAAWA,EAAI,IAAC,SAAKiS,EAAA,UAAAkF,gBAHnBnX,EAAO,GAAGA,EAAS,GAAG,EAAC,8BAASA,EAAS,GAAA,yDAEfiW,EAAO,oBAAoBjW,EAAQ,yBA7BvDK,EAAA,IAAAsa,KAAAA,EAAA3a,EAAK,KAAAA,EAAW,GAAA,EAAIA,EAAS,IAAA,+BAAcA,EAAW,GAAA,mCAAcA,EAAQ,GAAG,EAAIA,EAAS,GAAA,gFAT1GA,EAAK,IAAAkJ,GAAAlJ,CAAA,mEAALA,EAAK,gHA9DE4a,GAAa9Y,EAAM+Y,EAAI,CAEvB,MAAA5W,EADU,SAAS,cAAc,QAAQ,EACvB,WAAW,IAAI,EACvC,OAAAA,EAAQ,KAAO4W,EACR5W,EAAQ,YAAYnC,CAAI,EAAE,MAa3B,SAAAgZ,GAAcC,EAAOhF,EAAUiF,EAAQ,CAGvC,MAAAC,EAAWlF,EACXmF,EAAYD,EAAW,EACvBE,EAAUF,EAAW,IAIrBG,EAAWH,EACb,IAAAI,EAAU,UACL5a,EAAI,EAAGA,EAAIsa,EAAM,OAAQta,IAAC,CAC1B,MAAA6a,EAAIV,GAAa,KAAOG,EAAMta,GAAG,MAAQ,KAAMsV,EAAW,UAAU,EAC1EsF,EAAUC,EAAID,EAAUC,EAAID,EAGvB,MAAA,CAAAJ,EAAUE,EAASD,EAAWE,EAAUC,CAAO,sCA1D/C,MAAAN,CAAK,EAAAlS,EACP,CAAA,SAAAmS,EAAW,SAAS,EAAAnS,QAOvBgI,EAAO3M,GAAW,MAAM,EACxB2Q,EAAQhE,EAAK,+BACbkE,EAAOlE,EAAK,+BACZmE,EAAOnE,EAAK,+BACZF,EAAKE,EAAK,6BACVD,EAAKC,EAAK,6BACViE,EAAOjE,EAAK,4BAgDdqD,EAAME,EAAK6G,EAAUE,EAASD,EAAWE,EAAUC,EAASE,EAAcC,EAAazF,8HACpFpB,EAAK,CAETrJ,EAAA,EAAAyK,EAAWlF,EAAK,iBAAiB2E,EAAM,EAGtClK,EAAA,EAAA,CAAA2P,EAAUE,EAASD,EAAWE,EAAUC,CAAO,EAAIP,GAAcC,EAAOhF,CAAkB,EAAAkF,GAAA3P,EAAA,EAAA6P,CAAA,EAAA7P,EAAA,EAAAqJ,CAAA,EAAArJ,EAAA,EAAAkK,CAAA,EAAAlK,EAAA,EAAAyP,CAAA,EAAAzP,EAAA,EAAAyK,CAAA,EAAAzK,EAAA,GAAA0P,CAAA,EAAA1P,EAAA,EAAA2P,CAAA,EAAA3P,EAAA,EAAA4P,CAAA,EAAA5P,EAAA,GAAA+P,CAAA,EAAA/P,EAAA,GAAAoK,CAAA,EAAApK,EAAA,GAAAsK,CAAA,EAAAtK,EAAA,EAAAkQ,CAAA,EAAAlQ,EAAA,GAAAmK,CAAA,EAAAnK,EAAA,GAAAwK,CAAA,EAAAxK,EAAA,EAAAiQ,CAAA,IAAAjQ,EAAA,EAAA4P,CAAA,EAAA5P,EAAA,EAAAqJ,CAAA,EAAArJ,EAAA,EAAAkK,CAAA,EAAAlK,EAAA,EAAAyP,CAAA,EAAAzP,EAAA,EAAAyK,CAAA,EAAAzK,EAAA,GAAA0P,CAAA,EAAA1P,EAAA,EAAA2P,CAAA,EAAA3P,EAAA,EAAA6P,CAAA,EAAA7P,EAAA,GAAA+P,CAAA,EAAA/P,EAAA,GAAAoK,CAAA,EAAApK,EAAA,GAAAsK,CAAA,EAAAtK,EAAA,EAAAkQ,CAAA,EAAAlQ,EAAA,GAAAmK,CAAA,EAAAnK,EAAA,GAAAwK,CAAA,EAAAxK,EAAA,EAAAiQ,CAAA,IAAAjQ,EAAA,GAAA+P,CAAA,EAAA/P,EAAA,EAAAqJ,CAAA,EAAArJ,EAAA,EAAAkK,CAAA,EAAAlK,EAAA,EAAAyP,CAAA,EAAAzP,EAAA,EAAAyK,CAAA,EAAAzK,EAAA,GAAA0P,CAAA,EAAA1P,EAAA,EAAA2P,CAAA,EAAA3P,EAAA,EAAA4P,CAAA,EAAA5P,EAAA,EAAA6P,CAAA,EAAA7P,EAAA,GAAAoK,CAAA,EAAApK,EAAA,GAAAsK,CAAA,EAAAtK,EAAA,EAAAkQ,CAAA,EAAAlQ,EAAA,GAAAmK,CAAA,EAAAnK,EAAA,GAAAwK,CAAA,EAAAxK,EAAA,EAAAiQ,CAAA,QAG3FA,GAAgBN,EAAW,EAAIC,GAAaH,EAAM,MAAM,EACxDzP,EAAA,EAAAkQ,EAAeL,EAAU,EAAID,EAAYG,CAAO,QAG1CI,EAAS5K,EAAK,UAAU6E,EAAOE,EAAI,MAAM,EAC/CtK,EAAA,EAAA4I,EAAO8G,EAAS,SAAS,MAAM,EAAIS,EAAO,GAAK5K,EAAK,UAAU2E,GAC1DwF,EAAS,SAAS,OAAO,EAAIS,EAAO,GAAKD,EAAc3K,EAAK,UAAU2E,GACtErJ,GAAKsP,CAAM,EAAID,EAAY,CAAC,QAE1BE,EAAS7K,EAAK,UAAU4E,EAAOK,EAAI,MAAM,EAC/CxK,EAAA,GAAA8I,EAAM4G,EAAS,SAAS,KAAK,EAAIU,EAAO,GAAK7K,EAAK,UAAU2E,GACxDwF,EAAS,SAAS,QAAQ,EAAIU,EAAO,GAAKH,EAAe1K,EAAK,UAAU2E,GACxErJ,GAAKuP,CAAM,EAAIH,EAAa,CAAC,gMCvFxBvb,EAAW,EAAA,CAAA,CAAA,+EAAXA,EAAW,uHADrBA,EAAW,IAAAkJ,GAAAlJ,CAAA,wEAAXA,EAAW,yMARF,OAAA2b,CAAM,EAAA9S,EACN,CAAA,KAAA+S,EAAO,MAAM,EAAA/S,iHAErBgT,EAAI,CAAI,MAAM,SAAU,OAAQ,EAAG,YAAa,cAAe,UAAWF,EAAO,wBACjFG,EAAI,CAAI,MAAM,SAAU,OAAQ,EAAG,YAAa,cAAe,UAAWH,EAAO,qBACjFrQ,EAAA,EAAAyQ,EAAcH,IAAS,OAAU,CAAAC,EAAMC,CAAI,EAAIF,IAAS,MAAS,CAAAC,CAAI,GAAKC,CAAI,CAAA,2JCwB9D,CAAC,UAAY,CAAC,QAAU9b,EAAI,EAAA,QAAU,CAAC,YAAc,IAAgB,UAAAA,KAAO,wBACzE,QAAA,CAAAA,KAAK,CAAC,WAAa,CAAC,UAAYA,EAAI,GAAC,QAAQ,CAAC,CAAA,MAAS,EAAc,UAAAA,KAAO,6HADvDA,EAAI,EAAA,GAAyCK,EAAA,IAAA2b,EAAA,UAAAhc,KAAO,0BACzEK,EAAA,IAAA4b,EAAA,QAAA,CAAAjc,KAAK,CAAC,mBAA0BA,EAAI,GAAC,QAAQ,CAAC,CAAA,GAAuBK,EAAA,IAAA4b,EAAA,UAAAjc,KAAO,+MAK/EA,EAAI,EAAA,UAAY,CAAC,QAAUA,EAAI,EAAA,QAAUA,EAAI,EAAA,YAAc,IAAgB,UAAAA,KAAO,wBAC/E,QAAA,CAAAA,KAAO,GAAI,EAAa,QAAA,CAAAA,KAAK,CAAC,UAAYA,EAAI,GAAC,QAAQ,CAAC,CAAA,MAAS,EAAc,UAAAA,KAAO,+HADzFA,EAAI,EAAA,iBAAuBA,EAAI,EAAA,iBAAUA,EAAI,EAAA,GAA8BK,EAAA,IAAA2b,EAAA,UAAAhc,KAAO,0BAC/EK,EAAA,IAAA4b,EAAA,QAAA,CAAAjc,KAAO,GAAI,GAAaK,EAAA,IAAA4b,EAAA,QAAA,CAAAjc,KAAK,CAAC,mBAAYA,EAAI,GAAC,QAAQ,CAAC,CAAA,GAAuBK,EAAA,IAAA4b,EAAA,UAAAjc,KAAO,sOAnBvF,QAAU,CAAC,UAAY,CAAC,QAAU,CAAC,sDACnC,QAAU,CAAC,UAAY,CAAC,QAAU,CAAC,oDACxCA,EAAI,WAAWA,EAAI,qDAGhB,CAAC,UAAY,CAAC,QAAUA,EAAI,EAAA,QAAUA,EAAI,EAAA,kDAC1CA,EAAI,EAAA,UAAYA,EAAI,EAAA,QAAUA,EAAI,EAAA,UAAY,YAAc,WAAa,oDACzEA,EAAI,EAAA,UAAYA,EAAI,EAAA,UAAY,QAAUA,EAAI,EAAA,YAAc,WAAa,qDAC1EA,EAAI,EAAA,WAAaA,EAAI,EAAA,+CAGlC,IAAAgJ,GAAAhJ,EAAS,KAAA,OAASA,OAAS,SAAMiJ,GAAAjJ,CAAA,EAMjCkY,GAAAlY,EAAS,KAAA,OAASA,OAAS,SAAMkJ,GAAAlJ,CAAA,ueAZKA,EAAI,EAAA,iBAAUA,EAAI,EAAA,wCAC1CA,EAAI,EAAA,mBAAYA,EAAI,EAAA,iBAAUA,EAAI,EAAA,wCAClCA,EAAI,EAAA,mBAAYA,EAAI,EAAA,iBAAsBA,EAAI,EAAA,yCAC/CA,EAAI,EAAA,oBAAaA,EAAI,EAAA,aAGlCA,EAAS,KAAA,OAASA,OAAS,gHAM3BA,EAAS,KAAA,OAASA,OAAS,6uBAOF,EAAI,CAAA,CAAA,uMACJ,EAAI,CAAA,CAAA,8WA5BvB,KAAA,CAAA,MAAM,IAAI,EAAW,KAAA,CAAA,MAAM,IAAI,kCAA6C,QAAA,CAAA,IAAM,IAAM,GAAK,EAAG,qSAZhG,MAAAkc,CAAK,EAAArT,GACL,OAAA8S,CAAM,EAAA9S,EACN,CAAA,KAAA+S,EAAO,MAAM,EAAA/S,EAEpBkD,EAAIG,GAAO,IAAI,EAAG,IAAK,EAAG,EAC1BiQ,EAAOpQ,EAAE,MAAMwC,GAAK,KAAK,IAAIA,EAAI,IAAM,KAAK,EAAE,CAAA,EAC9C6N,EAAOrQ,EAAE,MAAMwC,GAAK,KAAK,IAAIA,EAAI,IAAM,KAAK,EAAE,CAAA,0IAE/CjD,EAAA,EAAA+Q,EAAO,KAAK,IAAIH,EAAQ,IAAM,KAAK,EAAE,CAAA,iBACrC5Q,EAAA,EAAAgR,EAAO,KAAK,IAAIJ,EAAQ,IAAM,KAAK,EAAE,CAAA,+KCWxBlc,EAAC,WAAWA,EAAI,aAAa,YAAcA,EAAM,GAAC,IAAM,oCAClD,QAAWA,EAAK,EAAA,UAAYA,EAAI,EAAA,QAAUA,EAAI,EAAA,YAAcA,EAAM,GAAC,IAAM,cAAgB,+BAC7FA,EAAK,EAAA,WAAaA,EAAI,EAAA,EAAc,UAAAA,KAAO,IAAkB,YAAAA,KAAO,iCAChE,EAAE,WAAaA,EAAI,EAAA,EAAmB,OAAA,CAAA,OAAAA,EAAa,aAAAA,EAAK,GAAA,QAAQ,CAAC,GAAA,OAAY,CAAC,EAAc,UAAAA,KAAO,mNAH9DA,EAAM,GAAC,IAAM,yCACvCA,EAAK,EAAA,oBAAYA,EAAI,EAAA,kBAAUA,EAAI,EAAA,qBAAcA,EAAM,GAAC,IAAM,4CAC7EA,EAAK,EAAA,qBAAaA,EAAI,EAAA,GAAcK,EAAA,IAAAkc,EAAA,UAAAvc,KAAO,KAAkBK,EAAA,IAAAkc,EAAA,YAAAvc,KAAO,4CACjDA,EAAI,EAAA,GAAmBK,EAAA,KAAA4b,EAAA,OAAA,CAAA,OAAAjc,EAAa,aAAAA,EAAK,GAAA,QAAQ,CAAC,GAAA,GAA2BK,EAAA,IAAA4b,EAAA,UAAAjc,KAAO,iUAIzGA,EAAC,WAAWA,EAAI,aAAa,YAAcA,EAAM,GAAC,IAAM,oCAClD,QAAWA,EAAK,EAAA,UAAYA,EAAI,EAAA,QAAUA,EAAI,EAAA,YAAcA,EAAM,GAAC,IAAM,cAAgB,+BAC7FA,EAAK,EAAA,WAAaA,EAAI,EAAA,EAAc,UAAAA,KAAO,IAAkB,YAAAA,KAAO,iCAChE,EAAE,WAAaA,EAAI,EAAA,EAAmB,OAAA,CAAA,OAAAA,EAAa,aAAAA,EAAK,GAAA,QAAQ,CAAC,GAAA,OAAY,CAAC,EAAc,UAAAA,KAAO,mNAH9DA,EAAM,GAAC,IAAM,yCACvCA,EAAK,EAAA,mBAAYA,EAAI,EAAA,iBAAUA,EAAI,EAAA,qBAAcA,EAAM,GAAC,IAAM,4CAC7EA,EAAK,EAAA,oBAAaA,EAAI,EAAA,GAAcK,EAAA,IAAAkc,EAAA,UAAAvc,KAAO,KAAkBK,EAAA,IAAAkc,EAAA,YAAAvc,KAAO,2CACjDA,EAAI,EAAA,GAAmBK,EAAA,IAAA4b,EAAA,OAAA,CAAA,OAAAjc,EAAa,aAAAA,EAAK,GAAA,QAAQ,CAAC,GAAA,GAA2BK,EAAA,IAAA4b,EAAA,UAAAjc,KAAO,iUAfnG,QAAU,GAAG,UAAY,CAAC,QAAU,CAAC,oDACxCA,EAAK,EAAA,QAAWA,EAAK,EAAA,cAAgB,QAAU,GAAG,iCAAmC,sBAClF,QAAA,CAAAA,KAAQ,EAAE,WAAa,GAAG,UAAY,WAAaA,EAAK,GAAG,MAAG,MAAQ,KAEvF,IAAAgJ,GAAAhJ,EAAS,KAAA,OAASA,OAAS,SAAMiJ,GAAAjJ,CAAA,EAOjCkY,GAAAlY,EAAS,KAAA,OAASA,OAAS,SAAMkJ,GAAAlJ,CAAA,qUAVnBA,EAAK,EAAA,iBAAWA,EAAK,EAAA,wBAClBK,EAAA,IAAA4b,EAAA,QAAA,CAAAjc,KAAQ,EAAE,mBAA4B,WAAaA,EAAK,GAAG,MAAG,aAE/EA,EAAS,KAAA,OAASA,OAAS,gHAO3BA,EAAS,KAAA,OAASA,OAAS,yhBAUF,EAAI,CAAA,CAAA,uMACJ,EAAI,CAAA,CAAA,8WAzBvB,KAAA,CAAA,IAAI,GAAG,EAAW,KAAA,CAAA,KAAK,GAAG,qCAAgD,QAAA,CAAA,EAAG,EAAG,GAAK,EAAG,qSAZxF,MAAAkc,CAAK,EAAArT,GACL,OAAA8S,CAAM,EAAA9S,EACN,CAAA,KAAA+S,EAAO,MAAM,EAAA/S,EAEpBkD,EAAIG,GAAO,QAAS,IAAK,EAAG,EAC5BiQ,EAAOpQ,EAAE,MAAMwC,GAAK,KAAK,IAAIA,EAAI,IAAM,KAAK,EAAE,CAAA,EAC9C6N,EAAOrQ,EAAE,MAAMwC,GAAK,KAAK,IAAIA,EAAI,IAAM,KAAK,EAAE,CAAA,yIAE/CjD,EAAA,EAAA+Q,EAAO,KAAK,IAAIH,EAAQ,IAAM,KAAK,EAAE,CAAA,gBACrC5Q,EAAA,EAAAgR,EAAO,KAAK,IAAIJ,EAAQ,IAAM,KAAK,EAAE,CAAA,wMCcwB,MAAQ,SAAW,GAA/Blc,EAAK,KAAA,iBAALA,EAAK,wGACW,OAAQ,MAAO,KAAK,UAApCA,EAAI,KAAA,iBAAJA,EAAI,oLADJA,EAAK,6DACLA,EAAI,+NAStCA,EAAQ,GAAE,QAAQ,CAAC,EAAA,eAIpBwc,EAAA,KAAK,IAAIxc,EAAU,EAAA,EAAA,QAAQ,CAAC,EAAA,iBAI5Byc,GAAA,KAAK,IAAIzc,EAAU,EAAA,EAAA,QAAQ,CAAC,EAAA,yBAI3B,KAAK,IAAIA,OAAW,GAAG,QAAQ,CAAC,EAAA,yBAIhC,KAAK,IAAIA,OAAW,GAAG,QAAQ,CAAC,EAAA,mBAIhC0c,IAAA,KAAK,IAAI1c,EAAQ,EAAA,GAAG,EAAI,KAAK,IAAIA,EAAQ,EAAA,GAAG,GAAG,QAAQ,CAAC,EAAA,gYAxBzDA,EAAK,EAAA,+nCAlBzBqB,EA+CMF,EAAAwb,EAAArb,EAAA,EA7CAJ,EAEMyb,EAAApT,CAAA,qBAENrI,EAEMyb,EAAArT,CAAA,qBAENpI,EAmCMyb,EAAAC,CAAA,qBA9BH1b,EA6BQ0b,EAAAC,CAAA,EA5BL3b,EAGK2b,EAAAC,CAAA,EAFF5b,EAAuB4b,EAAAC,CAAA,SACvB7b,EAAgB4b,EAAAE,CAAA,gBAEnB9b,EAGK2b,EAAAI,CAAA,EAFF/b,EAAuB+b,EAAAC,CAAA,SACvBhc,EAAgC+b,EAAAE,CAAA,gBAEnCjc,EAGK2b,EAAAO,CAAA,EAFFlc,EAAekc,EAAAC,CAAA,SACfnc,EAAwCkc,EAAAE,CAAA,gBAE3Cpc,EAGK2b,EAAAU,CAAA,EAFFrc,EAAeqc,EAAAC,CAAA,UACftc,EAAwCqc,EAAAE,EAAA,mBAE3Cvc,EAGK2b,EAAAa,EAAA,EAFFxc,EAA2Bwc,GAAAC,EAAA,WAC3Bzc,EAA6Cwc,GAAAE,EAAA,mBAEhD1c,EAGK2b,EAAAgB,EAAA,EAFF3c,EAA2B2c,GAAAC,EAAA,WAC3B5c,EAA6C2c,GAAAE,EAAA,kBAEhD7c,EAGK2b,EAAAmB,CAAA,EAFF9c,EAAgD8c,EAAAC,EAAA,UAChD/c,EAAqE8c,EAAAE,EAAA,8OAxBhEle,EAAK,EAAA,sBAIJA,EAAQ,GAAE,QAAQ,CAAC,EAAA,KAAA4C,GAAAub,EAAAC,CAAA,GAIpB,CAAAnL,IAAA5S,GAAA,IAAAmc,KAAAA,EAAA,KAAK,IAAIxc,EAAU,EAAA,EAAA,QAAQ,CAAC,EAAA,KAAA4C,GAAAyb,EAAA7B,CAAA,GAI5B,CAAAvJ,IAAA5S,GAAA,IAAAoc,MAAAA,GAAA,KAAK,IAAIzc,EAAU,EAAA,EAAA,QAAQ,CAAC,EAAA,KAAA4C,GAAA0b,GAAA7B,EAAA,yBAI3B,KAAK,IAAIzc,OAAW,GAAG,QAAQ,CAAC,EAAA,KAAA4C,GAAA2b,GAAAC,EAAA,yBAIhC,KAAK,IAAIxe,OAAW,GAAG,QAAQ,CAAC,EAAA,KAAA4C,GAAA6b,GAAAC,EAAA,GAIhC,CAAAzL,IAAA5S,GAAA,IAAAqc,MAAAA,IAAA,KAAK,IAAI1c,EAAQ,EAAA,GAAG,EAAI,KAAK,IAAIA,EAAQ,EAAA,GAAG,GAAG,QAAQ,CAAC,EAAA,KAAA4C,GAAA+b,GAAAjC,EAAA,0MAhDpE,MAAAf,GAAW,IAAK,UAAW,IAAK,SAAS,EAC3C,IAAAC,EAAO,OACPM,EAAQ,iBAgBwCA,EAAKzZ,uBACLmZ,EAAInZ,+CAhBvD6I,EAAA,EAAEsT,EAAW1C,EAAQ,IAAM,KAAK,EAAE,mFCX1B,IAAI2C,GAAI,CACnB,OAAQ,SAAS,eAAe,uBAAuB,CACxD,CAAC"}